<?xml version="1.0"?>
<!-- This file was automatically generated from C sources - DO NOT EDIT!
To affect the contents of this file, edit the original C definitions,
and/or use gtk-doc annotations.  -->
<repository version="1.0"
            xmlns="http://www.gtk.org/introspection/core/1.0"
            xmlns:c="http://www.gtk.org/introspection/c/1.0"
            xmlns:glib="http://www.gtk.org/introspection/glib/1.0">
  <include name="GLib" version="2.0"/>
  <include name="GObject" version="2.0"/>
  <include name="Gio" version="2.0"/>
  <namespace name="PackageKitGlib"
             version="1.0"
             shared-library="libpackagekit-glib2.so.13"
             c:prefix="PackageKitGlib">
    <alias name="PkBitfield" target="uint64" c:type="PkBitfield"/>
    <constant name="CONSOLE_WHITE" value="37">
      <type name="int"/>
    </constant>
    <constant name="PK_CATALOG_FILE_EXTENSION" value="catalog">
      <type name="utf8"/>
    </constant>
    <constant name="PK_CLIENT_DBUS_METHOD_TIMEOUT" value="1500">
      <type name="int"/>
    </constant>
    <constant name="PK_CONTROL_DBUS_METHOD_TIMEOUT" value="1500">
      <type name="int"/>
    </constant>
    <constant name="PK_DBUS_INTERFACE" value="org.freedesktop.PackageKit">
      <type name="utf8"/>
    </constant>
    <constant name="PK_DBUS_INTERFACE_TRANSACTION"
              value="org.freedesktop.PackageKit.Transaction">
      <type name="utf8"/>
    </constant>
    <constant name="PK_DBUS_PATH" value="/org/freedesktop/PackageKit">
      <type name="utf8"/>
    </constant>
    <constant name="PK_DBUS_SERVICE" value="org.freedesktop.PackageKit">
      <type name="utf8"/>
    </constant>
    <constant name="PK_DESKTOP_DEFAULT_APPLICATION_DIR"
              value="/usr/share/applications">
      <type name="utf8"/>
    </constant>
    <constant name="PK_MAJOR_VERSION" value="0">
      <type name="int"/>
    </constant>
    <constant name="PK_MICRO_VERSION" value="1">
      <type name="int"/>
    </constant>
    <constant name="PK_MINOR_VERSION" value="6">
      <type name="int"/>
    </constant>
    <constant name="PK_PACKAGE_ID_ARCH" value="2">
      <type name="int"/>
    </constant>
    <constant name="PK_PACKAGE_ID_DATA" value="3">
      <type name="int"/>
    </constant>
    <constant name="PK_PACKAGE_ID_NAME" value="0">
      <type name="int"/>
    </constant>
    <constant name="PK_PACKAGE_ID_VERSION" value="1">
      <type name="int"/>
    </constant>
    <constant name="PK_SERVICE_PACK_GROUP_NAME"
              value="PackageKit Service Pack">
      <type name="utf8"/>
    </constant>
    <enumeration name="PkAuthorizeEnum"
                 doc="The authorization result"
                 c:type="PkAuthorizeEnum">
      <member name="unknown"
              value="0"
              c:identifier="PK_AUTHORIZE_ENUM_UNKNOWN"/>
      <member name="yes" value="1" c:identifier="PK_AUTHORIZE_ENUM_YES"/>
      <member name="no" value="2" c:identifier="PK_AUTHORIZE_ENUM_NO"/>
      <member name="interactive"
              value="3"
              c:identifier="PK_AUTHORIZE_ENUM_INTERACTIVE"/>
      <member name="last" value="4" c:identifier="PK_AUTHORIZE_ENUM_LAST"/>
    </enumeration>
    <class name="PkCatalog"
           c:type="PkCatalog"
           parent="GObject.Object"
           glib:type-name="PkCatalog"
           glib:get-type="pk_catalog_get_type"
           glib:type-struct="PkCatalogClass">
      <constructor name="new" c:identifier="pk_catalog_new" version="0.5.3">
        <return-value transfer-ownership="full">
          <type name="PkCatalog" c:type="PkCatalog*"/>
        </return-value>
      </constructor>
      <function name="test" c:identifier="pk_catalog_test">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="user_data" transfer-ownership="none">
            <type name="any" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <method name="lookup_finish"
              c:identifier="pk_catalog_lookup_finish"
              doc="Gets the result from the asynchronous function."
              version="0.5.3"
              throws="1">
        <return-value transfer-ownership="full">
          <type name="GLib.PtrArray" c:type="GPtrArray*"/>
        </return-value>
        <parameters>
          <parameter name="res" transfer-ownership="none">
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="lookup_async"
              c:identifier="pk_catalog_lookup_async"
              doc="Simulate the install of a catalog file."
              version="0.5.3">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="filename" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="cancellable" transfer-ownership="none">
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="progress_callback"
                     transfer-ownership="none"
                     scope="call"
                     closure="4">
            <type name="PkProgressCallback" c:type="PkProgressCallback"/>
          </parameter>
          <parameter name="progress_user_data" transfer-ownership="none">
            <type name="any" c:type="gpointer"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     scope="async"
                     closure="6">
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data" transfer-ownership="none">
            <type name="any" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <field name="parent">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="priv">
        <type name="PkCatalogPrivate" c:type="PkCatalogPrivate*"/>
      </field>
    </class>
    <record name="PkCatalogClass"
            c:type="PkCatalogClass"
            glib:is-gtype-struct-for="PkCatalog">
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="pk_reserved1">
        <callback name="pk_reserved1" c:type="_pk_reserved1">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="pk_reserved2">
        <callback name="pk_reserved2" c:type="_pk_reserved2">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="pk_reserved3">
        <callback name="pk_reserved3" c:type="_pk_reserved3">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="pk_reserved4">
        <callback name="pk_reserved4" c:type="_pk_reserved4">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
    </record>
    <enumeration name="PkCatalogError"
                 glib:type-name="PkCatalogError"
                 glib:get-type="pk_catalog_error_get_type"
                 c:type="PkCatalogError"
                 glib:error-quark="pk_catalog_error_quark">
      <member name="Failed"
              value="0"
              c:identifier="PK_CATALOG_ERROR_FAILED"
              glib:nick="Failed"/>
    </enumeration>
    <record name="PkCatalogPrivate"
            c:type="PkCatalogPrivate"
            doc="Private #PkCatalog data">
    </record>
    <class name="PkCategory"
           c:type="PkCategory"
           parent="PkSource"
           glib:type-name="PkCategory"
           glib:get-type="pk_category_get_type"
           glib:type-struct="PkCategoryClass">
      <constructor name="new" c:identifier="pk_category_new" version="0.5.4">
        <return-value transfer-ownership="full">
          <type name="PkCategory" c:type="PkCategory*"/>
        </return-value>
      </constructor>
      <property name="cat-id" writable="1">
        <type name="utf8" c:type="gchararray"/>
      </property>
      <property name="icon" writable="1">
        <type name="utf8" c:type="gchararray"/>
      </property>
      <property name="name" writable="1">
        <type name="utf8" c:type="gchararray"/>
      </property>
      <property name="parent-id" writable="1">
        <type name="utf8" c:type="gchararray"/>
      </property>
      <property name="summary" writable="1">
        <type name="utf8" c:type="gchararray"/>
      </property>
      <field name="parent">
        <type name="PkSource" c:type="PkSource"/>
      </field>
      <field name="priv">
        <type name="PkCategoryPrivate" c:type="PkCategoryPrivate*"/>
      </field>
    </class>
    <record name="PkCategoryClass"
            c:type="PkCategoryClass"
            glib:is-gtype-struct-for="PkCategory">
      <field name="parent_class">
        <type name="PkSourceClass" c:type="PkSourceClass"/>
      </field>
      <field name="pk_reserved1">
        <callback name="pk_reserved1" c:type="_pk_reserved1">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="pk_reserved2">
        <callback name="pk_reserved2" c:type="_pk_reserved2">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="pk_reserved3">
        <callback name="pk_reserved3" c:type="_pk_reserved3">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="pk_reserved4">
        <callback name="pk_reserved4" c:type="_pk_reserved4">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="pk_reserved5">
        <callback name="pk_reserved5" c:type="_pk_reserved5">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
    </record>
    <record name="PkCategoryPrivate"
            c:type="PkCategoryPrivate"
            doc="Private #PkCategory data">
    </record>
    <class name="PkClient"
           c:type="PkClient"
           parent="GObject.Object"
           glib:type-name="PkClient"
           glib:get-type="pk_client_get_type"
           glib:type-struct="PkClientClass">
      <constructor name="new"
                   c:identifier="pk_client_new"
                   doc="PkClient is a nice GObject wrapper for PackageKit and makes writing
frontends easy."
                   version="0.5.2">
        <return-value transfer-ownership="full">
          <type name="PkClient" c:type="PkClient*"/>
        </return-value>
      </constructor>
      <function name="test" c:identifier="pk_client_test">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="user_data" transfer-ownership="none">
            <type name="any" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <virtual-method name="changed">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </virtual-method>
      <method name="generic_finish"
              c:identifier="pk_client_generic_finish"
              doc="Gets the result from the asynchronous function."
              version="0.5.2"
              throws="1">
        <return-value transfer-ownership="full">
          <type name="PkResults" c:type="PkResults*"/>
        </return-value>
        <parameters>
          <parameter name="res" transfer-ownership="none">
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="resolve_async"
              c:identifier="pk_client_resolve_async"
              doc="Resolve a package name into a %package_id. This can return installed and
available packages and allows you find out if a package is installed locally
or is available in a repository."
              version="0.5.2">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="filters" transfer-ownership="none">
            <type name="PkBitfield" c:type="PkBitfield"/>
          </parameter>
          <parameter name="packages" transfer-ownership="none">
            <array c:type="gchar**">
              <type name="utf8"/>
            </array>
          </parameter>
          <parameter name="cancellable" transfer-ownership="none">
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="progress_callback"
                     transfer-ownership="none"
                     scope="call"
                     closure="5">
            <type name="PkProgressCallback" c:type="PkProgressCallback"/>
          </parameter>
          <parameter name="progress_user_data" transfer-ownership="none">
            <type name="any" c:type="gpointer"/>
          </parameter>
          <parameter name="callback_ready"
                     transfer-ownership="none"
                     scope="async"
                     closure="7">
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data" transfer-ownership="none">
            <type name="any" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="search_names_async"
              c:identifier="pk_client_search_names_async"
              doc="Search all the locally installed files and remote repositories for a package
that matches a specific name."
              version="0.5.5">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="filters" transfer-ownership="none">
            <type name="PkBitfield" c:type="PkBitfield"/>
          </parameter>
          <parameter name="values" transfer-ownership="none">
            <array c:type="gchar**">
              <type name="utf8"/>
            </array>
          </parameter>
          <parameter name="cancellable" transfer-ownership="none">
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="progress_callback"
                     transfer-ownership="none"
                     scope="call"
                     closure="5">
            <type name="PkProgressCallback" c:type="PkProgressCallback"/>
          </parameter>
          <parameter name="progress_user_data" transfer-ownership="none">
            <type name="any" c:type="gpointer"/>
          </parameter>
          <parameter name="callback_ready"
                     transfer-ownership="none"
                     scope="async"
                     closure="7">
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data" transfer-ownership="none">
            <type name="any" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="search_details_async"
              c:identifier="pk_client_search_details_async"
              doc="Search all detailed summary information to try and find a keyword.
Think of this as pk_client_search_names(), but trying much harder and
taking longer."
              version="0.5.5">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="filters" transfer-ownership="none">
            <type name="PkBitfield" c:type="PkBitfield"/>
          </parameter>
          <parameter name="values" transfer-ownership="none">
            <array c:type="gchar**">
              <type name="utf8"/>
            </array>
          </parameter>
          <parameter name="cancellable" transfer-ownership="none">
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="progress_callback"
                     transfer-ownership="none"
                     scope="call"
                     closure="5">
            <type name="PkProgressCallback" c:type="PkProgressCallback"/>
          </parameter>
          <parameter name="progress_user_data" transfer-ownership="none">
            <type name="any" c:type="gpointer"/>
          </parameter>
          <parameter name="callback_ready"
                     transfer-ownership="none"
                     scope="async"
                     closure="7">
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data" transfer-ownership="none">
            <type name="any" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="search_groups_async"
              c:identifier="pk_client_search_groups_async"
              doc="Return all packages in a specific group."
              version="0.5.5">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="filters" transfer-ownership="none">
            <type name="PkBitfield" c:type="PkBitfield"/>
          </parameter>
          <parameter name="values" transfer-ownership="none">
            <array c:type="gchar**">
              <type name="utf8"/>
            </array>
          </parameter>
          <parameter name="cancellable" transfer-ownership="none">
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="progress_callback"
                     transfer-ownership="none"
                     scope="call"
                     closure="5">
            <type name="PkProgressCallback" c:type="PkProgressCallback"/>
          </parameter>
          <parameter name="progress_user_data" transfer-ownership="none">
            <type name="any" c:type="gpointer"/>
          </parameter>
          <parameter name="callback_ready"
                     transfer-ownership="none"
                     scope="async"
                     closure="7">
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data" transfer-ownership="none">
            <type name="any" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="search_files_async"
              c:identifier="pk_client_search_files_async"
              doc="Search for packages that provide a specific file."
              version="0.5.5">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="filters" transfer-ownership="none">
            <type name="PkBitfield" c:type="PkBitfield"/>
          </parameter>
          <parameter name="values" transfer-ownership="none">
            <array c:type="gchar**">
              <type name="utf8"/>
            </array>
          </parameter>
          <parameter name="cancellable" transfer-ownership="none">
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="progress_callback"
                     transfer-ownership="none"
                     scope="call"
                     closure="5">
            <type name="PkProgressCallback" c:type="PkProgressCallback"/>
          </parameter>
          <parameter name="progress_user_data" transfer-ownership="none">
            <type name="any" c:type="gpointer"/>
          </parameter>
          <parameter name="callback_ready"
                     transfer-ownership="none"
                     scope="async"
                     closure="7">
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data" transfer-ownership="none">
            <type name="any" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_details_async"
              c:identifier="pk_client_get_details_async"
              doc="Get details of a package, so more information can be obtained for GUI
or command line tools."
              version="0.5.2">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="package_ids" transfer-ownership="none">
            <array c:type="gchar**">
              <type name="utf8"/>
            </array>
          </parameter>
          <parameter name="cancellable" transfer-ownership="none">
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="progress_callback"
                     transfer-ownership="none"
                     scope="call"
                     closure="4">
            <type name="PkProgressCallback" c:type="PkProgressCallback"/>
          </parameter>
          <parameter name="progress_user_data" transfer-ownership="none">
            <type name="any" c:type="gpointer"/>
          </parameter>
          <parameter name="callback_ready"
                     transfer-ownership="none"
                     scope="async"
                     closure="6">
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data" transfer-ownership="none">
            <type name="any" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_update_detail_async"
              c:identifier="pk_client_get_update_detail_async"
              doc="Get details about the specific update, for instance any CVE urls and
severity information."
              version="0.5.2">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="package_ids" transfer-ownership="none">
            <array c:type="gchar**">
              <type name="utf8"/>
            </array>
          </parameter>
          <parameter name="cancellable" transfer-ownership="none">
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="progress_callback"
                     transfer-ownership="none"
                     scope="call"
                     closure="4">
            <type name="PkProgressCallback" c:type="PkProgressCallback"/>
          </parameter>
          <parameter name="progress_user_data" transfer-ownership="none">
            <type name="any" c:type="gpointer"/>
          </parameter>
          <parameter name="callback_ready"
                     transfer-ownership="none"
                     scope="async"
                     closure="6">
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data" transfer-ownership="none">
            <type name="any" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="download_packages_async"
              c:identifier="pk_client_download_packages_async"
              doc="Downloads package files to a specified location."
              version="0.5.2">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="package_ids" transfer-ownership="none">
            <array c:type="gchar**">
              <type name="utf8"/>
            </array>
          </parameter>
          <parameter name="directory" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="cancellable" transfer-ownership="none">
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="progress_callback"
                     transfer-ownership="none"
                     scope="call"
                     closure="5">
            <type name="PkProgressCallback" c:type="PkProgressCallback"/>
          </parameter>
          <parameter name="progress_user_data" transfer-ownership="none">
            <type name="any" c:type="gpointer"/>
          </parameter>
          <parameter name="callback_ready"
                     transfer-ownership="none"
                     scope="async"
                     closure="7">
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data" transfer-ownership="none">
            <type name="any" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_updates_async"
              c:identifier="pk_client_get_updates_async"
              doc="Get a list of all the packages that can be updated for all repositories."
              version="0.5.2">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="filters" transfer-ownership="none">
            <type name="PkBitfield" c:type="PkBitfield"/>
          </parameter>
          <parameter name="cancellable" transfer-ownership="none">
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="progress_callback"
                     transfer-ownership="none"
                     scope="call"
                     closure="4">
            <type name="PkProgressCallback" c:type="PkProgressCallback"/>
          </parameter>
          <parameter name="progress_user_data" transfer-ownership="none">
            <type name="any" c:type="gpointer"/>
          </parameter>
          <parameter name="callback_ready"
                     transfer-ownership="none"
                     scope="async"
                     closure="6">
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data" transfer-ownership="none">
            <type name="any" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_old_transactions_async"
              c:identifier="pk_client_get_old_transactions_async"
              doc="Get the old transaction list, mainly used for the rollback viewer."
              version="0.5.2">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="number" transfer-ownership="none">
            <type name="uint" c:type="guint"/>
          </parameter>
          <parameter name="cancellable" transfer-ownership="none">
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="progress_callback"
                     transfer-ownership="none"
                     scope="call"
                     closure="4">
            <type name="PkProgressCallback" c:type="PkProgressCallback"/>
          </parameter>
          <parameter name="progress_user_data" transfer-ownership="none">
            <type name="any" c:type="gpointer"/>
          </parameter>
          <parameter name="callback_ready"
                     transfer-ownership="none"
                     scope="async"
                     closure="6">
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data" transfer-ownership="none">
            <type name="any" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="update_system_async"
              c:identifier="pk_client_update_system_async"
              doc="Update all the packages on the system with the highest versions found in all
repositories.
- pk_client_repo_disable()
- pk_client_update_system()
- pk_client_repo_enable()"
              version="0.5.2">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="only_trusted" transfer-ownership="none">
            <type name="boolean" c:type="gboolean"/>
          </parameter>
          <parameter name="cancellable" transfer-ownership="none">
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="progress_callback"
                     transfer-ownership="none"
                     scope="call"
                     closure="4">
            <type name="PkProgressCallback" c:type="PkProgressCallback"/>
          </parameter>
          <parameter name="progress_user_data" transfer-ownership="none">
            <type name="any" c:type="gpointer"/>
          </parameter>
          <parameter name="callback_ready"
                     transfer-ownership="none"
                     scope="async"
                     closure="6">
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data" transfer-ownership="none">
            <type name="any" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_depends_async"
              c:identifier="pk_client_get_depends_async"
              doc="Get the packages that depend this one, i.e. child-&gt;parent."
              version="0.5.2">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="filters" transfer-ownership="none">
            <type name="PkBitfield" c:type="PkBitfield"/>
          </parameter>
          <parameter name="package_ids" transfer-ownership="none">
            <array c:type="gchar**">
              <type name="utf8"/>
            </array>
          </parameter>
          <parameter name="recursive" transfer-ownership="none">
            <type name="boolean" c:type="gboolean"/>
          </parameter>
          <parameter name="cancellable" transfer-ownership="none">
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="progress_callback"
                     transfer-ownership="none"
                     scope="call"
                     closure="6">
            <type name="PkProgressCallback" c:type="PkProgressCallback"/>
          </parameter>
          <parameter name="progress_user_data" transfer-ownership="none">
            <type name="any" c:type="gpointer"/>
          </parameter>
          <parameter name="callback_ready"
                     transfer-ownership="none"
                     scope="async"
                     closure="8">
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data" transfer-ownership="none">
            <type name="any" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_packages_async"
              c:identifier="pk_client_get_packages_async"
              doc="Get the list of packages from the backend"
              version="0.5.2">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="filters" transfer-ownership="none">
            <type name="PkBitfield" c:type="PkBitfield"/>
          </parameter>
          <parameter name="cancellable" transfer-ownership="none">
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="progress_callback"
                     transfer-ownership="none"
                     scope="call"
                     closure="4">
            <type name="PkProgressCallback" c:type="PkProgressCallback"/>
          </parameter>
          <parameter name="progress_user_data" transfer-ownership="none">
            <type name="any" c:type="gpointer"/>
          </parameter>
          <parameter name="callback_ready"
                     transfer-ownership="none"
                     scope="async"
                     closure="6">
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data" transfer-ownership="none">
            <type name="any" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_requires_async"
              c:identifier="pk_client_get_requires_async"
              doc="Get the packages that require this one, i.e. parent-&gt;child."
              version="0.5.2">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="filters" transfer-ownership="none">
            <type name="PkBitfield" c:type="PkBitfield"/>
          </parameter>
          <parameter name="package_ids" transfer-ownership="none">
            <array c:type="gchar**">
              <type name="utf8"/>
            </array>
          </parameter>
          <parameter name="recursive" transfer-ownership="none">
            <type name="boolean" c:type="gboolean"/>
          </parameter>
          <parameter name="cancellable" transfer-ownership="none">
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="progress_callback"
                     transfer-ownership="none"
                     scope="call"
                     closure="6">
            <type name="PkProgressCallback" c:type="PkProgressCallback"/>
          </parameter>
          <parameter name="progress_user_data" transfer-ownership="none">
            <type name="any" c:type="gpointer"/>
          </parameter>
          <parameter name="callback_ready"
                     transfer-ownership="none"
                     scope="async"
                     closure="8">
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data" transfer-ownership="none">
            <type name="any" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="what_provides_async"
              c:identifier="pk_client_what_provides_async"
              doc="This should return packages that provide the supplied attributes.
This method is useful for finding out what package(s) provide a modalias
or GStreamer codec string."
              version="0.5.2">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="filters" transfer-ownership="none">
            <type name="PkBitfield" c:type="PkBitfield"/>
          </parameter>
          <parameter name="provides" transfer-ownership="none">
            <type name="PkProvidesEnum" c:type="PkProvidesEnum"/>
          </parameter>
          <parameter name="values" transfer-ownership="none">
            <array c:type="gchar**">
              <type name="utf8"/>
            </array>
          </parameter>
          <parameter name="cancellable" transfer-ownership="none">
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="progress_callback"
                     transfer-ownership="none"
                     scope="call"
                     closure="6">
            <type name="PkProgressCallback" c:type="PkProgressCallback"/>
          </parameter>
          <parameter name="progress_user_data" transfer-ownership="none">
            <type name="any" c:type="gpointer"/>
          </parameter>
          <parameter name="callback_ready"
                     transfer-ownership="none"
                     scope="async"
                     closure="8">
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data" transfer-ownership="none">
            <type name="any" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_distro_upgrades_async"
              c:identifier="pk_client_get_distro_upgrades_async"
              doc="This method should return a list of distribution upgrades that are available.
It should not return updates, only major upgrades."
              version="0.5.2">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="cancellable" transfer-ownership="none">
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="progress_callback"
                     transfer-ownership="none"
                     scope="call"
                     closure="3">
            <type name="PkProgressCallback" c:type="PkProgressCallback"/>
          </parameter>
          <parameter name="progress_user_data" transfer-ownership="none">
            <type name="any" c:type="gpointer"/>
          </parameter>
          <parameter name="callback_ready"
                     transfer-ownership="none"
                     scope="async"
                     closure="5">
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data" transfer-ownership="none">
            <type name="any" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_files_async"
              c:identifier="pk_client_get_files_async"
              doc="Get the file list (i.e. a list of files installed) for the specified package."
              version="0.5.2">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="package_ids" transfer-ownership="none">
            <array c:type="gchar**">
              <type name="utf8"/>
            </array>
          </parameter>
          <parameter name="cancellable" transfer-ownership="none">
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="progress_callback"
                     transfer-ownership="none"
                     scope="call"
                     closure="4">
            <type name="PkProgressCallback" c:type="PkProgressCallback"/>
          </parameter>
          <parameter name="progress_user_data" transfer-ownership="none">
            <type name="any" c:type="gpointer"/>
          </parameter>
          <parameter name="callback_ready"
                     transfer-ownership="none"
                     scope="async"
                     closure="6">
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data" transfer-ownership="none">
            <type name="any" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_categories_async"
              c:identifier="pk_client_get_categories_async"
              doc="Get a list of all categories supported."
              version="0.5.2">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="cancellable" transfer-ownership="none">
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="progress_callback"
                     transfer-ownership="none"
                     scope="call"
                     closure="3">
            <type name="PkProgressCallback" c:type="PkProgressCallback"/>
          </parameter>
          <parameter name="progress_user_data" transfer-ownership="none">
            <type name="any" c:type="gpointer"/>
          </parameter>
          <parameter name="callback_ready"
                     transfer-ownership="none"
                     scope="async"
                     closure="5">
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data" transfer-ownership="none">
            <type name="any" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="remove_packages_async"
              c:identifier="pk_client_remove_packages_async"
              doc="Remove a package (optionally with dependancies) from the system.
If %allow_deps is set to %FALSE, and other packages would have to be removed,
then the transaction would fail."
              version="0.5.2">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="package_ids" transfer-ownership="none">
            <array c:type="gchar**">
              <type name="utf8"/>
            </array>
          </parameter>
          <parameter name="allow_deps" transfer-ownership="none">
            <type name="boolean" c:type="gboolean"/>
          </parameter>
          <parameter name="autoremove" transfer-ownership="none">
            <type name="boolean" c:type="gboolean"/>
          </parameter>
          <parameter name="cancellable" transfer-ownership="none">
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="progress_callback"
                     transfer-ownership="none"
                     scope="call"
                     closure="6">
            <type name="PkProgressCallback" c:type="PkProgressCallback"/>
          </parameter>
          <parameter name="progress_user_data" transfer-ownership="none">
            <type name="any" c:type="gpointer"/>
          </parameter>
          <parameter name="callback_ready"
                     transfer-ownership="none"
                     scope="async"
                     closure="8">
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data" transfer-ownership="none">
            <type name="any" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="refresh_cache_async"
              c:identifier="pk_client_refresh_cache_async"
              doc="Refresh the cache, i.e. download new metadata from a remote URL so that
package lists are up to date.
This action may take a few minutes and should be done when the session and
system are idle."
              version="0.5.2">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="force" transfer-ownership="none">
            <type name="boolean" c:type="gboolean"/>
          </parameter>
          <parameter name="cancellable" transfer-ownership="none">
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="progress_callback"
                     transfer-ownership="none"
                     scope="call"
                     closure="4">
            <type name="PkProgressCallback" c:type="PkProgressCallback"/>
          </parameter>
          <parameter name="progress_user_data" transfer-ownership="none">
            <type name="any" c:type="gpointer"/>
          </parameter>
          <parameter name="callback_ready"
                     transfer-ownership="none"
                     scope="async"
                     closure="6">
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data" transfer-ownership="none">
            <type name="any" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="install_packages_async"
              c:identifier="pk_client_install_packages_async"
              doc="Install a package of the newest and most correct version."
              version="0.5.2">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="only_trusted" transfer-ownership="none">
            <type name="boolean" c:type="gboolean"/>
          </parameter>
          <parameter name="package_ids" transfer-ownership="none">
            <array c:type="gchar**">
              <type name="utf8"/>
            </array>
          </parameter>
          <parameter name="cancellable" transfer-ownership="none">
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="progress_callback"
                     transfer-ownership="none"
                     scope="call"
                     closure="5">
            <type name="PkProgressCallback" c:type="PkProgressCallback"/>
          </parameter>
          <parameter name="progress_user_data" transfer-ownership="none">
            <type name="any" c:type="gpointer"/>
          </parameter>
          <parameter name="callback_ready"
                     transfer-ownership="none"
                     scope="async"
                     closure="7">
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data" transfer-ownership="none">
            <type name="any" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="install_signature_async"
              c:identifier="pk_client_install_signature_async"
              doc="Install a software source signature of the newest and most correct version."
              version="0.5.2">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="type" transfer-ownership="none">
            <type name="PkSigTypeEnum" c:type="PkSigTypeEnum"/>
          </parameter>
          <parameter name="key_id" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="package_id" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="cancellable" transfer-ownership="none">
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="progress_callback"
                     transfer-ownership="none"
                     scope="call"
                     closure="6">
            <type name="PkProgressCallback" c:type="PkProgressCallback"/>
          </parameter>
          <parameter name="progress_user_data" transfer-ownership="none">
            <type name="any" c:type="gpointer"/>
          </parameter>
          <parameter name="callback_ready"
                     transfer-ownership="none"
                     scope="async"
                     closure="8">
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data" transfer-ownership="none">
            <type name="any" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="update_packages_async"
              c:identifier="pk_client_update_packages_async"
              doc="Update specific packages to the newest available versions."
              version="0.5.2">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="only_trusted" transfer-ownership="none">
            <type name="boolean" c:type="gboolean"/>
          </parameter>
          <parameter name="package_ids" transfer-ownership="none">
            <array c:type="gchar**">
              <type name="utf8"/>
            </array>
          </parameter>
          <parameter name="cancellable" transfer-ownership="none">
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="progress_callback"
                     transfer-ownership="none"
                     scope="call"
                     closure="5">
            <type name="PkProgressCallback" c:type="PkProgressCallback"/>
          </parameter>
          <parameter name="progress_user_data" transfer-ownership="none">
            <type name="any" c:type="gpointer"/>
          </parameter>
          <parameter name="callback_ready"
                     transfer-ownership="none"
                     scope="async"
                     closure="7">
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data" transfer-ownership="none">
            <type name="any" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="install_files_async"
              c:identifier="pk_client_install_files_async"
              doc="Install a file locally, and get the deps from the repositories.
This is useful for double clicking on a .rpm or .deb file."
              version="0.5.2">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="only_trusted" transfer-ownership="none">
            <type name="boolean" c:type="gboolean"/>
          </parameter>
          <parameter name="files" transfer-ownership="none">
            <array c:type="gchar**">
              <type name="utf8"/>
            </array>
          </parameter>
          <parameter name="cancellable" transfer-ownership="none">
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="progress_callback"
                     transfer-ownership="none"
                     scope="call"
                     closure="5">
            <type name="PkProgressCallback" c:type="PkProgressCallback"/>
          </parameter>
          <parameter name="progress_user_data" transfer-ownership="none">
            <type name="any" c:type="gpointer"/>
          </parameter>
          <parameter name="callback_ready"
                     transfer-ownership="none"
                     scope="async"
                     closure="7">
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data" transfer-ownership="none">
            <type name="any" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="accept_eula_async"
              c:identifier="pk_client_accept_eula_async"
              doc="We may want to agree to a EULA dialog if one is presented."
              version="0.5.2">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="eula_id" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="cancellable" transfer-ownership="none">
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="progress_callback"
                     transfer-ownership="none"
                     scope="call"
                     closure="4">
            <type name="PkProgressCallback" c:type="PkProgressCallback"/>
          </parameter>
          <parameter name="progress_user_data" transfer-ownership="none">
            <type name="any" c:type="gpointer"/>
          </parameter>
          <parameter name="callback_ready"
                     transfer-ownership="none"
                     scope="async"
                     closure="6">
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data" transfer-ownership="none">
            <type name="any" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="rollback_async"
              c:identifier="pk_client_rollback_async"
              doc="We may want to agree to a EULA dialog if one is presented."
              version="0.5.2">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="transaction_id" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="cancellable" transfer-ownership="none">
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="progress_callback"
                     transfer-ownership="none"
                     scope="call"
                     closure="4">
            <type name="PkProgressCallback" c:type="PkProgressCallback"/>
          </parameter>
          <parameter name="progress_user_data" transfer-ownership="none">
            <type name="any" c:type="gpointer"/>
          </parameter>
          <parameter name="callback_ready"
                     transfer-ownership="none"
                     scope="async"
                     closure="6">
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data" transfer-ownership="none">
            <type name="any" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_repo_list_async"
              c:identifier="pk_client_get_repo_list_async"
              doc="Get the list of repositories installed on the system."
              version="0.5.2">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="filters" transfer-ownership="none">
            <type name="PkBitfield" c:type="PkBitfield"/>
          </parameter>
          <parameter name="cancellable" transfer-ownership="none">
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="progress_callback"
                     transfer-ownership="none"
                     scope="call"
                     closure="4">
            <type name="PkProgressCallback" c:type="PkProgressCallback"/>
          </parameter>
          <parameter name="progress_user_data" transfer-ownership="none">
            <type name="any" c:type="gpointer"/>
          </parameter>
          <parameter name="callback_ready"
                     transfer-ownership="none"
                     scope="async"
                     closure="6">
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data" transfer-ownership="none">
            <type name="any" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="repo_enable_async"
              c:identifier="pk_client_repo_enable_async"
              doc="Enable or disable the repository."
              version="0.5.2">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="repo_id" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="enabled" transfer-ownership="none">
            <type name="boolean" c:type="gboolean"/>
          </parameter>
          <parameter name="cancellable" transfer-ownership="none">
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="progress_callback"
                     transfer-ownership="none"
                     scope="call"
                     closure="5">
            <type name="PkProgressCallback" c:type="PkProgressCallback"/>
          </parameter>
          <parameter name="progress_user_data" transfer-ownership="none">
            <type name="any" c:type="gpointer"/>
          </parameter>
          <parameter name="callback_ready"
                     transfer-ownership="none"
                     scope="async"
                     closure="7">
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data" transfer-ownership="none">
            <type name="any" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="repo_set_data_async"
              c:identifier="pk_client_repo_set_data_async"
              doc="We may want to set a repository parameter."
              version="0.5.2">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="repo_id" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="parameter" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="value" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="cancellable" transfer-ownership="none">
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="progress_callback"
                     transfer-ownership="none"
                     scope="call"
                     closure="6">
            <type name="PkProgressCallback" c:type="PkProgressCallback"/>
          </parameter>
          <parameter name="progress_user_data" transfer-ownership="none">
            <type name="any" c:type="gpointer"/>
          </parameter>
          <parameter name="callback_ready"
                     transfer-ownership="none"
                     scope="async"
                     closure="8">
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data" transfer-ownership="none">
            <type name="any" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="simulate_install_files_async"
              c:identifier="pk_client_simulate_install_files_async"
              doc="Simulate an installation of files."
              version="0.5.2">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="files" transfer-ownership="none">
            <array c:type="gchar**">
              <type name="utf8"/>
            </array>
          </parameter>
          <parameter name="cancellable" transfer-ownership="none">
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="progress_callback"
                     transfer-ownership="none"
                     scope="call"
                     closure="4">
            <type name="PkProgressCallback" c:type="PkProgressCallback"/>
          </parameter>
          <parameter name="progress_user_data" transfer-ownership="none">
            <type name="any" c:type="gpointer"/>
          </parameter>
          <parameter name="callback_ready"
                     transfer-ownership="none"
                     scope="async"
                     closure="6">
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data" transfer-ownership="none">
            <type name="any" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="simulate_install_packages_async"
              c:identifier="pk_client_simulate_install_packages_async"
              doc="Simulate an installation of packages."
              version="0.5.2">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="package_ids" transfer-ownership="none">
            <array c:type="gchar**">
              <type name="utf8"/>
            </array>
          </parameter>
          <parameter name="cancellable" transfer-ownership="none">
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="progress_callback"
                     transfer-ownership="none"
                     scope="call"
                     closure="4">
            <type name="PkProgressCallback" c:type="PkProgressCallback"/>
          </parameter>
          <parameter name="progress_user_data" transfer-ownership="none">
            <type name="any" c:type="gpointer"/>
          </parameter>
          <parameter name="callback_ready"
                     transfer-ownership="none"
                     scope="async"
                     closure="6">
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data" transfer-ownership="none">
            <type name="any" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="simulate_remove_packages_async"
              c:identifier="pk_client_simulate_remove_packages_async"
              doc="Simulate a removal of packages."
              version="0.5.2">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="package_ids" transfer-ownership="none">
            <array c:type="gchar**">
              <type name="utf8"/>
            </array>
          </parameter>
          <parameter name="cancellable" transfer-ownership="none">
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="progress_callback"
                     transfer-ownership="none"
                     scope="call"
                     closure="4">
            <type name="PkProgressCallback" c:type="PkProgressCallback"/>
          </parameter>
          <parameter name="progress_user_data" transfer-ownership="none">
            <type name="any" c:type="gpointer"/>
          </parameter>
          <parameter name="callback_ready"
                     transfer-ownership="none"
                     scope="async"
                     closure="6">
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data" transfer-ownership="none">
            <type name="any" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="simulate_update_packages_async"
              c:identifier="pk_client_simulate_update_packages_async"
              doc="Simulate an update of packages."
              version="0.5.2">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="package_ids" transfer-ownership="none">
            <array c:type="gchar**">
              <type name="utf8"/>
            </array>
          </parameter>
          <parameter name="cancellable" transfer-ownership="none">
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="progress_callback"
                     transfer-ownership="none"
                     scope="call"
                     closure="4">
            <type name="PkProgressCallback" c:type="PkProgressCallback"/>
          </parameter>
          <parameter name="progress_user_data" transfer-ownership="none">
            <type name="any" c:type="gpointer"/>
          </parameter>
          <parameter name="callback_ready"
                     transfer-ownership="none"
                     scope="async"
                     closure="6">
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data" transfer-ownership="none">
            <type name="any" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="adopt_async"
              c:identifier="pk_client_adopt_async"
              doc="Adopt a transaction which allows the caller to monitor the state or cancel it."
              version="0.5.2">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="transaction_id" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="cancellable" transfer-ownership="none">
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="progress_callback"
                     transfer-ownership="none"
                     scope="call"
                     closure="4">
            <type name="PkProgressCallback" c:type="PkProgressCallback"/>
          </parameter>
          <parameter name="progress_user_data" transfer-ownership="none">
            <type name="any" c:type="gpointer"/>
          </parameter>
          <parameter name="callback_ready"
                     transfer-ownership="none"
                     scope="async"
                     closure="6">
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data" transfer-ownership="none">
            <type name="any" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_progress_finish"
              c:identifier="pk_client_get_progress_finish"
              doc="Gets the result from the asynchronous function."
              version="0.5.2"
              throws="1">
        <return-value transfer-ownership="full">
          <type name="PkProgress" c:type="PkProgress*"/>
        </return-value>
        <parameters>
          <parameter name="res" transfer-ownership="none">
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_progress_async"
              c:identifier="pk_client_get_progress_async"
              doc="Find the current state of a transaction."
              version="0.5.2">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="transaction_id" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="cancellable" transfer-ownership="none">
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback_ready"
                     transfer-ownership="none"
                     scope="async"
                     closure="4">
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data" transfer-ownership="none">
            <type name="any" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="resolve"
              c:identifier="pk_client_resolve"
              doc="Resolve a package name into a %package_id. This can return installed and
available packages and allows you find out if a package is installed locally
or is available in a repository.
applications."
              version="0.5.3"
              throws="1">
        <return-value transfer-ownership="full">
          <type name="PkResults" c:type="PkResults*"/>
        </return-value>
        <parameters>
          <parameter name="filters" transfer-ownership="none">
            <type name="PkBitfield" c:type="PkBitfield"/>
          </parameter>
          <parameter name="packages" transfer-ownership="none">
            <array c:type="gchar**">
              <type name="utf8"/>
            </array>
          </parameter>
          <parameter name="cancellable" transfer-ownership="none">
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="progress_callback"
                     transfer-ownership="none"
                     scope="call"
                     closure="5">
            <type name="PkProgressCallback" c:type="PkProgressCallback"/>
          </parameter>
          <parameter name="progress_user_data" transfer-ownership="none">
            <type name="any" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="search_names"
              c:identifier="pk_client_search_names"
              doc="Search all the locally installed files and remote repositories for a package
that matches a specific name.
applications."
              version="0.5.5"
              throws="1">
        <return-value transfer-ownership="full">
          <type name="PkResults" c:type="PkResults*"/>
        </return-value>
        <parameters>
          <parameter name="filters" transfer-ownership="none">
            <type name="PkBitfield" c:type="PkBitfield"/>
          </parameter>
          <parameter name="values" transfer-ownership="none">
            <array c:type="gchar**">
              <type name="utf8"/>
            </array>
          </parameter>
          <parameter name="cancellable" transfer-ownership="none">
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="progress_callback"
                     transfer-ownership="none"
                     scope="call"
                     closure="5">
            <type name="PkProgressCallback" c:type="PkProgressCallback"/>
          </parameter>
          <parameter name="progress_user_data" transfer-ownership="none">
            <type name="any" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="search_details"
              c:identifier="pk_client_search_details"
              doc="Search all detailed summary information to try and find a keyword.
Think of this as pk_client_search_names(), but trying much harder and
taking longer.
applications."
              version="0.5.5"
              throws="1">
        <return-value transfer-ownership="full">
          <type name="PkResults" c:type="PkResults*"/>
        </return-value>
        <parameters>
          <parameter name="filters" transfer-ownership="none">
            <type name="PkBitfield" c:type="PkBitfield"/>
          </parameter>
          <parameter name="values" transfer-ownership="none">
            <array c:type="gchar**">
              <type name="utf8"/>
            </array>
          </parameter>
          <parameter name="cancellable" transfer-ownership="none">
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="progress_callback"
                     transfer-ownership="none"
                     scope="call"
                     closure="5">
            <type name="PkProgressCallback" c:type="PkProgressCallback"/>
          </parameter>
          <parameter name="progress_user_data" transfer-ownership="none">
            <type name="any" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="search_groups"
              c:identifier="pk_client_search_groups"
              doc="Return all packages in a specific group.
applications."
              version="0.5.5"
              throws="1">
        <return-value transfer-ownership="full">
          <type name="PkResults" c:type="PkResults*"/>
        </return-value>
        <parameters>
          <parameter name="filters" transfer-ownership="none">
            <type name="PkBitfield" c:type="PkBitfield"/>
          </parameter>
          <parameter name="values" transfer-ownership="none">
            <array c:type="gchar**">
              <type name="utf8"/>
            </array>
          </parameter>
          <parameter name="cancellable" transfer-ownership="none">
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="progress_callback"
                     transfer-ownership="none"
                     scope="call"
                     closure="5">
            <type name="PkProgressCallback" c:type="PkProgressCallback"/>
          </parameter>
          <parameter name="progress_user_data" transfer-ownership="none">
            <type name="any" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="search_files"
              c:identifier="pk_client_search_files"
              doc="Search for packages that provide a specific file.
applications."
              version="0.5.5"
              throws="1">
        <return-value transfer-ownership="full">
          <type name="PkResults" c:type="PkResults*"/>
        </return-value>
        <parameters>
          <parameter name="filters" transfer-ownership="none">
            <type name="PkBitfield" c:type="PkBitfield"/>
          </parameter>
          <parameter name="values" transfer-ownership="none">
            <array c:type="gchar**">
              <type name="utf8"/>
            </array>
          </parameter>
          <parameter name="cancellable" transfer-ownership="none">
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="progress_callback"
                     transfer-ownership="none"
                     scope="call"
                     closure="5">
            <type name="PkProgressCallback" c:type="PkProgressCallback"/>
          </parameter>
          <parameter name="progress_user_data" transfer-ownership="none">
            <type name="any" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_details"
              c:identifier="pk_client_get_details"
              doc="Get details of a package, so more information can be obtained for GUI
or command line tools.
applications."
              version="0.5.3"
              throws="1">
        <return-value transfer-ownership="full">
          <type name="PkResults" c:type="PkResults*"/>
        </return-value>
        <parameters>
          <parameter name="package_ids" transfer-ownership="none">
            <array c:type="gchar**">
              <type name="utf8"/>
            </array>
          </parameter>
          <parameter name="cancellable" transfer-ownership="none">
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="progress_callback"
                     transfer-ownership="none"
                     scope="call"
                     closure="4">
            <type name="PkProgressCallback" c:type="PkProgressCallback"/>
          </parameter>
          <parameter name="progress_user_data" transfer-ownership="none">
            <type name="any" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_update_detail"
              c:identifier="pk_client_get_update_detail"
              doc="Get details about the specific update, for instance any CVE urls and
severity information.
applications."
              version="0.5.3"
              throws="1">
        <return-value transfer-ownership="full">
          <type name="PkResults" c:type="PkResults*"/>
        </return-value>
        <parameters>
          <parameter name="package_ids" transfer-ownership="none">
            <array c:type="gchar**">
              <type name="utf8"/>
            </array>
          </parameter>
          <parameter name="cancellable" transfer-ownership="none">
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="progress_callback"
                     transfer-ownership="none"
                     scope="call"
                     closure="4">
            <type name="PkProgressCallback" c:type="PkProgressCallback"/>
          </parameter>
          <parameter name="progress_user_data" transfer-ownership="none">
            <type name="any" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="download_packages"
              c:identifier="pk_client_download_packages"
              doc="Downloads package files to a specified location.
applications."
              version="0.5.3"
              throws="1">
        <return-value transfer-ownership="full">
          <type name="PkResults" c:type="PkResults*"/>
        </return-value>
        <parameters>
          <parameter name="package_ids" transfer-ownership="none">
            <array c:type="gchar**">
              <type name="utf8"/>
            </array>
          </parameter>
          <parameter name="directory" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="cancellable" transfer-ownership="none">
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="progress_callback"
                     transfer-ownership="none"
                     scope="call"
                     closure="5">
            <type name="PkProgressCallback" c:type="PkProgressCallback"/>
          </parameter>
          <parameter name="progress_user_data" transfer-ownership="none">
            <type name="any" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_updates"
              c:identifier="pk_client_get_updates"
              doc="Get a list of all the packages that can be updated for all repositories.
applications."
              version="0.5.3"
              throws="1">
        <return-value transfer-ownership="full">
          <type name="PkResults" c:type="PkResults*"/>
        </return-value>
        <parameters>
          <parameter name="filters" transfer-ownership="none">
            <type name="PkBitfield" c:type="PkBitfield"/>
          </parameter>
          <parameter name="cancellable" transfer-ownership="none">
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="progress_callback"
                     transfer-ownership="none"
                     scope="call"
                     closure="4">
            <type name="PkProgressCallback" c:type="PkProgressCallback"/>
          </parameter>
          <parameter name="progress_user_data" transfer-ownership="none">
            <type name="any" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_old_transactions"
              c:identifier="pk_client_get_old_transactions"
              doc="Get the old transaction list, mainly used for the rollback viewer.
applications."
              version="0.5.3"
              throws="1">
        <return-value transfer-ownership="full">
          <type name="PkResults" c:type="PkResults*"/>
        </return-value>
        <parameters>
          <parameter name="number" transfer-ownership="none">
            <type name="uint" c:type="guint"/>
          </parameter>
          <parameter name="cancellable" transfer-ownership="none">
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="progress_callback"
                     transfer-ownership="none"
                     scope="call"
                     closure="4">
            <type name="PkProgressCallback" c:type="PkProgressCallback"/>
          </parameter>
          <parameter name="progress_user_data" transfer-ownership="none">
            <type name="any" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="update_system"
              c:identifier="pk_client_update_system"
              doc="Update all the packages on the system with the highest versions found in all
repositories.
- pk_client_repo_disable()
- pk_client_update_system()
- pk_client_repo_enable()
applications."
              version="0.5.3"
              throws="1">
        <return-value transfer-ownership="full">
          <type name="PkResults" c:type="PkResults*"/>
        </return-value>
        <parameters>
          <parameter name="only_trusted" transfer-ownership="none">
            <type name="boolean" c:type="gboolean"/>
          </parameter>
          <parameter name="cancellable" transfer-ownership="none">
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="progress_callback"
                     transfer-ownership="none"
                     scope="call"
                     closure="4">
            <type name="PkProgressCallback" c:type="PkProgressCallback"/>
          </parameter>
          <parameter name="progress_user_data" transfer-ownership="none">
            <type name="any" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_depends"
              c:identifier="pk_client_get_depends"
              doc="Get the packages that depend this one, i.e. child-&gt;parent.
applications."
              version="0.5.3"
              throws="1">
        <return-value transfer-ownership="full">
          <type name="PkResults" c:type="PkResults*"/>
        </return-value>
        <parameters>
          <parameter name="filters" transfer-ownership="none">
            <type name="PkBitfield" c:type="PkBitfield"/>
          </parameter>
          <parameter name="package_ids" transfer-ownership="none">
            <array c:type="gchar**">
              <type name="utf8"/>
            </array>
          </parameter>
          <parameter name="recursive" transfer-ownership="none">
            <type name="boolean" c:type="gboolean"/>
          </parameter>
          <parameter name="cancellable" transfer-ownership="none">
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="progress_callback"
                     transfer-ownership="none"
                     scope="call"
                     closure="6">
            <type name="PkProgressCallback" c:type="PkProgressCallback"/>
          </parameter>
          <parameter name="progress_user_data" transfer-ownership="none">
            <type name="any" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_packages"
              c:identifier="pk_client_get_packages"
              doc="Get the list of packages from the backend
applications."
              version="0.5.3"
              throws="1">
        <return-value transfer-ownership="full">
          <type name="PkResults" c:type="PkResults*"/>
        </return-value>
        <parameters>
          <parameter name="filters" transfer-ownership="none">
            <type name="PkBitfield" c:type="PkBitfield"/>
          </parameter>
          <parameter name="cancellable" transfer-ownership="none">
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="progress_callback"
                     transfer-ownership="none"
                     scope="call"
                     closure="4">
            <type name="PkProgressCallback" c:type="PkProgressCallback"/>
          </parameter>
          <parameter name="progress_user_data" transfer-ownership="none">
            <type name="any" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_requires"
              c:identifier="pk_client_get_requires"
              doc="Get the packages that require this one, i.e. parent-&gt;child.
applications."
              version="0.5.3"
              throws="1">
        <return-value transfer-ownership="full">
          <type name="PkResults" c:type="PkResults*"/>
        </return-value>
        <parameters>
          <parameter name="filters" transfer-ownership="none">
            <type name="PkBitfield" c:type="PkBitfield"/>
          </parameter>
          <parameter name="package_ids" transfer-ownership="none">
            <array c:type="gchar**">
              <type name="utf8"/>
            </array>
          </parameter>
          <parameter name="recursive" transfer-ownership="none">
            <type name="boolean" c:type="gboolean"/>
          </parameter>
          <parameter name="cancellable" transfer-ownership="none">
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="progress_callback"
                     transfer-ownership="none"
                     scope="call"
                     closure="6">
            <type name="PkProgressCallback" c:type="PkProgressCallback"/>
          </parameter>
          <parameter name="progress_user_data" transfer-ownership="none">
            <type name="any" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="what_provides"
              c:identifier="pk_client_what_provides"
              doc="This should return packages that provide the supplied attributes.
This method is useful for finding out what package(s) provide a modalias
or GStreamer codec string.
applications."
              version="0.5.3"
              throws="1">
        <return-value transfer-ownership="full">
          <type name="PkResults" c:type="PkResults*"/>
        </return-value>
        <parameters>
          <parameter name="filters" transfer-ownership="none">
            <type name="PkBitfield" c:type="PkBitfield"/>
          </parameter>
          <parameter name="provides" transfer-ownership="none">
            <type name="PkProvidesEnum" c:type="PkProvidesEnum"/>
          </parameter>
          <parameter name="values" transfer-ownership="none">
            <array c:type="gchar**">
              <type name="utf8"/>
            </array>
          </parameter>
          <parameter name="cancellable" transfer-ownership="none">
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="progress_callback"
                     transfer-ownership="none"
                     scope="call"
                     closure="6">
            <type name="PkProgressCallback" c:type="PkProgressCallback"/>
          </parameter>
          <parameter name="progress_user_data" transfer-ownership="none">
            <type name="any" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_distro_upgrades"
              c:identifier="pk_client_get_distro_upgrades"
              doc="This method should return a list of distribution upgrades that are available.
It should not return updates, only major upgrades.
applications."
              version="0.5.3"
              throws="1">
        <return-value transfer-ownership="full">
          <type name="PkResults" c:type="PkResults*"/>
        </return-value>
        <parameters>
          <parameter name="cancellable" transfer-ownership="none">
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="progress_callback"
                     transfer-ownership="none"
                     scope="call"
                     closure="3">
            <type name="PkProgressCallback" c:type="PkProgressCallback"/>
          </parameter>
          <parameter name="progress_user_data" transfer-ownership="none">
            <type name="any" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_files"
              c:identifier="pk_client_get_files"
              doc="Get the file list (i.e. a list of files installed) for the specified package.
applications."
              version="0.5.3"
              throws="1">
        <return-value transfer-ownership="full">
          <type name="PkResults" c:type="PkResults*"/>
        </return-value>
        <parameters>
          <parameter name="package_ids" transfer-ownership="none">
            <array c:type="gchar**">
              <type name="utf8"/>
            </array>
          </parameter>
          <parameter name="cancellable" transfer-ownership="none">
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="progress_callback"
                     transfer-ownership="none"
                     scope="call"
                     closure="4">
            <type name="PkProgressCallback" c:type="PkProgressCallback"/>
          </parameter>
          <parameter name="progress_user_data" transfer-ownership="none">
            <type name="any" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_categories"
              c:identifier="pk_client_get_categories"
              doc="Get a list of all categories supported.
applications."
              version="0.5.3"
              throws="1">
        <return-value transfer-ownership="full">
          <type name="PkResults" c:type="PkResults*"/>
        </return-value>
        <parameters>
          <parameter name="cancellable" transfer-ownership="none">
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="progress_callback"
                     transfer-ownership="none"
                     scope="call"
                     closure="3">
            <type name="PkProgressCallback" c:type="PkProgressCallback"/>
          </parameter>
          <parameter name="progress_user_data" transfer-ownership="none">
            <type name="any" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="remove_packages"
              c:identifier="pk_client_remove_packages"
              doc="Remove a package (optionally with dependancies) from the system.
If %allow_deps is set to %FALSE, and other packages would have to be removed,
then the transaction would fail.
applications."
              version="0.5.3"
              throws="1">
        <return-value transfer-ownership="full">
          <type name="PkResults" c:type="PkResults*"/>
        </return-value>
        <parameters>
          <parameter name="package_ids" transfer-ownership="none">
            <array c:type="gchar**">
              <type name="utf8"/>
            </array>
          </parameter>
          <parameter name="allow_deps" transfer-ownership="none">
            <type name="boolean" c:type="gboolean"/>
          </parameter>
          <parameter name="autoremove" transfer-ownership="none">
            <type name="boolean" c:type="gboolean"/>
          </parameter>
          <parameter name="cancellable" transfer-ownership="none">
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="progress_callback"
                     transfer-ownership="none"
                     scope="call"
                     closure="6">
            <type name="PkProgressCallback" c:type="PkProgressCallback"/>
          </parameter>
          <parameter name="progress_user_data" transfer-ownership="none">
            <type name="any" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="refresh_cache"
              c:identifier="pk_client_refresh_cache"
              doc="Refresh the cache, i.e. download new metadata from a remote URL so that
package lists are up to date.
This action may take a few minutes and should be done when the session and
system are idle.
applications."
              version="0.5.3"
              throws="1">
        <return-value transfer-ownership="full">
          <type name="PkResults" c:type="PkResults*"/>
        </return-value>
        <parameters>
          <parameter name="force" transfer-ownership="none">
            <type name="boolean" c:type="gboolean"/>
          </parameter>
          <parameter name="cancellable" transfer-ownership="none">
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="progress_callback"
                     transfer-ownership="none"
                     scope="call"
                     closure="4">
            <type name="PkProgressCallback" c:type="PkProgressCallback"/>
          </parameter>
          <parameter name="progress_user_data" transfer-ownership="none">
            <type name="any" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="install_packages"
              c:identifier="pk_client_install_packages"
              doc="Install a package of the newest and most correct version.
applications."
              version="0.5.3"
              throws="1">
        <return-value transfer-ownership="full">
          <type name="PkResults" c:type="PkResults*"/>
        </return-value>
        <parameters>
          <parameter name="only_trusted" transfer-ownership="none">
            <type name="boolean" c:type="gboolean"/>
          </parameter>
          <parameter name="package_ids" transfer-ownership="none">
            <array c:type="gchar**">
              <type name="utf8"/>
            </array>
          </parameter>
          <parameter name="cancellable" transfer-ownership="none">
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="progress_callback"
                     transfer-ownership="none"
                     scope="call"
                     closure="5">
            <type name="PkProgressCallback" c:type="PkProgressCallback"/>
          </parameter>
          <parameter name="progress_user_data" transfer-ownership="none">
            <type name="any" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="install_signature"
              c:identifier="pk_client_install_signature"
              doc="Install a software source signature of the newest and most correct version.
applications."
              version="0.5.3"
              throws="1">
        <return-value transfer-ownership="full">
          <type name="PkResults" c:type="PkResults*"/>
        </return-value>
        <parameters>
          <parameter name="type" transfer-ownership="none">
            <type name="PkSigTypeEnum" c:type="PkSigTypeEnum"/>
          </parameter>
          <parameter name="key_id" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="package_id" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="cancellable" transfer-ownership="none">
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="progress_callback"
                     transfer-ownership="none"
                     scope="call"
                     closure="6">
            <type name="PkProgressCallback" c:type="PkProgressCallback"/>
          </parameter>
          <parameter name="progress_user_data" transfer-ownership="none">
            <type name="any" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="update_packages"
              c:identifier="pk_client_update_packages"
              doc="Update specific packages to the newest available versions.
applications."
              version="0.5.3"
              throws="1">
        <return-value transfer-ownership="full">
          <type name="PkResults" c:type="PkResults*"/>
        </return-value>
        <parameters>
          <parameter name="only_trusted" transfer-ownership="none">
            <type name="boolean" c:type="gboolean"/>
          </parameter>
          <parameter name="package_ids" transfer-ownership="none">
            <array c:type="gchar**">
              <type name="utf8"/>
            </array>
          </parameter>
          <parameter name="cancellable" transfer-ownership="none">
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="progress_callback"
                     transfer-ownership="none"
                     scope="call"
                     closure="5">
            <type name="PkProgressCallback" c:type="PkProgressCallback"/>
          </parameter>
          <parameter name="progress_user_data" transfer-ownership="none">
            <type name="any" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="install_files"
              c:identifier="pk_client_install_files"
              doc="Install a file locally, and get the deps from the repositories.
This is useful for double clicking on a .rpm or .deb file.
applications."
              version="0.5.3"
              throws="1">
        <return-value transfer-ownership="full">
          <type name="PkResults" c:type="PkResults*"/>
        </return-value>
        <parameters>
          <parameter name="only_trusted" transfer-ownership="none">
            <type name="boolean" c:type="gboolean"/>
          </parameter>
          <parameter name="files" transfer-ownership="none">
            <array c:type="gchar**">
              <type name="utf8"/>
            </array>
          </parameter>
          <parameter name="cancellable" transfer-ownership="none">
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="progress_callback"
                     transfer-ownership="none"
                     scope="call"
                     closure="5">
            <type name="PkProgressCallback" c:type="PkProgressCallback"/>
          </parameter>
          <parameter name="progress_user_data" transfer-ownership="none">
            <type name="any" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="accept_eula"
              c:identifier="pk_client_accept_eula"
              doc="We may want to agree to a EULA dialog if one is presented.
applications."
              version="0.5.3"
              throws="1">
        <return-value transfer-ownership="full">
          <type name="PkResults" c:type="PkResults*"/>
        </return-value>
        <parameters>
          <parameter name="eula_id" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="cancellable" transfer-ownership="none">
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="progress_callback"
                     transfer-ownership="none"
                     scope="call"
                     closure="4">
            <type name="PkProgressCallback" c:type="PkProgressCallback"/>
          </parameter>
          <parameter name="progress_user_data" transfer-ownership="none">
            <type name="any" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="rollback"
              c:identifier="pk_client_rollback"
              doc="We may want to agree to a EULA dialog if one is presented.
applications."
              version="0.5.3"
              throws="1">
        <return-value transfer-ownership="full">
          <type name="PkResults" c:type="PkResults*"/>
        </return-value>
        <parameters>
          <parameter name="transaction_id" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="cancellable" transfer-ownership="none">
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="progress_callback"
                     transfer-ownership="none"
                     scope="call"
                     closure="4">
            <type name="PkProgressCallback" c:type="PkProgressCallback"/>
          </parameter>
          <parameter name="progress_user_data" transfer-ownership="none">
            <type name="any" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_repo_list"
              c:identifier="pk_client_get_repo_list"
              doc="Get the list of repositories installed on the system.
applications."
              version="0.5.3"
              throws="1">
        <return-value transfer-ownership="full">
          <type name="PkResults" c:type="PkResults*"/>
        </return-value>
        <parameters>
          <parameter name="filters" transfer-ownership="none">
            <type name="PkBitfield" c:type="PkBitfield"/>
          </parameter>
          <parameter name="cancellable" transfer-ownership="none">
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="progress_callback"
                     transfer-ownership="none"
                     scope="call"
                     closure="4">
            <type name="PkProgressCallback" c:type="PkProgressCallback"/>
          </parameter>
          <parameter name="progress_user_data" transfer-ownership="none">
            <type name="any" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="repo_enable"
              c:identifier="pk_client_repo_enable"
              doc="Enable or disable the repository.
applications."
              version="0.5.3"
              throws="1">
        <return-value transfer-ownership="full">
          <type name="PkResults" c:type="PkResults*"/>
        </return-value>
        <parameters>
          <parameter name="repo_id" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="enabled" transfer-ownership="none">
            <type name="boolean" c:type="gboolean"/>
          </parameter>
          <parameter name="cancellable" transfer-ownership="none">
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="progress_callback"
                     transfer-ownership="none"
                     scope="call"
                     closure="5">
            <type name="PkProgressCallback" c:type="PkProgressCallback"/>
          </parameter>
          <parameter name="progress_user_data" transfer-ownership="none">
            <type name="any" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="repo_set_data"
              c:identifier="pk_client_repo_set_data"
              doc="We may want to set a repository parameter.
applications."
              version="0.5.3"
              throws="1">
        <return-value transfer-ownership="full">
          <type name="PkResults" c:type="PkResults*"/>
        </return-value>
        <parameters>
          <parameter name="repo_id" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="parameter" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="value" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="cancellable" transfer-ownership="none">
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="progress_callback"
                     transfer-ownership="none"
                     scope="call"
                     closure="6">
            <type name="PkProgressCallback" c:type="PkProgressCallback"/>
          </parameter>
          <parameter name="progress_user_data" transfer-ownership="none">
            <type name="any" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="simulate_install_files"
              c:identifier="pk_client_simulate_install_files"
              doc="Simulate an installation of files.
applications."
              version="0.5.3"
              throws="1">
        <return-value transfer-ownership="full">
          <type name="PkResults" c:type="PkResults*"/>
        </return-value>
        <parameters>
          <parameter name="files" transfer-ownership="none">
            <array c:type="gchar**">
              <type name="utf8"/>
            </array>
          </parameter>
          <parameter name="cancellable" transfer-ownership="none">
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="progress_callback"
                     transfer-ownership="none"
                     scope="call"
                     closure="4">
            <type name="PkProgressCallback" c:type="PkProgressCallback"/>
          </parameter>
          <parameter name="progress_user_data" transfer-ownership="none">
            <type name="any" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="simulate_install_packages"
              c:identifier="pk_client_simulate_install_packages"
              doc="Simulate an installation of packages.
applications."
              version="0.5.3"
              throws="1">
        <return-value transfer-ownership="full">
          <type name="PkResults" c:type="PkResults*"/>
        </return-value>
        <parameters>
          <parameter name="package_ids" transfer-ownership="none">
            <array c:type="gchar**">
              <type name="utf8"/>
            </array>
          </parameter>
          <parameter name="cancellable" transfer-ownership="none">
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="progress_callback"
                     transfer-ownership="none"
                     scope="call"
                     closure="4">
            <type name="PkProgressCallback" c:type="PkProgressCallback"/>
          </parameter>
          <parameter name="progress_user_data" transfer-ownership="none">
            <type name="any" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="simulate_remove_packages"
              c:identifier="pk_client_simulate_remove_packages"
              doc="Simulate a removal of packages.
applications."
              version="0.5.3"
              throws="1">
        <return-value transfer-ownership="full">
          <type name="PkResults" c:type="PkResults*"/>
        </return-value>
        <parameters>
          <parameter name="package_ids" transfer-ownership="none">
            <array c:type="gchar**">
              <type name="utf8"/>
            </array>
          </parameter>
          <parameter name="cancellable" transfer-ownership="none">
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="progress_callback"
                     transfer-ownership="none"
                     scope="call"
                     closure="4">
            <type name="PkProgressCallback" c:type="PkProgressCallback"/>
          </parameter>
          <parameter name="progress_user_data" transfer-ownership="none">
            <type name="any" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="simulate_update_packages"
              c:identifier="pk_client_simulate_update_packages"
              doc="Simulate an update of packages.
applications."
              version="0.5.3"
              throws="1">
        <return-value transfer-ownership="full">
          <type name="PkResults" c:type="PkResults*"/>
        </return-value>
        <parameters>
          <parameter name="package_ids" transfer-ownership="none">
            <array c:type="gchar**">
              <type name="utf8"/>
            </array>
          </parameter>
          <parameter name="cancellable" transfer-ownership="none">
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="progress_callback"
                     transfer-ownership="none"
                     scope="call"
                     closure="4">
            <type name="PkProgressCallback" c:type="PkProgressCallback"/>
          </parameter>
          <parameter name="progress_user_data" transfer-ownership="none">
            <type name="any" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="adopt"
              c:identifier="pk_client_adopt"
              doc="Adopt a transaction.
applications."
              version="0.5.3"
              throws="1">
        <return-value transfer-ownership="full">
          <type name="PkResults" c:type="PkResults*"/>
        </return-value>
        <parameters>
          <parameter name="transaction_id" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="cancellable" transfer-ownership="none">
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="progress_callback"
                     transfer-ownership="none"
                     scope="call"
                     closure="4">
            <type name="PkProgressCallback" c:type="PkProgressCallback"/>
          </parameter>
          <parameter name="progress_user_data" transfer-ownership="none">
            <type name="any" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_progress"
              c:identifier="pk_client_get_progress"
              doc="Get the progress of a transaction.
applications."
              version="0.5.3"
              throws="1">
        <return-value transfer-ownership="full">
          <type name="PkProgress" c:type="PkProgress*"/>
        </return-value>
        <parameters>
          <parameter name="transaction_id" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="cancellable" transfer-ownership="none">
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <property name="background" writable="1">
        <type name="boolean" c:type="gboolean"/>
      </property>
      <property name="idle">
        <type name="boolean" c:type="gboolean"/>
      </property>
      <property name="interactive" writable="1">
        <type name="boolean" c:type="gboolean"/>
      </property>
      <property name="locale" writable="1">
        <type name="utf8" c:type="gchararray"/>
      </property>
      <field name="parent">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="priv">
        <type name="PkClientPrivate" c:type="PkClientPrivate*"/>
      </field>
    </class>
    <record name="PkClientClass"
            c:type="PkClientClass"
            glib:is-gtype-struct-for="PkClient">
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="changed">
        <callback name="changed" c:type="changed">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="client" transfer-ownership="none">
              <type name="PkClient" c:type="PkClient*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="pk_reserved1">
        <callback name="pk_reserved1" c:type="_pk_reserved1">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="pk_reserved2">
        <callback name="pk_reserved2" c:type="_pk_reserved2">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="pk_reserved3">
        <callback name="pk_reserved3" c:type="_pk_reserved3">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="pk_reserved4">
        <callback name="pk_reserved4" c:type="_pk_reserved4">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="pk_reserved5">
        <callback name="pk_reserved5" c:type="_pk_reserved5">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
    </record>
    <enumeration name="PkClientError"
                 doc="Errors that can be thrown"
                 c:type="PkClientError">
      <member name="failed" value="0" c:identifier="PK_CLIENT_ERROR_FAILED"/>
      <member name="failed_auth"
              value="1"
              c:identifier="PK_CLIENT_ERROR_FAILED_AUTH"/>
      <member name="no_tid" value="2" c:identifier="PK_CLIENT_ERROR_NO_TID"/>
      <member name="already_tid"
              value="3"
              c:identifier="PK_CLIENT_ERROR_ALREADY_TID"/>
      <member name="role_unknown"
              value="4"
              c:identifier="PK_CLIENT_ERROR_ROLE_UNKNOWN"/>
      <member name="cannot_start_daemon"
              value="5"
              c:identifier="PK_CLIENT_ERROR_CANNOT_START_DAEMON"/>
      <member name="invalid_input"
              value="6"
              c:identifier="PK_CLIENT_ERROR_INVALID_INPUT"/>
      <member name="invalid_file"
              value="7"
              c:identifier="PK_CLIENT_ERROR_INVALID_FILE"/>
      <member name="not_supported"
              value="8"
              c:identifier="PK_CLIENT_ERROR_NOT_SUPPORTED"/>
    </enumeration>
    <record name="PkClientPrivate"
            c:type="PkClientPrivate"
            doc="Private #PkClient data">
    </record>
    <class name="PkControl"
           c:type="PkControl"
           parent="GObject.Object"
           glib:type-name="PkControl"
           glib:get-type="pk_control_get_type"
           glib:type-struct="PkControlClass">
      <constructor name="new" c:identifier="pk_control_new" version="0.5.2">
        <return-value transfer-ownership="full">
          <type name="PkControl" c:type="PkControl*"/>
        </return-value>
      </constructor>
      <function name="test" c:identifier="pk_control_test">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="user_data" transfer-ownership="none">
            <type name="any" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <virtual-method name="network_state_changed">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </virtual-method>
      <virtual-method name="locked">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="is_locked" transfer-ownership="none">
            <type name="boolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="connection_changed">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="connected" transfer-ownership="none">
            <type name="boolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="get_tid_async"
              c:identifier="pk_control_get_tid_async"
              doc="Gets a transacton ID from the daemon."
              version="0.5.2">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="cancellable" transfer-ownership="none">
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     scope="async"
                     closure="3">
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data" transfer-ownership="none">
            <type name="any" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_tid_finish"
              c:identifier="pk_control_get_tid_finish"
              doc="Gets the result from the asynchronous function."
              version="0.5.2"
              throws="1">
        <return-value transfer-ownership="full">
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <parameter name="res" transfer-ownership="none">
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_daemon_state_async"
              c:identifier="pk_control_get_daemon_state_async"
              doc="Gets the debugging state from the daemon."
              version="0.5.2">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="cancellable" transfer-ownership="none">
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     scope="async"
                     closure="3">
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data" transfer-ownership="none">
            <type name="any" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_daemon_state_finish"
              c:identifier="pk_control_get_daemon_state_finish"
              doc="Gets the result from the asynchronous function."
              version="0.5.2"
              throws="1">
        <return-value transfer-ownership="full">
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <parameter name="res" transfer-ownership="none">
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_proxy_async"
              c:identifier="pk_control_set_proxy_async"
              doc="Set a proxy on the PK daemon"
              version="0.5.2">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="proxy_http" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="proxy_ftp" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="cancellable" transfer-ownership="none">
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     scope="async"
                     closure="5">
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data" transfer-ownership="none">
            <type name="any" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_proxy_finish"
              c:identifier="pk_control_set_proxy_finish"
              doc="Gets the result from the asynchronous function."
              version="0.5.2"
              throws="1">
        <return-value transfer-ownership="none">
          <type name="boolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="res" transfer-ownership="none">
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_network_state_async"
              c:identifier="pk_control_get_network_state_async">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="cancellable" transfer-ownership="none">
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     scope="async"
                     closure="3">
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data" transfer-ownership="none">
            <type name="any" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_network_state_finish"
              c:identifier="pk_control_get_network_state_finish"
              throws="1">
        <return-value transfer-ownership="full">
          <type name="PkNetworkEnum" c:type="PkNetworkEnum"/>
        </return-value>
        <parameters>
          <parameter name="res" transfer-ownership="none">
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_time_since_action_async"
              c:identifier="pk_control_get_time_since_action_async"
              doc="We may want to know how long it has been since we refreshed the cache or
retrieved the update list."
              version="0.5.2">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="role" transfer-ownership="none">
            <type name="PkRoleEnum" c:type="PkRoleEnum"/>
          </parameter>
          <parameter name="cancellable" transfer-ownership="none">
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     scope="async"
                     closure="4">
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data" transfer-ownership="none">
            <type name="any" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_time_since_action_finish"
              c:identifier="pk_control_get_time_since_action_finish"
              doc="Gets the result from the asynchronous function."
              version="0.5.2"
              throws="1">
        <return-value transfer-ownership="none">
          <type name="uint" c:type="guint"/>
        </return-value>
        <parameters>
          <parameter name="res" transfer-ownership="none">
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_transaction_list_async"
              c:identifier="pk_control_get_transaction_list_async"
              doc="Gets the transactions currently running in the daemon."
              version="0.5.2">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="cancellable" transfer-ownership="none">
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     scope="async"
                     closure="3">
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data" transfer-ownership="none">
            <type name="any" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_transaction_list_finish"
              c:identifier="pk_control_get_transaction_list_finish"
              doc="Gets the result from the asynchronous function."
              version="0.5.2"
              throws="1">
        <return-value transfer-ownership="full">
          <array c:type="gchar**">
            <type name="utf8"/>
          </array>
        </return-value>
        <parameters>
          <parameter name="res" transfer-ownership="none">
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="can_authorize_async"
              c:identifier="pk_control_can_authorize_async"
              doc="We may want to know before we run a method if we are going to be denied,
accepted or challenged for authentication."
              version="0.5.2">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="action_id" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="cancellable" transfer-ownership="none">
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     scope="async"
                     closure="4">
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data" transfer-ownership="none">
            <type name="any" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="can_authorize_finish"
              c:identifier="pk_control_can_authorize_finish"
              doc="Gets the result from the asynchronous function."
              version="0.5.2"
              throws="1">
        <return-value transfer-ownership="full">
          <type name="PkAuthorizeEnum" c:type="PkAuthorizeEnum"/>
        </return-value>
        <parameters>
          <parameter name="res" transfer-ownership="none">
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_properties_async"
              c:identifier="pk_control_get_properties_async"
              doc="Gets global properties from the daemon."
              version="0.5.2">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="cancellable" transfer-ownership="none">
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     scope="async"
                     closure="3">
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data" transfer-ownership="none">
            <type name="any" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_properties_finish"
              c:identifier="pk_control_get_properties_finish"
              doc="Gets the result from the asynchronous function."
              version="0.5.2"
              throws="1">
        <return-value transfer-ownership="none">
          <type name="boolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="res" transfer-ownership="none">
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_properties"
              c:identifier="pk_control_get_properties"
              doc="Gets the properties the daemon supports.
applications."
              version="0.5.3"
              throws="1">
        <return-value transfer-ownership="none">
          <type name="boolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="cancellable" transfer-ownership="none">
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_transaction_list"
              c:identifier="pk_control_get_transaction_list"
              doc="Gets the transaction list in progress.
applications."
              version="0.5.3"
              throws="1">
        <return-value transfer-ownership="full">
          <array c:type="gchar**">
            <type name="utf8"/>
          </array>
        </return-value>
        <parameters>
          <parameter name="cancellable" transfer-ownership="none">
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <property name="backend-author" writable="1">
        <type name="utf8" c:type="gchararray"/>
      </property>
      <property name="backend-description" writable="1">
        <type name="utf8" c:type="gchararray"/>
      </property>
      <property name="backend-name" writable="1">
        <type name="utf8" c:type="gchararray"/>
      </property>
      <property name="connected" writable="1">
        <type name="boolean" c:type="gboolean"/>
      </property>
      <property name="distro-id" writable="1">
        <type name="utf8" c:type="gchararray"/>
      </property>
      <property name="filters" writable="1">
        <type name="uint64" c:type="guint64"/>
      </property>
      <property name="groups" writable="1">
        <type name="uint64" c:type="guint64"/>
      </property>
      <property name="locked" writable="1">
        <type name="boolean" c:type="gboolean"/>
      </property>
      <property name="mime-types" writable="1">
        <type name="utf8" c:type="gchararray"/>
      </property>
      <property name="network-state" writable="1">
        <type name="uint" c:type="guint"/>
      </property>
      <property name="roles" writable="1">
        <type name="uint64" c:type="guint64"/>
      </property>
      <property name="version-major">
        <type name="uint" c:type="guint"/>
      </property>
      <property name="version-micro">
        <type name="uint" c:type="guint"/>
      </property>
      <property name="version-minor">
        <type name="uint" c:type="guint"/>
      </property>
      <field name="parent">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="priv">
        <type name="PkControlPrivate" c:type="PkControlPrivate*"/>
      </field>
      <glib:signal name="repo-list-changed">
        <return-value transfer-ownership="full">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
      <glib:signal name="restart-schedule">
        <return-value transfer-ownership="full">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
      <glib:signal name="transaction-list-changed">
        <return-value transfer-ownership="full">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="GObject.Strv" c:type="GStrv"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="updates-changed">
        <return-value transfer-ownership="full">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
    </class>
    <record name="PkControlClass"
            c:type="PkControlClass"
            glib:is-gtype-struct-for="PkControl">
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="transaction_list_changed">
        <callback name="transaction_list_changed"
                  c:type="transaction_list_changed">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="control" transfer-ownership="none">
              <type name="PkControl" c:type="PkControl*"/>
            </parameter>
            <parameter name="transaction_ids" transfer-ownership="none">
              <array c:type="gchar**">
                <type name="utf8"/>
              </array>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="updates_changed">
        <callback name="updates_changed" c:type="updates_changed">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="control" transfer-ownership="none">
              <type name="PkControl" c:type="PkControl*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="repo_list_changed">
        <callback name="repo_list_changed" c:type="repo_list_changed">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="control" transfer-ownership="none">
              <type name="PkControl" c:type="PkControl*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="network_state_changed">
        <callback name="network_state_changed" c:type="network_state_changed">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="control" transfer-ownership="none">
              <type name="PkControl" c:type="PkControl*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="restart_schedule">
        <callback name="restart_schedule" c:type="restart_schedule">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="control" transfer-ownership="none">
              <type name="PkControl" c:type="PkControl*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="locked">
        <callback name="locked" c:type="locked">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="control" transfer-ownership="none">
              <type name="PkControl" c:type="PkControl*"/>
            </parameter>
            <parameter name="is_locked" transfer-ownership="none">
              <type name="boolean" c:type="gboolean"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="connection_changed">
        <callback name="connection_changed" c:type="connection_changed">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="control" transfer-ownership="none">
              <type name="PkControl" c:type="PkControl*"/>
            </parameter>
            <parameter name="connected" transfer-ownership="none">
              <type name="boolean" c:type="gboolean"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="pk_reserved1">
        <callback name="pk_reserved1" c:type="_pk_reserved1">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="pk_reserved2">
        <callback name="pk_reserved2" c:type="_pk_reserved2">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="pk_reserved3">
        <callback name="pk_reserved3" c:type="_pk_reserved3">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="pk_reserved4">
        <callback name="pk_reserved4" c:type="_pk_reserved4">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="pk_reserved5">
        <callback name="pk_reserved5" c:type="_pk_reserved5">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
    </record>
    <enumeration name="PkControlError"
                 doc="Errors that can be thrown"
                 c:type="PkControlError">
      <member name="failed" value="0" c:identifier="PK_CONTROL_ERROR_FAILED"/>
      <member name="cannot_start_daemon"
              value="1"
              c:identifier="PK_CONTROL_ERROR_CANNOT_START_DAEMON"/>
    </enumeration>
    <record name="PkControlPrivate"
            c:type="PkControlPrivate"
            doc="Private #PkControl data">
    </record>
    <class name="PkDesktop"
           c:type="PkDesktop"
           parent="GObject.Object"
           glib:type-name="PkDesktop"
           glib:get-type="pk_desktop_get_type"
           glib:type-struct="PkDesktopClass">
      <constructor name="new" c:identifier="pk_desktop_new" version="0.5.3">
        <return-value transfer-ownership="full">
          <type name="PkDesktop" c:type="PkDesktop*"/>
        </return-value>
      </constructor>
      <function name="test" c:identifier="pk_desktop_test">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="user_data" transfer-ownership="none">
            <type name="any" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <method name="open_database"
              c:identifier="pk_desktop_open_database"
              version="0.5.3"
              throws="1">
        <return-value transfer-ownership="none">
          <type name="boolean" c:type="gboolean"/>
        </return-value>
      </method>
      <method name="get_files_for_package"
              c:identifier="pk_desktop_get_files_for_package"
              doc="Return all desktop files owned by a package, regardless if they are shown
in the main menu or not."
              version="0.5.3"
              throws="1">
        <return-value transfer-ownership="full">
          <type name="GLib.PtrArray" c:type="GPtrArray*"/>
        </return-value>
        <parameters>
          <parameter name="package" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_shown_for_package"
              c:identifier="pk_desktop_get_shown_for_package"
              doc="Return all desktop files owned by a package that would be shown in a menu,
i.e are an application"
              version="0.5.3"
              throws="1">
        <return-value transfer-ownership="full">
          <type name="GLib.PtrArray" c:type="GPtrArray*"/>
        </return-value>
        <parameters>
          <parameter name="package" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_package_for_file"
              c:identifier="pk_desktop_get_package_for_file"
              doc="Returns the package name that owns the desktop file. Fast."
              version="0.5.3"
              throws="1">
        <return-value transfer-ownership="full">
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <parameter name="filename" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <field name="parent">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="priv">
        <type name="PkDesktopPrivate" c:type="PkDesktopPrivate*"/>
      </field>
    </class>
    <record name="PkDesktopClass"
            c:type="PkDesktopClass"
            glib:is-gtype-struct-for="PkDesktop">
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <record name="PkDesktopPrivate"
            c:type="PkDesktopPrivate"
            doc="Private #PkDesktop data">
    </record>
    <class name="PkDetails"
           c:type="PkDetails"
           parent="PkSource"
           glib:type-name="PkDetails"
           glib:get-type="pk_details_get_type"
           glib:type-struct="PkDetailsClass">
      <constructor name="new" c:identifier="pk_details_new" version="0.5.4">
        <return-value transfer-ownership="full">
          <type name="PkDetails" c:type="PkDetails*"/>
        </return-value>
      </constructor>
      <property name="description" writable="1">
        <type name="utf8" c:type="gchararray"/>
      </property>
      <property name="group" writable="1">
        <type name="uint" c:type="guint"/>
      </property>
      <property name="license" writable="1">
        <type name="utf8" c:type="gchararray"/>
      </property>
      <property name="package-id" writable="1">
        <type name="utf8" c:type="gchararray"/>
      </property>
      <property name="size" writable="1">
        <type name="uint64" c:type="guint64"/>
      </property>
      <property name="url" writable="1">
        <type name="utf8" c:type="gchararray"/>
      </property>
      <field name="parent">
        <type name="PkSource" c:type="PkSource"/>
      </field>
      <field name="priv">
        <type name="PkDetailsPrivate" c:type="PkDetailsPrivate*"/>
      </field>
    </class>
    <record name="PkDetailsClass"
            c:type="PkDetailsClass"
            glib:is-gtype-struct-for="PkDetails">
      <field name="parent_class">
        <type name="PkSourceClass" c:type="PkSourceClass"/>
      </field>
      <field name="pk_reserved1">
        <callback name="pk_reserved1" c:type="_pk_reserved1">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="pk_reserved2">
        <callback name="pk_reserved2" c:type="_pk_reserved2">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="pk_reserved3">
        <callback name="pk_reserved3" c:type="_pk_reserved3">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="pk_reserved4">
        <callback name="pk_reserved4" c:type="_pk_reserved4">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="pk_reserved5">
        <callback name="pk_reserved5" c:type="_pk_reserved5">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
    </record>
    <record name="PkDetailsPrivate"
            c:type="PkDetailsPrivate"
            doc="Private #PkDetails data">
    </record>
    <class name="PkDistroUpgrade"
           c:type="PkDistroUpgrade"
           parent="PkSource"
           glib:type-name="PkDistroUpgrade"
           glib:get-type="pk_distro_upgrade_get_type"
           glib:type-struct="PkDistroUpgradeClass">
      <constructor name="new"
                   c:identifier="pk_distro_upgrade_new"
                   version="0.5.4">
        <return-value transfer-ownership="full">
          <type name="PkDistroUpgrade" c:type="PkDistroUpgrade*"/>
        </return-value>
      </constructor>
      <function name="enum_from_string"
                c:identifier="pk_distro_upgrade_enum_from_string"
                doc="Converts a text enumerated type to its unsigned integer representation"
                version="0.5.0">
        <return-value transfer-ownership="full">
          <type name="PkDistroUpgradeEnum" c:type="PkDistroUpgradeEnum"/>
        </return-value>
        <parameters>
          <parameter name="upgrade" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </function>
      <function name="enum_to_string"
                c:identifier="pk_distro_upgrade_enum_to_string"
                doc="Converts a enumerated type to its text representation"
                version="0.5.0">
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <parameter name="upgrade" transfer-ownership="none">
            <type name="PkDistroUpgradeEnum" c:type="PkDistroUpgradeEnum"/>
          </parameter>
        </parameters>
      </function>
      <property name="name" writable="1">
        <type name="utf8" c:type="gchararray"/>
      </property>
      <property name="state" writable="1">
        <type name="uint" c:type="guint"/>
      </property>
      <property name="summary" writable="1">
        <type name="utf8" c:type="gchararray"/>
      </property>
      <field name="parent">
        <type name="PkSource" c:type="PkSource"/>
      </field>
      <field name="priv">
        <type name="PkDistroUpgradePrivate" c:type="PkDistroUpgradePrivate*"/>
      </field>
    </class>
    <record name="PkDistroUpgradeClass"
            c:type="PkDistroUpgradeClass"
            glib:is-gtype-struct-for="PkDistroUpgrade">
      <field name="parent_class">
        <type name="PkSourceClass" c:type="PkSourceClass"/>
      </field>
      <field name="pk_reserved1">
        <callback name="pk_reserved1" c:type="_pk_reserved1">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="pk_reserved2">
        <callback name="pk_reserved2" c:type="_pk_reserved2">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="pk_reserved3">
        <callback name="pk_reserved3" c:type="_pk_reserved3">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="pk_reserved4">
        <callback name="pk_reserved4" c:type="_pk_reserved4">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="pk_reserved5">
        <callback name="pk_reserved5" c:type="_pk_reserved5">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
    </record>
    <enumeration name="PkDistroUpgradeEnum"
                 doc="The distro upgrade status"
                 c:type="PkDistroUpgradeEnum">
      <member name="unknown"
              value="0"
              c:identifier="PK_DISTRO_UPGRADE_ENUM_UNKNOWN"/>
      <member name="stable"
              value="1"
              c:identifier="PK_DISTRO_UPGRADE_ENUM_STABLE"/>
      <member name="unstable"
              value="2"
              c:identifier="PK_DISTRO_UPGRADE_ENUM_UNSTABLE"/>
      <member name="last"
              value="3"
              c:identifier="PK_DISTRO_UPGRADE_ENUM_LAST"/>
    </enumeration>
    <record name="PkDistroUpgradePrivate"
            c:type="PkDistroUpgradePrivate"
            doc="Private #PkDistroUpgrade data">
    </record>
    <record name="PkEnumMatch"
            c:type="PkEnumMatch"
            doc="Matching an enumerated type to a string">
      <field name="value" writable="1">
        <type name="uint" c:type="guint"/>
      </field>
      <field name="string" writable="1">
        <type name="utf8" c:type="gchar*"/>
      </field>
    </record>
    <class name="PkError"
           c:type="PkError"
           parent="PkSource"
           glib:type-name="PkError"
           glib:get-type="pk_error_get_type"
           glib:type-struct="PkErrorClass">
      <constructor name="new" c:identifier="pk_error_new" version="0.5.5">
        <return-value transfer-ownership="full">
          <type name="PkError" c:type="PkError*"/>
        </return-value>
      </constructor>
      <function name="enum_from_string"
                c:identifier="pk_error_enum_from_string"
                doc="Converts a text enumerated type to its unsigned integer representation"
                version="0.5.0">
        <return-value transfer-ownership="full">
          <type name="PkErrorEnum" c:type="PkErrorEnum"/>
        </return-value>
        <parameters>
          <parameter name="code" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </function>
      <function name="enum_to_string"
                c:identifier="pk_error_enum_to_string"
                doc="Converts a enumerated type to its text representation"
                version="0.5.0">
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <parameter name="code" transfer-ownership="none">
            <type name="PkErrorEnum" c:type="PkErrorEnum"/>
          </parameter>
        </parameters>
      </function>
      <method name="get_code" c:identifier="pk_error_get_code" version="0.5.5">
        <return-value transfer-ownership="full">
          <type name="PkErrorEnum" c:type="PkErrorEnum"/>
        </return-value>
      </method>
      <method name="get_details"
              c:identifier="pk_error_get_details"
              version="0.5.5">
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="gchar*"/>
        </return-value>
      </method>
      <property name="code" writable="1">
        <type name="uint" c:type="guint"/>
      </property>
      <property name="details" writable="1">
        <type name="utf8" c:type="gchararray"/>
      </property>
      <field name="parent">
        <type name="PkSource" c:type="PkSource"/>
      </field>
      <field name="priv">
        <type name="PkErrorPrivate" c:type="PkErrorPrivate*"/>
      </field>
    </class>
    <record name="PkErrorClass"
            c:type="PkErrorClass"
            glib:is-gtype-struct-for="PkError">
      <field name="parent_class">
        <type name="PkSourceClass" c:type="PkSourceClass"/>
      </field>
      <field name="pk_reserved1">
        <callback name="pk_reserved1" c:type="_pk_reserved1">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="pk_reserved2">
        <callback name="pk_reserved2" c:type="_pk_reserved2">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="pk_reserved3">
        <callback name="pk_reserved3" c:type="_pk_reserved3">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="pk_reserved4">
        <callback name="pk_reserved4" c:type="_pk_reserved4">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="pk_reserved5">
        <callback name="pk_reserved5" c:type="_pk_reserved5">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
    </record>
    <enumeration name="PkErrorEnum" doc="The error type" c:type="PkErrorEnum">
      <member name="unknown" value="0" c:identifier="PK_ERROR_ENUM_UNKNOWN"/>
      <member name="oom" value="1" c:identifier="PK_ERROR_ENUM_OOM"/>
      <member name="no_network"
              value="2"
              c:identifier="PK_ERROR_ENUM_NO_NETWORK"/>
      <member name="not_supported"
              value="3"
              c:identifier="PK_ERROR_ENUM_NOT_SUPPORTED"/>
      <member name="internal_error"
              value="4"
              c:identifier="PK_ERROR_ENUM_INTERNAL_ERROR"/>
      <member name="gpg_failure"
              value="5"
              c:identifier="PK_ERROR_ENUM_GPG_FAILURE"/>
      <member name="package_id_invalid"
              value="6"
              c:identifier="PK_ERROR_ENUM_PACKAGE_ID_INVALID"/>
      <member name="package_not_installed"
              value="7"
              c:identifier="PK_ERROR_ENUM_PACKAGE_NOT_INSTALLED"/>
      <member name="package_not_found"
              value="8"
              c:identifier="PK_ERROR_ENUM_PACKAGE_NOT_FOUND"/>
      <member name="package_already_installed"
              value="9"
              c:identifier="PK_ERROR_ENUM_PACKAGE_ALREADY_INSTALLED"/>
      <member name="package_download_failed"
              value="10"
              c:identifier="PK_ERROR_ENUM_PACKAGE_DOWNLOAD_FAILED"/>
      <member name="group_not_found"
              value="11"
              c:identifier="PK_ERROR_ENUM_GROUP_NOT_FOUND"/>
      <member name="group_list_invalid"
              value="12"
              c:identifier="PK_ERROR_ENUM_GROUP_LIST_INVALID"/>
      <member name="dep_resolution_failed"
              value="13"
              c:identifier="PK_ERROR_ENUM_DEP_RESOLUTION_FAILED"/>
      <member name="filter_invalid"
              value="14"
              c:identifier="PK_ERROR_ENUM_FILTER_INVALID"/>
      <member name="create_thread_failed"
              value="15"
              c:identifier="PK_ERROR_ENUM_CREATE_THREAD_FAILED"/>
      <member name="transaction_error"
              value="16"
              c:identifier="PK_ERROR_ENUM_TRANSACTION_ERROR"/>
      <member name="transaction_cancelled"
              value="17"
              c:identifier="PK_ERROR_ENUM_TRANSACTION_CANCELLED"/>
      <member name="no_cache"
              value="18"
              c:identifier="PK_ERROR_ENUM_NO_CACHE"/>
      <member name="repo_not_found"
              value="19"
              c:identifier="PK_ERROR_ENUM_REPO_NOT_FOUND"/>
      <member name="cannot_remove_system_package"
              value="20"
              c:identifier="PK_ERROR_ENUM_CANNOT_REMOVE_SYSTEM_PACKAGE"/>
      <member name="process_kill"
              value="21"
              c:identifier="PK_ERROR_ENUM_PROCESS_KILL"/>
      <member name="failed_initialization"
              value="22"
              c:identifier="PK_ERROR_ENUM_FAILED_INITIALIZATION"/>
      <member name="failed_finalise"
              value="23"
              c:identifier="PK_ERROR_ENUM_FAILED_FINALISE"/>
      <member name="failed_config_parsing"
              value="24"
              c:identifier="PK_ERROR_ENUM_FAILED_CONFIG_PARSING"/>
      <member name="cannot_cancel"
              value="25"
              c:identifier="PK_ERROR_ENUM_CANNOT_CANCEL"/>
      <member name="cannot_get_lock"
              value="26"
              c:identifier="PK_ERROR_ENUM_CANNOT_GET_LOCK"/>
      <member name="no_packages_to_update"
              value="27"
              c:identifier="PK_ERROR_ENUM_NO_PACKAGES_TO_UPDATE"/>
      <member name="cannot_write_repo_config"
              value="28"
              c:identifier="PK_ERROR_ENUM_CANNOT_WRITE_REPO_CONFIG"/>
      <member name="local_install_failed"
              value="29"
              c:identifier="PK_ERROR_ENUM_LOCAL_INSTALL_FAILED"/>
      <member name="bad_gpg_signature"
              value="30"
              c:identifier="PK_ERROR_ENUM_BAD_GPG_SIGNATURE"/>
      <member name="missing_gpg_signature"
              value="31"
              c:identifier="PK_ERROR_ENUM_MISSING_GPG_SIGNATURE"/>
      <member name="cannot_install_source_package"
              value="32"
              c:identifier="PK_ERROR_ENUM_CANNOT_INSTALL_SOURCE_PACKAGE"/>
      <member name="repo_configuration_error"
              value="33"
              c:identifier="PK_ERROR_ENUM_REPO_CONFIGURATION_ERROR"/>
      <member name="no_license_agreement"
              value="34"
              c:identifier="PK_ERROR_ENUM_NO_LICENSE_AGREEMENT"/>
      <member name="file_conflicts"
              value="35"
              c:identifier="PK_ERROR_ENUM_FILE_CONFLICTS"/>
      <member name="package_conflicts"
              value="36"
              c:identifier="PK_ERROR_ENUM_PACKAGE_CONFLICTS"/>
      <member name="repo_not_available"
              value="37"
              c:identifier="PK_ERROR_ENUM_REPO_NOT_AVAILABLE"/>
      <member name="invalid_package_file"
              value="38"
              c:identifier="PK_ERROR_ENUM_INVALID_PACKAGE_FILE"/>
      <member name="package_install_blocked"
              value="39"
              c:identifier="PK_ERROR_ENUM_PACKAGE_INSTALL_BLOCKED"/>
      <member name="package_corrupt"
              value="40"
              c:identifier="PK_ERROR_ENUM_PACKAGE_CORRUPT"/>
      <member name="all_packages_already_installed"
              value="41"
              c:identifier="PK_ERROR_ENUM_ALL_PACKAGES_ALREADY_INSTALLED"/>
      <member name="file_not_found"
              value="42"
              c:identifier="PK_ERROR_ENUM_FILE_NOT_FOUND"/>
      <member name="no_more_mirrors_to_try"
              value="43"
              c:identifier="PK_ERROR_ENUM_NO_MORE_MIRRORS_TO_TRY"/>
      <member name="no_distro_upgrade_data"
              value="44"
              c:identifier="PK_ERROR_ENUM_NO_DISTRO_UPGRADE_DATA"/>
      <member name="incompatible_architecture"
              value="45"
              c:identifier="PK_ERROR_ENUM_INCOMPATIBLE_ARCHITECTURE"/>
      <member name="no_space_on_device"
              value="46"
              c:identifier="PK_ERROR_ENUM_NO_SPACE_ON_DEVICE"/>
      <member name="media_change_required"
              value="47"
              c:identifier="PK_ERROR_ENUM_MEDIA_CHANGE_REQUIRED"/>
      <member name="not_authorized"
              value="48"
              c:identifier="PK_ERROR_ENUM_NOT_AUTHORIZED"/>
      <member name="update_not_found"
              value="49"
              c:identifier="PK_ERROR_ENUM_UPDATE_NOT_FOUND"/>
      <member name="cannot_install_repo_unsigned"
              value="50"
              c:identifier="PK_ERROR_ENUM_CANNOT_INSTALL_REPO_UNSIGNED"/>
      <member name="cannot_update_repo_unsigned"
              value="51"
              c:identifier="PK_ERROR_ENUM_CANNOT_UPDATE_REPO_UNSIGNED"/>
      <member name="cannot_get_filelist"
              value="52"
              c:identifier="PK_ERROR_ENUM_CANNOT_GET_FILELIST"/>
      <member name="cannot_get_requires"
              value="53"
              c:identifier="PK_ERROR_ENUM_CANNOT_GET_REQUIRES"/>
      <member name="cannot_disable_repository"
              value="54"
              c:identifier="PK_ERROR_ENUM_CANNOT_DISABLE_REPOSITORY"/>
      <member name="restricted_download"
              value="55"
              c:identifier="PK_ERROR_ENUM_RESTRICTED_DOWNLOAD"/>
      <member name="package_failed_to_configure"
              value="56"
              c:identifier="PK_ERROR_ENUM_PACKAGE_FAILED_TO_CONFIGURE"/>
      <member name="package_failed_to_build"
              value="57"
              c:identifier="PK_ERROR_ENUM_PACKAGE_FAILED_TO_BUILD"/>
      <member name="package_failed_to_install"
              value="58"
              c:identifier="PK_ERROR_ENUM_PACKAGE_FAILED_TO_INSTALL"/>
      <member name="package_failed_to_remove"
              value="59"
              c:identifier="PK_ERROR_ENUM_PACKAGE_FAILED_TO_REMOVE"/>
      <member name="update_failed_due_to_running_process"
              value="60"
              c:identifier="PK_ERROR_ENUM_UPDATE_FAILED_DUE_TO_RUNNING_PROCESS"/>
      <member name="last" value="61" c:identifier="PK_ERROR_ENUM_LAST"/>
    </enumeration>
    <record name="PkErrorPrivate"
            c:type="PkErrorPrivate"
            doc="Private #PkError data">
    </record>
    <class name="PkEulaRequired"
           c:type="PkEulaRequired"
           parent="PkSource"
           glib:type-name="PkEulaRequired"
           glib:get-type="pk_eula_required_get_type"
           glib:type-struct="PkEulaRequiredClass">
      <constructor name="new"
                   c:identifier="pk_eula_required_new"
                   version="0.5.4">
        <return-value transfer-ownership="full">
          <type name="PkEulaRequired" c:type="PkEulaRequired*"/>
        </return-value>
      </constructor>
      <property name="eula-id" writable="1">
        <type name="utf8" c:type="gchararray"/>
      </property>
      <property name="license-agreement" writable="1">
        <type name="utf8" c:type="gchararray"/>
      </property>
      <property name="package-id" writable="1">
        <type name="utf8" c:type="gchararray"/>
      </property>
      <property name="vendor-name" writable="1">
        <type name="utf8" c:type="gchararray"/>
      </property>
      <field name="parent">
        <type name="PkSource" c:type="PkSource"/>
      </field>
      <field name="priv">
        <type name="PkEulaRequiredPrivate" c:type="PkEulaRequiredPrivate*"/>
      </field>
    </class>
    <record name="PkEulaRequiredClass"
            c:type="PkEulaRequiredClass"
            glib:is-gtype-struct-for="PkEulaRequired">
      <field name="parent_class">
        <type name="PkSourceClass" c:type="PkSourceClass"/>
      </field>
      <field name="pk_reserved1">
        <callback name="pk_reserved1" c:type="_pk_reserved1">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="pk_reserved2">
        <callback name="pk_reserved2" c:type="_pk_reserved2">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="pk_reserved3">
        <callback name="pk_reserved3" c:type="_pk_reserved3">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="pk_reserved4">
        <callback name="pk_reserved4" c:type="_pk_reserved4">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="pk_reserved5">
        <callback name="pk_reserved5" c:type="_pk_reserved5">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
    </record>
    <record name="PkEulaRequiredPrivate"
            c:type="PkEulaRequiredPrivate"
            doc="Private #PkEulaRequired data">
    </record>
    <enumeration name="PkExitEnum"
                 doc="How the backend exited"
                 c:type="PkExitEnum">
      <member name="unknown" value="0" c:identifier="PK_EXIT_ENUM_UNKNOWN"/>
      <member name="success" value="1" c:identifier="PK_EXIT_ENUM_SUCCESS"/>
      <member name="failed" value="2" c:identifier="PK_EXIT_ENUM_FAILED"/>
      <member name="cancelled"
              value="3"
              c:identifier="PK_EXIT_ENUM_CANCELLED"/>
      <member name="key_required"
              value="4"
              c:identifier="PK_EXIT_ENUM_KEY_REQUIRED"/>
      <member name="eula_required"
              value="5"
              c:identifier="PK_EXIT_ENUM_EULA_REQUIRED"/>
      <member name="killed" value="6" c:identifier="PK_EXIT_ENUM_KILLED"/>
      <member name="media_change_required"
              value="7"
              c:identifier="PK_EXIT_ENUM_MEDIA_CHANGE_REQUIRED"/>
      <member name="need_untrusted"
              value="8"
              c:identifier="PK_EXIT_ENUM_NEED_UNTRUSTED"/>
      <member name="last" value="9" c:identifier="PK_EXIT_ENUM_LAST"/>
    </enumeration>
    <class name="PkFiles"
           c:type="PkFiles"
           parent="PkSource"
           glib:type-name="PkFiles"
           glib:get-type="pk_files_get_type"
           glib:type-struct="PkFilesClass">
      <constructor name="new" c:identifier="pk_files_new" version="0.5.4">
        <return-value transfer-ownership="full">
          <type name="PkFiles" c:type="PkFiles*"/>
        </return-value>
      </constructor>
      <property name="files" writable="1">
        <type name="GObject.Strv" c:type="GStrv"/>
      </property>
      <property name="package-id" writable="1">
        <type name="utf8" c:type="gchararray"/>
      </property>
      <field name="parent">
        <type name="PkSource" c:type="PkSource"/>
      </field>
      <field name="priv">
        <type name="PkFilesPrivate" c:type="PkFilesPrivate*"/>
      </field>
    </class>
    <record name="PkFilesClass"
            c:type="PkFilesClass"
            glib:is-gtype-struct-for="PkFiles">
      <field name="parent_class">
        <type name="PkSourceClass" c:type="PkSourceClass"/>
      </field>
      <field name="pk_reserved1">
        <callback name="pk_reserved1" c:type="_pk_reserved1">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="pk_reserved2">
        <callback name="pk_reserved2" c:type="_pk_reserved2">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="pk_reserved3">
        <callback name="pk_reserved3" c:type="_pk_reserved3">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="pk_reserved4">
        <callback name="pk_reserved4" c:type="_pk_reserved4">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="pk_reserved5">
        <callback name="pk_reserved5" c:type="_pk_reserved5">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
    </record>
    <record name="PkFilesPrivate"
            c:type="PkFilesPrivate"
            doc="Private #PkFiles data">
    </record>
    <enumeration name="PkFilterEnum"
                 doc="The filter types"
                 c:type="PkFilterEnum">
      <member name="unknown" value="0" c:identifier="PK_FILTER_ENUM_UNKNOWN"/>
      <member name="none" value="1" c:identifier="PK_FILTER_ENUM_NONE"/>
      <member name="installed"
              value="2"
              c:identifier="PK_FILTER_ENUM_INSTALLED"/>
      <member name="not_installed"
              value="3"
              c:identifier="PK_FILTER_ENUM_NOT_INSTALLED"/>
      <member name="development"
              value="4"
              c:identifier="PK_FILTER_ENUM_DEVELOPMENT"/>
      <member name="not_development"
              value="5"
              c:identifier="PK_FILTER_ENUM_NOT_DEVELOPMENT"/>
      <member name="gui" value="6" c:identifier="PK_FILTER_ENUM_GUI"/>
      <member name="not_gui" value="7" c:identifier="PK_FILTER_ENUM_NOT_GUI"/>
      <member name="free" value="8" c:identifier="PK_FILTER_ENUM_FREE"/>
      <member name="not_free"
              value="9"
              c:identifier="PK_FILTER_ENUM_NOT_FREE"/>
      <member name="visible" value="10" c:identifier="PK_FILTER_ENUM_VISIBLE"/>
      <member name="not_visible"
              value="11"
              c:identifier="PK_FILTER_ENUM_NOT_VISIBLE"/>
      <member name="supported"
              value="12"
              c:identifier="PK_FILTER_ENUM_SUPPORTED"/>
      <member name="not_supported"
              value="13"
              c:identifier="PK_FILTER_ENUM_NOT_SUPPORTED"/>
      <member name="basename"
              value="14"
              c:identifier="PK_FILTER_ENUM_BASENAME"/>
      <member name="not_basename"
              value="15"
              c:identifier="PK_FILTER_ENUM_NOT_BASENAME"/>
      <member name="newest" value="16" c:identifier="PK_FILTER_ENUM_NEWEST"/>
      <member name="not_newest"
              value="17"
              c:identifier="PK_FILTER_ENUM_NOT_NEWEST"/>
      <member name="arch" value="18" c:identifier="PK_FILTER_ENUM_ARCH"/>
      <member name="not_arch"
              value="19"
              c:identifier="PK_FILTER_ENUM_NOT_ARCH"/>
      <member name="source" value="20" c:identifier="PK_FILTER_ENUM_SOURCE"/>
      <member name="not_source"
              value="21"
              c:identifier="PK_FILTER_ENUM_NOT_SOURCE"/>
      <member name="collections"
              value="22"
              c:identifier="PK_FILTER_ENUM_COLLECTIONS"/>
      <member name="not_collections"
              value="23"
              c:identifier="PK_FILTER_ENUM_NOT_COLLECTIONS"/>
      <member name="application"
              value="24"
              c:identifier="PK_FILTER_ENUM_APPLICATION"/>
      <member name="not_application"
              value="25"
              c:identifier="PK_FILTER_ENUM_NOT_APPLICATION"/>
      <member name="last" value="26" c:identifier="PK_FILTER_ENUM_LAST"/>
    </enumeration>
    <enumeration name="PkGroupEnum" doc="The group type" c:type="PkGroupEnum">
      <member name="unknown" value="0" c:identifier="PK_GROUP_ENUM_UNKNOWN"/>
      <member name="accessibility"
              value="1"
              c:identifier="PK_GROUP_ENUM_ACCESSIBILITY"/>
      <member name="accessories"
              value="2"
              c:identifier="PK_GROUP_ENUM_ACCESSORIES"/>
      <member name="admin_tools"
              value="3"
              c:identifier="PK_GROUP_ENUM_ADMIN_TOOLS"/>
      <member name="communication"
              value="4"
              c:identifier="PK_GROUP_ENUM_COMMUNICATION"/>
      <member name="desktop_gnome"
              value="5"
              c:identifier="PK_GROUP_ENUM_DESKTOP_GNOME"/>
      <member name="desktop_kde"
              value="6"
              c:identifier="PK_GROUP_ENUM_DESKTOP_KDE"/>
      <member name="desktop_other"
              value="7"
              c:identifier="PK_GROUP_ENUM_DESKTOP_OTHER"/>
      <member name="desktop_xfce"
              value="8"
              c:identifier="PK_GROUP_ENUM_DESKTOP_XFCE"/>
      <member name="education"
              value="9"
              c:identifier="PK_GROUP_ENUM_EDUCATION"/>
      <member name="fonts" value="10" c:identifier="PK_GROUP_ENUM_FONTS"/>
      <member name="games" value="11" c:identifier="PK_GROUP_ENUM_GAMES"/>
      <member name="graphics"
              value="12"
              c:identifier="PK_GROUP_ENUM_GRAPHICS"/>
      <member name="internet"
              value="13"
              c:identifier="PK_GROUP_ENUM_INTERNET"/>
      <member name="legacy" value="14" c:identifier="PK_GROUP_ENUM_LEGACY"/>
      <member name="localization"
              value="15"
              c:identifier="PK_GROUP_ENUM_LOCALIZATION"/>
      <member name="maps" value="16" c:identifier="PK_GROUP_ENUM_MAPS"/>
      <member name="multimedia"
              value="17"
              c:identifier="PK_GROUP_ENUM_MULTIMEDIA"/>
      <member name="network" value="18" c:identifier="PK_GROUP_ENUM_NETWORK"/>
      <member name="office" value="19" c:identifier="PK_GROUP_ENUM_OFFICE"/>
      <member name="other" value="20" c:identifier="PK_GROUP_ENUM_OTHER"/>
      <member name="power_management"
              value="21"
              c:identifier="PK_GROUP_ENUM_POWER_MANAGEMENT"/>
      <member name="programming"
              value="22"
              c:identifier="PK_GROUP_ENUM_PROGRAMMING"/>
      <member name="publishing"
              value="23"
              c:identifier="PK_GROUP_ENUM_PUBLISHING"/>
      <member name="repos" value="24" c:identifier="PK_GROUP_ENUM_REPOS"/>
      <member name="security"
              value="25"
              c:identifier="PK_GROUP_ENUM_SECURITY"/>
      <member name="servers" value="26" c:identifier="PK_GROUP_ENUM_SERVERS"/>
      <member name="system" value="27" c:identifier="PK_GROUP_ENUM_SYSTEM"/>
      <member name="virtualization"
              value="28"
              c:identifier="PK_GROUP_ENUM_VIRTUALIZATION"/>
      <member name="science" value="29" c:identifier="PK_GROUP_ENUM_SCIENCE"/>
      <member name="documentation"
              value="30"
              c:identifier="PK_GROUP_ENUM_DOCUMENTATION"/>
      <member name="electronics"
              value="31"
              c:identifier="PK_GROUP_ENUM_ELECTRONICS"/>
      <member name="collections"
              value="32"
              c:identifier="PK_GROUP_ENUM_COLLECTIONS"/>
      <member name="vendor" value="33" c:identifier="PK_GROUP_ENUM_VENDOR"/>
      <member name="newest" value="34" c:identifier="PK_GROUP_ENUM_NEWEST"/>
      <member name="last" value="35" c:identifier="PK_GROUP_ENUM_LAST"/>
    </enumeration>
    <enumeration name="PkInfoEnum"
                 doc="The enumerated types used in Package() - these have to refer to a specific
package action, rather than a general state"
                 c:type="PkInfoEnum">
      <member name="unknown" value="0" c:identifier="PK_INFO_ENUM_UNKNOWN"/>
      <member name="installed"
              value="1"
              c:identifier="PK_INFO_ENUM_INSTALLED"/>
      <member name="available"
              value="2"
              c:identifier="PK_INFO_ENUM_AVAILABLE"/>
      <member name="low" value="3" c:identifier="PK_INFO_ENUM_LOW"/>
      <member name="enhancement"
              value="4"
              c:identifier="PK_INFO_ENUM_ENHANCEMENT"/>
      <member name="normal" value="5" c:identifier="PK_INFO_ENUM_NORMAL"/>
      <member name="bugfix" value="6" c:identifier="PK_INFO_ENUM_BUGFIX"/>
      <member name="important"
              value="7"
              c:identifier="PK_INFO_ENUM_IMPORTANT"/>
      <member name="security" value="8" c:identifier="PK_INFO_ENUM_SECURITY"/>
      <member name="blocked" value="9" c:identifier="PK_INFO_ENUM_BLOCKED"/>
      <member name="downloading"
              value="10"
              c:identifier="PK_INFO_ENUM_DOWNLOADING"/>
      <member name="updating" value="11" c:identifier="PK_INFO_ENUM_UPDATING"/>
      <member name="installing"
              value="12"
              c:identifier="PK_INFO_ENUM_INSTALLING"/>
      <member name="removing" value="13" c:identifier="PK_INFO_ENUM_REMOVING"/>
      <member name="cleanup" value="14" c:identifier="PK_INFO_ENUM_CLEANUP"/>
      <member name="obsoleting"
              value="15"
              c:identifier="PK_INFO_ENUM_OBSOLETING"/>
      <member name="collection_installed"
              value="16"
              c:identifier="PK_INFO_ENUM_COLLECTION_INSTALLED"/>
      <member name="collection_available"
              value="17"
              c:identifier="PK_INFO_ENUM_COLLECTION_AVAILABLE"/>
      <member name="finished" value="18" c:identifier="PK_INFO_ENUM_FINISHED"/>
      <member name="reinstalling"
              value="19"
              c:identifier="PK_INFO_ENUM_REINSTALLING"/>
      <member name="downgrading"
              value="20"
              c:identifier="PK_INFO_ENUM_DOWNGRADING"/>
      <member name="preparing"
              value="21"
              c:identifier="PK_INFO_ENUM_PREPARING"/>
      <member name="decompressing"
              value="22"
              c:identifier="PK_INFO_ENUM_DECOMPRESSING"/>
      <member name="last" value="23" c:identifier="PK_INFO_ENUM_LAST"/>
    </enumeration>
    <enumeration name="PkLicenseEnum" c:type="PkLicenseEnum">
      <member name="unknown" value="0" c:identifier="PK_LICENSE_ENUM_UNKNOWN"/>
      <member name="aal" value="1" c:identifier="PK_LICENSE_ENUM_AAL"/>
      <member name="adobe" value="2" c:identifier="PK_LICENSE_ENUM_ADOBE"/>
      <member name="adsl" value="3" c:identifier="PK_LICENSE_ENUM_ADSL"/>
      <member name="afl" value="4" c:identifier="PK_LICENSE_ENUM_AFL"/>
      <member name="agplv1" value="5" c:identifier="PK_LICENSE_ENUM_AGPLV1"/>
      <member name="ampas_bsd"
              value="6"
              c:identifier="PK_LICENSE_ENUM_AMPAS_BSD"/>
      <member name="apsl_2_dot_0"
              value="7"
              c:identifier="PK_LICENSE_ENUM_APSL_2_DOT_0"/>
      <member name="arl" value="8" c:identifier="PK_LICENSE_ENUM_ARL"/>
      <member name="arphic" value="9" c:identifier="PK_LICENSE_ENUM_ARPHIC"/>
      <member name="artistic_2_dot_0"
              value="10"
              c:identifier="PK_LICENSE_ENUM_ARTISTIC_2_DOT_0"/>
      <member name="artistic_clarified"
              value="11"
              c:identifier="PK_LICENSE_ENUM_ARTISTIC_CLARIFIED"/>
      <member name="asl_1_dot_0"
              value="12"
              c:identifier="PK_LICENSE_ENUM_ASL_1_DOT_0"/>
      <member name="asl_1_dot_1"
              value="13"
              c:identifier="PK_LICENSE_ENUM_ASL_1_DOT_1"/>
      <member name="asl_2_dot_0"
              value="14"
              c:identifier="PK_LICENSE_ENUM_ASL_2_DOT_0"/>
      <member name="baekmuk"
              value="15"
              c:identifier="PK_LICENSE_ENUM_BAEKMUK"/>
      <member name="bittorrent"
              value="16"
              c:identifier="PK_LICENSE_ENUM_BITTORRENT"/>
      <member name="boost" value="17" c:identifier="PK_LICENSE_ENUM_BOOST"/>
      <member name="bsd" value="18" c:identifier="PK_LICENSE_ENUM_BSD"/>
      <member name="bsd_with_advertising"
              value="19"
              c:identifier="PK_LICENSE_ENUM_BSD_WITH_ADVERTISING"/>
      <member name="catosl" value="20" c:identifier="PK_LICENSE_ENUM_CATOSL"/>
      <member name="cc0" value="21" c:identifier="PK_LICENSE_ENUM_CC0"/>
      <member name="cc_by" value="22" c:identifier="PK_LICENSE_ENUM_CC_BY"/>
      <member name="cc_by_sa"
              value="23"
              c:identifier="PK_LICENSE_ENUM_CC_BY_SA"/>
      <member name="cddl" value="24" c:identifier="PK_LICENSE_ENUM_CDDL"/>
      <member name="cdl" value="25" c:identifier="PK_LICENSE_ENUM_CDL"/>
      <member name="cecill" value="26" c:identifier="PK_LICENSE_ENUM_CECILL"/>
      <member name="cecill_b"
              value="27"
              c:identifier="PK_LICENSE_ENUM_CECILL_B"/>
      <member name="cecill_c"
              value="28"
              c:identifier="PK_LICENSE_ENUM_CECILL_C"/>
      <member name="cnri" value="29" c:identifier="PK_LICENSE_ENUM_CNRI"/>
      <member name="condor" value="30" c:identifier="PK_LICENSE_ENUM_CONDOR"/>
      <member name="copyright_only"
              value="31"
              c:identifier="PK_LICENSE_ENUM_COPYRIGHT_ONLY"/>
      <member name="cpal" value="32" c:identifier="PK_LICENSE_ENUM_CPAL"/>
      <member name="cpl" value="33" c:identifier="PK_LICENSE_ENUM_CPL"/>
      <member name="crystal_stacker"
              value="34"
              c:identifier="PK_LICENSE_ENUM_CRYSTAL_STACKER"/>
      <member name="doc" value="35" c:identifier="PK_LICENSE_ENUM_DOC"/>
      <member name="dsl" value="36" c:identifier="PK_LICENSE_ENUM_DSL"/>
      <member name="dvipdfm"
              value="37"
              c:identifier="PK_LICENSE_ENUM_DVIPDFM"/>
      <member name="ecl_1_dot_0"
              value="38"
              c:identifier="PK_LICENSE_ENUM_ECL_1_DOT_0"/>
      <member name="ecl_2_dot_0"
              value="39"
              c:identifier="PK_LICENSE_ENUM_ECL_2_DOT_0"/>
      <member name="ecos" value="40" c:identifier="PK_LICENSE_ENUM_ECOS"/>
      <member name="efl_2_dot_0"
              value="41"
              c:identifier="PK_LICENSE_ENUM_EFL_2_DOT_0"/>
      <member name="entessa"
              value="42"
              c:identifier="PK_LICENSE_ENUM_ENTESSA"/>
      <member name="epl" value="43" c:identifier="PK_LICENSE_ENUM_EPL"/>
      <member name="erpl" value="44" c:identifier="PK_LICENSE_ENUM_ERPL"/>
      <member name="eurosym"
              value="45"
              c:identifier="PK_LICENSE_ENUM_EUROSYM"/>
      <member name="eu_datagrid"
              value="46"
              c:identifier="PK_LICENSE_ENUM_EU_DATAGRID"/>
      <member name="fair" value="47" c:identifier="PK_LICENSE_ENUM_FAIR"/>
      <member name="fbsddl" value="48" c:identifier="PK_LICENSE_ENUM_FBSDDL"/>
      <member name="free_art"
              value="49"
              c:identifier="PK_LICENSE_ENUM_FREE_ART"/>
      <member name="ftl" value="50" c:identifier="PK_LICENSE_ENUM_FTL"/>
      <member name="geogratis"
              value="51"
              c:identifier="PK_LICENSE_ENUM_GEOGRATIS"/>
      <member name="gfdl" value="52" c:identifier="PK_LICENSE_ENUM_GFDL"/>
      <member name="giftware"
              value="53"
              c:identifier="PK_LICENSE_ENUM_GIFTWARE"/>
      <member name="gl2ps" value="54" c:identifier="PK_LICENSE_ENUM_GL2PS"/>
      <member name="glide" value="55" c:identifier="PK_LICENSE_ENUM_GLIDE"/>
      <member name="gnuplot"
              value="56"
              c:identifier="PK_LICENSE_ENUM_GNUPLOT"/>
      <member name="gplv1" value="57" c:identifier="PK_LICENSE_ENUM_GPLV1"/>
      <member name="gplv2" value="58" c:identifier="PK_LICENSE_ENUM_GPLV2"/>
      <member name="gplv2_or_artistic"
              value="59"
              c:identifier="PK_LICENSE_ENUM_GPLV2_OR_ARTISTIC"/>
      <member name="gplv2_plus"
              value="60"
              c:identifier="PK_LICENSE_ENUM_GPLV2_PLUS"/>
      <member name="gplv2_plus_or_artistic"
              value="61"
              c:identifier="PK_LICENSE_ENUM_GPLV2_PLUS_OR_ARTISTIC"/>
      <member name="gplv2_plus_with_exceptions"
              value="62"
              c:identifier="PK_LICENSE_ENUM_GPLV2_PLUS_WITH_EXCEPTIONS"/>
      <member name="gplv2_with_exceptions"
              value="63"
              c:identifier="PK_LICENSE_ENUM_GPLV2_WITH_EXCEPTIONS"/>
      <member name="gplv3" value="64" c:identifier="PK_LICENSE_ENUM_GPLV3"/>
      <member name="gplv3_plus"
              value="65"
              c:identifier="PK_LICENSE_ENUM_GPLV3_PLUS"/>
      <member name="gplv3_plus_with_exceptions"
              value="66"
              c:identifier="PK_LICENSE_ENUM_GPLV3_PLUS_WITH_EXCEPTIONS"/>
      <member name="gplv3_with_exceptions"
              value="67"
              c:identifier="PK_LICENSE_ENUM_GPLV3_WITH_EXCEPTIONS"/>
      <member name="gpl_plus"
              value="68"
              c:identifier="PK_LICENSE_ENUM_GPL_PLUS"/>
      <member name="gpl_plus_or_artistic"
              value="69"
              c:identifier="PK_LICENSE_ENUM_GPL_PLUS_OR_ARTISTIC"/>
      <member name="gpl_plus_with_exceptions"
              value="70"
              c:identifier="PK_LICENSE_ENUM_GPL_PLUS_WITH_EXCEPTIONS"/>
      <member name="ibm" value="71" c:identifier="PK_LICENSE_ENUM_IBM"/>
      <member name="ieee" value="72" c:identifier="PK_LICENSE_ENUM_IEEE"/>
      <member name="ijg" value="73" c:identifier="PK_LICENSE_ENUM_IJG"/>
      <member name="imagemagick"
              value="74"
              c:identifier="PK_LICENSE_ENUM_IMAGEMAGICK"/>
      <member name="imatix" value="75" c:identifier="PK_LICENSE_ENUM_IMATIX"/>
      <member name="imlib2" value="76" c:identifier="PK_LICENSE_ENUM_IMLIB2"/>
      <member name="intel_acpi"
              value="77"
              c:identifier="PK_LICENSE_ENUM_INTEL_ACPI"/>
      <member name="interbase"
              value="78"
              c:identifier="PK_LICENSE_ENUM_INTERBASE"/>
      <member name="ipa" value="79" c:identifier="PK_LICENSE_ENUM_IPA"/>
      <member name="isc" value="80" c:identifier="PK_LICENSE_ENUM_ISC"/>
      <member name="jabber" value="81" c:identifier="PK_LICENSE_ENUM_JABBER"/>
      <member name="jasper" value="82" c:identifier="PK_LICENSE_ENUM_JASPER"/>
      <member name="jpython"
              value="83"
              c:identifier="PK_LICENSE_ENUM_JPYTHON"/>
      <member name="knuth" value="84" c:identifier="PK_LICENSE_ENUM_KNUTH"/>
      <member name="lbnl_bsd"
              value="85"
              c:identifier="PK_LICENSE_ENUM_LBNL_BSD"/>
      <member name="lgplv2" value="86" c:identifier="PK_LICENSE_ENUM_LGPLV2"/>
      <member name="lgplv2_plus"
              value="87"
              c:identifier="PK_LICENSE_ENUM_LGPLV2_PLUS"/>
      <member name="lgplv2_plus_or_artistic"
              value="88"
              c:identifier="PK_LICENSE_ENUM_LGPLV2_PLUS_OR_ARTISTIC"/>
      <member name="lgplv2_plus_with_exceptions"
              value="89"
              c:identifier="PK_LICENSE_ENUM_LGPLV2_PLUS_WITH_EXCEPTIONS"/>
      <member name="lgplv2_with_exceptions"
              value="90"
              c:identifier="PK_LICENSE_ENUM_LGPLV2_WITH_EXCEPTIONS"/>
      <member name="lgplv3" value="91" c:identifier="PK_LICENSE_ENUM_LGPLV3"/>
      <member name="lgplv3_plus"
              value="92"
              c:identifier="PK_LICENSE_ENUM_LGPLV3_PLUS"/>
      <member name="lgplv3_plus_with_exceptions"
              value="93"
              c:identifier="PK_LICENSE_ENUM_LGPLV3_PLUS_WITH_EXCEPTIONS"/>
      <member name="lgplv3_with_exceptions"
              value="94"
              c:identifier="PK_LICENSE_ENUM_LGPLV3_WITH_EXCEPTIONS"/>
      <member name="liberation"
              value="95"
              c:identifier="PK_LICENSE_ENUM_LIBERATION"/>
      <member name="libtiff"
              value="96"
              c:identifier="PK_LICENSE_ENUM_LIBTIFF"/>
      <member name="llgpl" value="97" c:identifier="PK_LICENSE_ENUM_LLGPL"/>
      <member name="logica" value="98" c:identifier="PK_LICENSE_ENUM_LOGICA"/>
      <member name="lpl" value="99" c:identifier="PK_LICENSE_ENUM_LPL"/>
      <member name="lppl" value="100" c:identifier="PK_LICENSE_ENUM_LPPL"/>
      <member name="mecab_ipadic"
              value="101"
              c:identifier="PK_LICENSE_ENUM_MECAB_IPADIC"/>
      <member name="miros" value="102" c:identifier="PK_LICENSE_ENUM_MIROS"/>
      <member name="mit" value="103" c:identifier="PK_LICENSE_ENUM_MIT"/>
      <member name="mit_with_advertising"
              value="104"
              c:identifier="PK_LICENSE_ENUM_MIT_WITH_ADVERTISING"/>
      <member name="mod_macro"
              value="105"
              c:identifier="PK_LICENSE_ENUM_MOD_MACRO"/>
      <member name="motosoto"
              value="106"
              c:identifier="PK_LICENSE_ENUM_MOTOSOTO"/>
      <member name="mplus" value="107" c:identifier="PK_LICENSE_ENUM_MPLUS"/>
      <member name="mplv1_dot_0"
              value="108"
              c:identifier="PK_LICENSE_ENUM_MPLV1_DOT_0"/>
      <member name="mplv1_dot_1"
              value="109"
              c:identifier="PK_LICENSE_ENUM_MPLV1_DOT_1"/>
      <member name="ms_pl" value="110" c:identifier="PK_LICENSE_ENUM_MS_PL"/>
      <member name="naumen" value="111" c:identifier="PK_LICENSE_ENUM_NAUMEN"/>
      <member name="ncsa" value="112" c:identifier="PK_LICENSE_ENUM_NCSA"/>
      <member name="netcdf" value="113" c:identifier="PK_LICENSE_ENUM_NETCDF"/>
      <member name="netscape"
              value="114"
              c:identifier="PK_LICENSE_ENUM_NETSCAPE"/>
      <member name="newmat" value="115" c:identifier="PK_LICENSE_ENUM_NEWMAT"/>
      <member name="ngpl" value="116" c:identifier="PK_LICENSE_ENUM_NGPL"/>
      <member name="nokia" value="117" c:identifier="PK_LICENSE_ENUM_NOKIA"/>
      <member name="nosl" value="118" c:identifier="PK_LICENSE_ENUM_NOSL"/>
      <member name="noweb" value="119" c:identifier="PK_LICENSE_ENUM_NOWEB"/>
      <member name="oal" value="120" c:identifier="PK_LICENSE_ENUM_OAL"/>
      <member name="ofl" value="121" c:identifier="PK_LICENSE_ENUM_OFL"/>
      <member name="ofsfdl" value="122" c:identifier="PK_LICENSE_ENUM_OFSFDL"/>
      <member name="openldap"
              value="123"
              c:identifier="PK_LICENSE_ENUM_OPENLDAP"/>
      <member name="openpbs"
              value="124"
              c:identifier="PK_LICENSE_ENUM_OPENPBS"/>
      <member name="openssl"
              value="125"
              c:identifier="PK_LICENSE_ENUM_OPENSSL"/>
      <member name="oreilly"
              value="126"
              c:identifier="PK_LICENSE_ENUM_OREILLY"/>
      <member name="osl_1_dot_0"
              value="127"
              c:identifier="PK_LICENSE_ENUM_OSL_1_DOT_0"/>
      <member name="osl_1_dot_1"
              value="128"
              c:identifier="PK_LICENSE_ENUM_OSL_1_DOT_1"/>
      <member name="osl_2_dot_0"
              value="129"
              c:identifier="PK_LICENSE_ENUM_OSL_2_DOT_0"/>
      <member name="osl_2_dot_1"
              value="130"
              c:identifier="PK_LICENSE_ENUM_OSL_2_DOT_1"/>
      <member name="osl_3_dot_0"
              value="131"
              c:identifier="PK_LICENSE_ENUM_OSL_3_DOT_0"/>
      <member name="phorum" value="132" c:identifier="PK_LICENSE_ENUM_PHORUM"/>
      <member name="php" value="133" c:identifier="PK_LICENSE_ENUM_PHP"/>
      <member name="plexus" value="134" c:identifier="PK_LICENSE_ENUM_PLEXUS"/>
      <member name="psutils"
              value="135"
              c:identifier="PK_LICENSE_ENUM_PSUTILS"/>
      <member name="public_domain"
              value="136"
              c:identifier="PK_LICENSE_ENUM_PUBLIC_DOMAIN"/>
      <member name="public_use"
              value="137"
              c:identifier="PK_LICENSE_ENUM_PUBLIC_USE"/>
      <member name="python" value="138" c:identifier="PK_LICENSE_ENUM_PYTHON"/>
      <member name="qhull" value="139" c:identifier="PK_LICENSE_ENUM_QHULL"/>
      <member name="qpl" value="140" c:identifier="PK_LICENSE_ENUM_QPL"/>
      <member name="ricebsd"
              value="141"
              c:identifier="PK_LICENSE_ENUM_RICEBSD"/>
      <member name="rpsl" value="142" c:identifier="PK_LICENSE_ENUM_RPSL"/>
      <member name="ruby" value="143" c:identifier="PK_LICENSE_ENUM_RUBY"/>
      <member name="saxpath"
              value="144"
              c:identifier="PK_LICENSE_ENUM_SAXPATH"/>
      <member name="scea" value="145" c:identifier="PK_LICENSE_ENUM_SCEA"/>
      <member name="scrip" value="146" c:identifier="PK_LICENSE_ENUM_SCRIP"/>
      <member name="sendmail"
              value="147"
              c:identifier="PK_LICENSE_ENUM_SENDMAIL"/>
      <member name="sissl" value="148" c:identifier="PK_LICENSE_ENUM_SISSL"/>
      <member name="sleepycat"
              value="149"
              c:identifier="PK_LICENSE_ENUM_SLEEPYCAT"/>
      <member name="slib" value="150" c:identifier="PK_LICENSE_ENUM_SLIB"/>
      <member name="snia" value="151" c:identifier="PK_LICENSE_ENUM_SNIA"/>
      <member name="spl" value="152" c:identifier="PK_LICENSE_ENUM_SPL"/>
      <member name="stix" value="153" c:identifier="PK_LICENSE_ENUM_STIX"/>
      <member name="tcl" value="154" c:identifier="PK_LICENSE_ENUM_TCL"/>
      <member name="tmate" value="155" c:identifier="PK_LICENSE_ENUM_TMATE"/>
      <member name="tpl" value="156" c:identifier="PK_LICENSE_ENUM_TPL"/>
      <member name="ucd" value="157" c:identifier="PK_LICENSE_ENUM_UCD"/>
      <member name="vim" value="158" c:identifier="PK_LICENSE_ENUM_VIM"/>
      <member name="vnlsl" value="159" c:identifier="PK_LICENSE_ENUM_VNLSL"/>
      <member name="vostrom"
              value="160"
              c:identifier="PK_LICENSE_ENUM_VOSTROM"/>
      <member name="vsl" value="161" c:identifier="PK_LICENSE_ENUM_VSL"/>
      <member name="w3c" value="162" c:identifier="PK_LICENSE_ENUM_W3C"/>
      <member name="wadalab"
              value="163"
              c:identifier="PK_LICENSE_ENUM_WADALAB"/>
      <member name="webmin" value="164" c:identifier="PK_LICENSE_ENUM_WEBMIN"/>
      <member name="wtfpl" value="165" c:identifier="PK_LICENSE_ENUM_WTFPL"/>
      <member name="wxwidgets"
              value="166"
              c:identifier="PK_LICENSE_ENUM_WXWIDGETS"/>
      <member name="xano" value="167" c:identifier="PK_LICENSE_ENUM_XANO"/>
      <member name="xerox" value="168" c:identifier="PK_LICENSE_ENUM_XEROX"/>
      <member name="xinetd" value="169" c:identifier="PK_LICENSE_ENUM_XINETD"/>
      <member name="xskat" value="170" c:identifier="PK_LICENSE_ENUM_XSKAT"/>
      <member name="yplv1_dot_1"
              value="171"
              c:identifier="PK_LICENSE_ENUM_YPLV1_DOT_1"/>
      <member name="zend" value="172" c:identifier="PK_LICENSE_ENUM_ZEND"/>
      <member name="zlib" value="173" c:identifier="PK_LICENSE_ENUM_ZLIB"/>
      <member name="zlib_with_acknowledgement"
              value="174"
              c:identifier="PK_LICENSE_ENUM_ZLIB_WITH_ACKNOWLEDGEMENT"/>
      <member name="zplv1_dot_0"
              value="175"
              c:identifier="PK_LICENSE_ENUM_ZPLV1_DOT_0"/>
      <member name="zplv2_dot_0"
              value="176"
              c:identifier="PK_LICENSE_ENUM_ZPLV2_DOT_0"/>
      <member name="zplv2_dot_1"
              value="177"
              c:identifier="PK_LICENSE_ENUM_ZPLV2_DOT_1"/>
      <member name="last" value="178" c:identifier="PK_LICENSE_ENUM_LAST"/>
    </enumeration>
    <class name="PkMediaChangeRequired"
           c:type="PkMediaChangeRequired"
           parent="PkSource"
           glib:type-name="PkMediaChangeRequired"
           glib:get-type="pk_media_change_required_get_type"
           glib:type-struct="PkMediaChangeRequiredClass">
      <constructor name="new"
                   c:identifier="pk_media_change_required_new"
                   version="0.5.4">
        <return-value transfer-ownership="full">
          <type name="PkMediaChangeRequired" c:type="PkMediaChangeRequired*"/>
        </return-value>
      </constructor>
      <property name="media-id" writable="1">
        <type name="utf8" c:type="gchararray"/>
      </property>
      <property name="media-text" writable="1">
        <type name="utf8" c:type="gchararray"/>
      </property>
      <property name="media-type" writable="1">
        <type name="uint" c:type="guint"/>
      </property>
      <field name="parent">
        <type name="PkSource" c:type="PkSource"/>
      </field>
      <field name="priv">
        <type name="PkMediaChangeRequiredPrivate"
              c:type="PkMediaChangeRequiredPrivate*"/>
      </field>
    </class>
    <record name="PkMediaChangeRequiredClass"
            c:type="PkMediaChangeRequiredClass"
            glib:is-gtype-struct-for="PkMediaChangeRequired">
      <field name="parent_class">
        <type name="PkSourceClass" c:type="PkSourceClass"/>
      </field>
      <field name="pk_reserved1">
        <callback name="pk_reserved1" c:type="_pk_reserved1">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="pk_reserved2">
        <callback name="pk_reserved2" c:type="_pk_reserved2">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="pk_reserved3">
        <callback name="pk_reserved3" c:type="_pk_reserved3">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="pk_reserved4">
        <callback name="pk_reserved4" c:type="_pk_reserved4">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="pk_reserved5">
        <callback name="pk_reserved5" c:type="_pk_reserved5">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
    </record>
    <record name="PkMediaChangeRequiredPrivate"
            c:type="PkMediaChangeRequiredPrivate"
            doc="Private #PkMediaChangeRequired data">
    </record>
    <enumeration name="PkMediaTypeEnum"
                 doc="The media type"
                 c:type="PkMediaTypeEnum">
      <member name="unknown"
              value="0"
              c:identifier="PK_MEDIA_TYPE_ENUM_UNKNOWN"/>
      <member name="cd" value="1" c:identifier="PK_MEDIA_TYPE_ENUM_CD"/>
      <member name="dvd" value="2" c:identifier="PK_MEDIA_TYPE_ENUM_DVD"/>
      <member name="disc" value="3" c:identifier="PK_MEDIA_TYPE_ENUM_DISC"/>
      <member name="last" value="4" c:identifier="PK_MEDIA_TYPE_ENUM_LAST"/>
    </enumeration>
    <class name="PkMessage"
           c:type="PkMessage"
           parent="PkSource"
           glib:type-name="PkMessage"
           glib:get-type="pk_message_get_type"
           glib:type-struct="PkMessageClass">
      <constructor name="new" c:identifier="pk_message_new" version="0.5.4">
        <return-value transfer-ownership="full">
          <type name="PkMessage" c:type="PkMessage*"/>
        </return-value>
      </constructor>
      <function name="enum_from_string"
                c:identifier="pk_message_enum_from_string"
                doc="Converts a text enumerated type to its unsigned integer representation"
                version="0.5.0">
        <return-value transfer-ownership="full">
          <type name="PkMessageEnum" c:type="PkMessageEnum"/>
        </return-value>
        <parameters>
          <parameter name="message" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </function>
      <function name="enum_to_string"
                c:identifier="pk_message_enum_to_string"
                doc="Converts a enumerated type to its text representation"
                version="0.5.0">
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <parameter name="message" transfer-ownership="none">
            <type name="PkMessageEnum" c:type="PkMessageEnum"/>
          </parameter>
        </parameters>
      </function>
      <property name="details" writable="1">
        <type name="utf8" c:type="gchararray"/>
      </property>
      <property name="type" writable="1">
        <type name="uint" c:type="guint"/>
      </property>
      <field name="parent">
        <type name="PkSource" c:type="PkSource"/>
      </field>
      <field name="priv">
        <type name="PkMessagePrivate" c:type="PkMessagePrivate*"/>
      </field>
    </class>
    <record name="PkMessageClass"
            c:type="PkMessageClass"
            glib:is-gtype-struct-for="PkMessage">
      <field name="parent_class">
        <type name="PkSourceClass" c:type="PkSourceClass"/>
      </field>
      <field name="pk_reserved1">
        <callback name="pk_reserved1" c:type="_pk_reserved1">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="pk_reserved2">
        <callback name="pk_reserved2" c:type="_pk_reserved2">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="pk_reserved3">
        <callback name="pk_reserved3" c:type="_pk_reserved3">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="pk_reserved4">
        <callback name="pk_reserved4" c:type="_pk_reserved4">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="pk_reserved5">
        <callback name="pk_reserved5" c:type="_pk_reserved5">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
    </record>
    <enumeration name="PkMessageEnum"
                 doc="What message type we need to show"
                 c:type="PkMessageEnum">
      <member name="unknown" value="0" c:identifier="PK_MESSAGE_ENUM_UNKNOWN"/>
      <member name="broken_mirror"
              value="1"
              c:identifier="PK_MESSAGE_ENUM_BROKEN_MIRROR"/>
      <member name="connection_refused"
              value="2"
              c:identifier="PK_MESSAGE_ENUM_CONNECTION_REFUSED"/>
      <member name="parameter_invalid"
              value="3"
              c:identifier="PK_MESSAGE_ENUM_PARAMETER_INVALID"/>
      <member name="priority_invalid"
              value="4"
              c:identifier="PK_MESSAGE_ENUM_PRIORITY_INVALID"/>
      <member name="backend_error"
              value="5"
              c:identifier="PK_MESSAGE_ENUM_BACKEND_ERROR"/>
      <member name="daemon_error"
              value="6"
              c:identifier="PK_MESSAGE_ENUM_DAEMON_ERROR"/>
      <member name="cache_being_rebuilt"
              value="7"
              c:identifier="PK_MESSAGE_ENUM_CACHE_BEING_REBUILT"/>
      <member name="untrusted_package"
              value="8"
              c:identifier="PK_MESSAGE_ENUM_UNTRUSTED_PACKAGE"/>
      <member name="newer_package_exists"
              value="9"
              c:identifier="PK_MESSAGE_ENUM_NEWER_PACKAGE_EXISTS"/>
      <member name="could_not_find_package"
              value="10"
              c:identifier="PK_MESSAGE_ENUM_COULD_NOT_FIND_PACKAGE"/>
      <member name="config_files_changed"
              value="11"
              c:identifier="PK_MESSAGE_ENUM_CONFIG_FILES_CHANGED"/>
      <member name="package_already_installed"
              value="12"
              c:identifier="PK_MESSAGE_ENUM_PACKAGE_ALREADY_INSTALLED"/>
      <member name="autoremove_ignored"
              value="13"
              c:identifier="PK_MESSAGE_ENUM_AUTOREMOVE_IGNORED"/>
      <member name="repo_metadata_download_failed"
              value="14"
              c:identifier="PK_MESSAGE_ENUM_REPO_METADATA_DOWNLOAD_FAILED"/>
      <member name="repo_for_developers_only"
              value="15"
              c:identifier="PK_MESSAGE_ENUM_REPO_FOR_DEVELOPERS_ONLY"/>
      <member name="last" value="16" c:identifier="PK_MESSAGE_ENUM_LAST"/>
    </enumeration>
    <record name="PkMessagePrivate"
            c:type="PkMessagePrivate"
            doc="Private #PkMessage data">
    </record>
    <enumeration name="PkNetworkEnum" c:type="PkNetworkEnum">
      <member name="unknown" value="0" c:identifier="PK_NETWORK_ENUM_UNKNOWN"/>
      <member name="offline" value="1" c:identifier="PK_NETWORK_ENUM_OFFLINE"/>
      <member name="online" value="2" c:identifier="PK_NETWORK_ENUM_ONLINE"/>
      <member name="wired" value="3" c:identifier="PK_NETWORK_ENUM_WIRED"/>
      <member name="wifi" value="4" c:identifier="PK_NETWORK_ENUM_WIFI"/>
      <member name="mobile" value="5" c:identifier="PK_NETWORK_ENUM_MOBILE"/>
      <member name="last" value="6" c:identifier="PK_NETWORK_ENUM_LAST"/>
    </enumeration>
    <class name="PkPackage"
           c:type="PkPackage"
           parent="PkSource"
           glib:type-name="PkPackage"
           glib:get-type="pk_package_get_type"
           glib:type-struct="PkPackageClass">
      <constructor name="new" c:identifier="pk_package_new" version="0.5.4">
        <return-value transfer-ownership="full">
          <type name="PkPackage" c:type="PkPackage*"/>
        </return-value>
      </constructor>
      <function name="test" c:identifier="pk_package_test">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="user_data" transfer-ownership="none">
            <type name="any" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <function name="id_test" c:identifier="pk_package_id_test">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="user_data" transfer-ownership="none">
            <type name="any" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <function name="id_build"
                c:identifier="pk_package_id_build"
                version="0.5.0">
        <return-value transfer-ownership="full">
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <parameter name="name" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="version" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="arch" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="data" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </function>
      <function name="id_check"
                c:identifier="pk_package_id_check"
                version="0.5.0">
        <return-value transfer-ownership="none">
          <type name="boolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="package_id" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </function>
      <function name="id_split"
                c:identifier="pk_package_id_split"
                doc="Splits a PackageID into the correct number of parts, checking the correct
number of delimiters are present."
                version="0.5.3">
        <return-value transfer-ownership="full" doc="to free">
          <array c:type="gchar**">
            <type name="utf8"/>
          </array>
        </return-value>
        <parameters>
          <parameter name="package_id" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </function>
      <function name="id_to_printable"
                c:identifier="pk_package_id_to_printable"
                doc="Formats the PackageID to be printable to the user."
                version="0.5.2">
        <return-value transfer-ownership="full" doc="to free.">
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <parameter name="package_id" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </function>
      <function name="id_equal_fuzzy_arch"
                c:identifier="pk_package_id_equal_fuzzy_arch"
                doc="Only compare the name, version, and arch, where the architecture will fuzzy
match with i*86."
                version="0.5.0">
        <return-value transfer-ownership="none">
          <type name="boolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="package_id1" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="package_id2" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </function>
      <function name="ids_test" c:identifier="pk_package_ids_test">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="user_data" transfer-ownership="none">
            <type name="any" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <function name="ids_from_id"
                c:identifier="pk_package_ids_from_id"
                doc="Form a composite string array of package_id&apos;s from
a single package_id"
                version="0.5.2">
        <return-value transfer-ownership="full">
          <array c:type="gchar**">
            <type name="utf8"/>
          </array>
        </return-value>
        <parameters>
          <parameter name="package_id" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </function>
      <function name="ids_from_string"
                c:identifier="pk_package_ids_from_string"
                doc="Form a composite string array of package_id&apos;s from
a delimited string"
                version="0.5.2">
        <return-value transfer-ownership="full">
          <array c:type="gchar**">
            <type name="utf8"/>
          </array>
        </return-value>
        <parameters>
          <parameter name="package_id" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </function>
      <function name="ids_check"
                c:identifier="pk_package_ids_check"
                doc="Check the string array of package_id&apos;s for validity"
                version="0.5.2">
        <return-value transfer-ownership="none">
          <type name="boolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="package_ids" transfer-ownership="none">
            <array c:type="gchar**">
              <type name="utf8"/>
            </array>
          </parameter>
        </parameters>
      </function>
      <function name="ids_to_string"
                c:identifier="pk_package_ids_to_string"
                doc="Cats the string array of package_id&apos;s into one delimited string"
                version="0.5.2">
        <return-value transfer-ownership="full">
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <parameter name="package_ids" transfer-ownership="none">
            <array c:type="gchar**">
              <type name="utf8"/>
            </array>
          </parameter>
        </parameters>
      </function>
      <function name="ids_present_id"
                c:identifier="pk_package_ids_present_id"
                doc="Finds out if a package ID is present in the list."
                version="0.5.2">
        <return-value transfer-ownership="none">
          <type name="boolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="package_ids" transfer-ownership="none">
            <array c:type="gchar**">
              <type name="utf8"/>
            </array>
          </parameter>
          <parameter name="package_id" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </function>
      <function name="ids_add_id"
                c:identifier="pk_package_ids_add_id"
                doc="Adds a package_id to an existing list."
                version="0.5.2">
        <return-value transfer-ownership="full">
          <array c:type="gchar**">
            <type name="utf8"/>
          </array>
        </return-value>
        <parameters>
          <parameter name="package_ids" transfer-ownership="none">
            <array c:type="gchar**">
              <type name="utf8"/>
            </array>
          </parameter>
          <parameter name="package_id" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </function>
      <function name="ids_add_ids"
                c:identifier="pk_package_ids_add_ids"
                doc="Adds a package_id to an existing list."
                version="0.5.2">
        <return-value transfer-ownership="full">
          <array c:type="gchar**">
            <type name="utf8"/>
          </array>
        </return-value>
        <parameters>
          <parameter name="package_ids" transfer-ownership="none">
            <array c:type="gchar**">
              <type name="utf8"/>
            </array>
          </parameter>
          <parameter name="package_ids_new" transfer-ownership="none">
            <array c:type="gchar**">
              <type name="utf8"/>
            </array>
          </parameter>
        </parameters>
      </function>
      <function name="ids_remove_id"
                c:identifier="pk_package_ids_remove_id"
                doc="Removes a package ID from the the list."
                version="0.5.2">
        <return-value transfer-ownership="full">
          <array c:type="gchar**">
            <type name="utf8"/>
          </array>
        </return-value>
        <parameters>
          <parameter name="package_ids" transfer-ownership="none">
            <array c:type="gchar**">
              <type name="utf8"/>
            </array>
          </parameter>
          <parameter name="package_id" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </function>
      <method name="set_id"
              c:identifier="pk_package_set_id"
              doc="Sets the package object to have the given ID"
              version="0.5.4"
              throws="1">
        <return-value transfer-ownership="none">
          <type name="boolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="package_id" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_id"
              c:identifier="pk_package_get_id"
              doc="Gets the package object ID"
              version="0.5.4">
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="gchar*"/>
        </return-value>
      </method>
      <method name="get_info"
              c:identifier="pk_package_get_info"
              doc="Gets the package object ID"
              version="0.5.4">
        <return-value transfer-ownership="full">
          <type name="PkInfoEnum" c:type="PkInfoEnum"/>
        </return-value>
      </method>
      <method name="get_summary"
              c:identifier="pk_package_get_summary"
              doc="Gets the package object ID"
              version="0.5.4">
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="gchar*"/>
        </return-value>
      </method>
      <method name="print"
              c:identifier="pk_package_print"
              doc="Prints details about the package to standard out."
              version="0.5.4">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </method>
      <method name="equal"
              c:identifier="pk_package_equal"
              doc="Do the #PkPackage&apos;s have the same ID."
              version="0.5.4">
        <return-value transfer-ownership="none">
          <type name="boolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="package2" transfer-ownership="none">
            <type name="PkPackage" c:type="PkPackage*"/>
          </parameter>
        </parameters>
      </method>
      <method name="equal_id"
              c:identifier="pk_package_equal_id"
              doc="Do the #PkPackage&apos;s have the same ID."
              version="0.5.4">
        <return-value transfer-ownership="none">
          <type name="boolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="package2" transfer-ownership="none">
            <type name="PkPackage" c:type="PkPackage*"/>
          </parameter>
        </parameters>
      </method>
      <property name="description" writable="1">
        <type name="utf8" c:type="gchararray"/>
      </property>
      <property name="group" writable="1">
        <type name="uint" c:type="guint"/>
      </property>
      <property name="info" writable="1">
        <type name="uint" c:type="guint"/>
      </property>
      <property name="license" writable="1">
        <type name="utf8" c:type="gchararray"/>
      </property>
      <property name="package-id" writable="1">
        <type name="utf8" c:type="gchararray"/>
      </property>
      <property name="size" writable="1">
        <type name="uint64" c:type="guint64"/>
      </property>
      <property name="summary" writable="1">
        <type name="utf8" c:type="gchararray"/>
      </property>
      <property name="update-bugzilla-url" writable="1">
        <type name="utf8" c:type="gchararray"/>
      </property>
      <property name="update-changelog" writable="1">
        <type name="utf8" c:type="gchararray"/>
      </property>
      <property name="update-cve-url" writable="1">
        <type name="utf8" c:type="gchararray"/>
      </property>
      <property name="update-issued" writable="1">
        <type name="utf8" c:type="gchararray"/>
      </property>
      <property name="update-obsoletes" writable="1">
        <type name="utf8" c:type="gchararray"/>
      </property>
      <property name="update-restart" writable="1">
        <type name="uint" c:type="guint"/>
      </property>
      <property name="update-state" writable="1">
        <type name="uint" c:type="guint"/>
      </property>
      <property name="update-text" writable="1">
        <type name="utf8" c:type="gchararray"/>
      </property>
      <property name="update-updated" writable="1">
        <type name="utf8" c:type="gchararray"/>
      </property>
      <property name="update-updates" writable="1">
        <type name="utf8" c:type="gchararray"/>
      </property>
      <property name="update-vendor-url" writable="1">
        <type name="utf8" c:type="gchararray"/>
      </property>
      <property name="url" writable="1">
        <type name="utf8" c:type="gchararray"/>
      </property>
      <field name="parent">
        <type name="PkSource" c:type="PkSource"/>
      </field>
      <field name="priv">
        <type name="PkPackagePrivate" c:type="PkPackagePrivate*"/>
      </field>
      <glib:signal name="changed">
        <return-value transfer-ownership="full">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
    </class>
    <record name="PkPackageClass"
            c:type="PkPackageClass"
            glib:is-gtype-struct-for="PkPackage">
      <field name="parent_class">
        <type name="PkSourceClass" c:type="PkSourceClass"/>
      </field>
      <field name="changed">
        <callback name="changed" c:type="changed">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="package" transfer-ownership="none">
              <type name="PkPackage" c:type="PkPackage*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="pk_reserved1">
        <callback name="pk_reserved1" c:type="_pk_reserved1">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="pk_reserved2">
        <callback name="pk_reserved2" c:type="_pk_reserved2">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="pk_reserved3">
        <callback name="pk_reserved3" c:type="_pk_reserved3">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="pk_reserved4">
        <callback name="pk_reserved4" c:type="_pk_reserved4">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="pk_reserved5">
        <callback name="pk_reserved5" c:type="_pk_reserved5">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
    </record>
    <record name="PkPackagePrivate"
            c:type="PkPackagePrivate"
            doc="Private #PkPackage data">
    </record>
    <class name="PkPackageSack"
           c:type="PkPackageSack"
           parent="GObject.Object"
           glib:type-name="PkPackageSack"
           glib:get-type="pk_package_sack_get_type"
           glib:type-struct="PkPackageSackClass">
      <constructor name="new"
                   c:identifier="pk_package_sack_new"
                   version="0.5.2">
        <return-value transfer-ownership="full">
          <type name="PkPackageSack" c:type="PkPackageSack*"/>
        </return-value>
      </constructor>
      <function name="test" c:identifier="pk_package_sack_test">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="user_data" transfer-ownership="none">
            <type name="any" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <virtual-method name="changed">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </virtual-method>
      <method name="clear"
              c:identifier="pk_package_sack_clear"
              doc="Empty all the packages from the sack"
              version="0.5.2">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </method>
      <method name="get_ids"
              c:identifier="pk_package_sack_get_ids"
              doc="Returns all the Package IDs in the sack"
              version="0.5.3">
        <return-value transfer-ownership="full">
          <array c:type="gchar**">
            <type name="utf8"/>
          </array>
        </return-value>
      </method>
      <method name="get_array"
              c:identifier="pk_package_sack_get_array"
              doc="Gets the package array from the sack"
              version="0.6.1">
        <return-value transfer-ownership="full">
          <type name="GLib.PtrArray" c:type="GPtrArray*"/>
        </return-value>
      </method>
      <method name="sort" c:identifier="pk_package_sack_sort">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="type" transfer-ownership="none">
            <type name="PkPackageSackSortType" c:type="PkPackageSackSortType"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_package"
              c:identifier="pk_package_sack_add_package"
              doc="Adds a package to the sack."
              version="0.5.2">
        <return-value transfer-ownership="none">
          <type name="boolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="package" transfer-ownership="none">
            <type name="PkPackage" c:type="PkPackage*"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_package_by_id"
              c:identifier="pk_package_sack_add_package_by_id"
              doc="Adds a package reference to the sack."
              version="0.5.2"
              throws="1">
        <return-value transfer-ownership="none">
          <type name="boolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="package_id" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="remove_package"
              c:identifier="pk_package_sack_remove_package"
              doc="Removes a package reference from the sack. The pointers have to match exactly."
              version="0.5.2">
        <return-value transfer-ownership="none">
          <type name="boolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="package" transfer-ownership="none">
            <type name="PkPackage" c:type="PkPackage*"/>
          </parameter>
        </parameters>
      </method>
      <method name="remove_package_by_id"
              c:identifier="pk_package_sack_remove_package_by_id"
              doc="Removes a package reference from the sack. As soon as one package is removed
the search is stopped."
              version="0.5.2">
        <return-value transfer-ownership="none">
          <type name="boolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="package_id" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="find_by_id"
              c:identifier="pk_package_sack_find_by_id"
              doc="Finds a package in a sack from reference. As soon as one package is found
the search is stopped."
              version="0.5.2">
        <return-value transfer-ownership="full">
          <type name="PkPackage" c:type="PkPackage*"/>
        </return-value>
        <parameters>
          <parameter name="package_id" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_total_bytes"
              c:identifier="pk_package_sack_get_total_bytes"
              doc="Gets the total size of the package sack in bytes."
              version="0.5.2">
        <return-value transfer-ownership="none">
          <type name="uint64" c:type="guint64"/>
        </return-value>
      </method>
      <method name="merge_generic_finish"
              c:identifier="pk_package_sack_merge_generic_finish"
              doc="Gets the result from the asynchronous function."
              version="0.5.2"
              throws="1">
        <return-value transfer-ownership="none">
          <type name="boolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="res" transfer-ownership="none">
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="resolve_async"
              c:identifier="pk_package_sack_resolve_async"
              doc="Merges in details about packages using resolve."
              version="0.5.2">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="cancellable" transfer-ownership="none">
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="progress_callback"
                     transfer-ownership="none"
                     scope="call"
                     closure="3">
            <type name="PkProgressCallback" c:type="PkProgressCallback"/>
          </parameter>
          <parameter name="progress_user_data" transfer-ownership="none">
            <type name="any" c:type="gpointer"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     scope="async"
                     closure="5">
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data" transfer-ownership="none">
            <type name="any" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_details_async"
              c:identifier="pk_package_sack_get_details_async"
              doc="Merges in details about packages.">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="cancellable" transfer-ownership="none">
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="progress_callback"
                     transfer-ownership="none"
                     scope="call"
                     closure="3">
            <type name="PkProgressCallback" c:type="PkProgressCallback"/>
          </parameter>
          <parameter name="progress_user_data" transfer-ownership="none">
            <type name="any" c:type="gpointer"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     scope="async"
                     closure="5">
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data" transfer-ownership="none">
            <type name="any" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_update_detail_async"
              c:identifier="pk_package_sack_get_update_detail_async"
              doc="Merges in update details about packages."
              version="0.5.2">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="cancellable" transfer-ownership="none">
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="progress_callback"
                     transfer-ownership="none"
                     scope="call"
                     closure="3">
            <type name="PkProgressCallback" c:type="PkProgressCallback"/>
          </parameter>
          <parameter name="progress_user_data" transfer-ownership="none">
            <type name="any" c:type="gpointer"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     scope="async"
                     closure="5">
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data" transfer-ownership="none">
            <type name="any" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="resolve"
              c:identifier="pk_package_sack_resolve"
              doc="Gets the properties the daemon supports.
applications."
              version="0.6.0"
              throws="1">
        <return-value transfer-ownership="none">
          <type name="boolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="cancellable" transfer-ownership="none">
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_details"
              c:identifier="pk_package_sack_get_details"
              doc="Gets the properties the daemon supports.
applications."
              version="0.6.0"
              throws="1">
        <return-value transfer-ownership="none">
          <type name="boolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="cancellable" transfer-ownership="none">
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_update_detail"
              c:identifier="pk_package_sack_get_update_detail"
              doc="Gets the properties the daemon supports.
applications."
              version="0.6.0"
              throws="1">
        <return-value transfer-ownership="none">
          <type name="boolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="cancellable" transfer-ownership="none">
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <field name="parent">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="priv">
        <type name="PkPackageSackPrivate" c:type="PkPackageSackPrivate*"/>
      </field>
    </class>
    <record name="PkPackageSackClass"
            c:type="PkPackageSackClass"
            glib:is-gtype-struct-for="PkPackageSack">
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="changed">
        <callback name="changed" c:type="changed">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="sack" transfer-ownership="none">
              <type name="PkPackageSack" c:type="PkPackageSack*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="pk_reserved1">
        <callback name="pk_reserved1" c:type="_pk_reserved1">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="pk_reserved2">
        <callback name="pk_reserved2" c:type="_pk_reserved2">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="pk_reserved3">
        <callback name="pk_reserved3" c:type="_pk_reserved3">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="pk_reserved4">
        <callback name="pk_reserved4" c:type="_pk_reserved4">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="pk_reserved5">
        <callback name="pk_reserved5" c:type="_pk_reserved5">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
    </record>
    <record name="PkPackageSackPrivate"
            c:type="PkPackageSackPrivate"
            doc="Private #PkPackageSack data">
    </record>
    <record name="PkPackageSackResults" c:type="PkPackageSackResults">
    </record>
    <enumeration name="PkPackageSackSortType" c:type="PkPackageSackSortType">
      <member name="name"
              value="0"
              c:identifier="PK_PACKAGE_SACK_SORT_TYPE_NAME"/>
      <member name="info"
              value="1"
              c:identifier="PK_PACKAGE_SACK_SORT_TYPE_INFO"/>
      <member name="package_id"
              value="2"
              c:identifier="PK_PACKAGE_SACK_SORT_TYPE_PACKAGE_ID"/>
      <member name="summary"
              value="3"
              c:identifier="PK_PACKAGE_SACK_SORT_TYPE_SUMMARY"/>
      <member name="last"
              value="4"
              c:identifier="PK_PACKAGE_SACK_SORT_TYPE_LAST"/>
    </enumeration>
    <class name="PkProgress"
           c:type="PkProgress"
           parent="GObject.Object"
           glib:type-name="PkProgress"
           glib:get-type="pk_progress_get_type"
           glib:type-struct="PkProgressClass">
      <constructor name="new"
                   c:identifier="pk_progress_new"
                   doc="PkProgress is a nice GObject wrapper for PackageKit and makes writing
frontends easy."
                   version="0.5.2">
        <return-value transfer-ownership="full">
          <type name="PkProgress" c:type="PkProgress*"/>
        </return-value>
      </constructor>
      <function name="test" c:identifier="pk_progress_test">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="user_data" transfer-ownership="none">
            <type name="any" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <method name="set_package_id"
              c:identifier="pk_progress_set_package_id"
              version="0.5.2">
        <return-value transfer-ownership="none">
          <type name="boolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="package_id" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_transaction_id"
              c:identifier="pk_progress_set_transaction_id"
              version="0.5.3">
        <return-value transfer-ownership="none">
          <type name="boolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="package_id" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_percentage"
              c:identifier="pk_progress_set_percentage"
              version="0.5.2">
        <return-value transfer-ownership="none">
          <type name="boolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="percentage" transfer-ownership="none">
            <type name="int" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_subpercentage"
              c:identifier="pk_progress_set_subpercentage"
              version="0.5.2">
        <return-value transfer-ownership="none">
          <type name="boolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="subpercentage" transfer-ownership="none">
            <type name="int" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_status"
              c:identifier="pk_progress_set_status"
              version="0.5.2">
        <return-value transfer-ownership="none">
          <type name="boolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="status" transfer-ownership="none">
            <type name="PkStatusEnum" c:type="PkStatusEnum"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_role"
              c:identifier="pk_progress_set_role"
              version="0.5.2">
        <return-value transfer-ownership="none">
          <type name="boolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="role" transfer-ownership="none">
            <type name="PkRoleEnum" c:type="PkRoleEnum"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_allow_cancel"
              c:identifier="pk_progress_set_allow_cancel"
              version="0.5.2">
        <return-value transfer-ownership="none">
          <type name="boolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="allow_cancel" transfer-ownership="none">
            <type name="boolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_caller_active"
              c:identifier="pk_progress_set_caller_active"
              version="0.5.2">
        <return-value transfer-ownership="none">
          <type name="boolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="caller_active" transfer-ownership="none">
            <type name="boolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_elapsed_time"
              c:identifier="pk_progress_set_elapsed_time"
              version="0.5.2">
        <return-value transfer-ownership="none">
          <type name="boolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="elapsed_time" transfer-ownership="none">
            <type name="uint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_remaining_time"
              c:identifier="pk_progress_set_remaining_time"
              version="0.5.2">
        <return-value transfer-ownership="none">
          <type name="boolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="remaining_time" transfer-ownership="none">
            <type name="uint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_speed"
              c:identifier="pk_progress_set_speed"
              version="0.5.2">
        <return-value transfer-ownership="none">
          <type name="boolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="speed" transfer-ownership="none">
            <type name="uint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_uid"
              c:identifier="pk_progress_set_uid"
              version="0.5.2">
        <return-value transfer-ownership="none">
          <type name="boolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="uid" transfer-ownership="none">
            <type name="uint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_package"
              c:identifier="pk_progress_set_package"
              version="0.5.2">
        <return-value transfer-ownership="none">
          <type name="boolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="package" transfer-ownership="none">
            <type name="PkPackage" c:type="PkPackage*"/>
          </parameter>
        </parameters>
      </method>
      <property name="allow-cancel" writable="1">
        <type name="boolean" c:type="gboolean"/>
      </property>
      <property name="caller-active" writable="1">
        <type name="boolean" c:type="gboolean"/>
      </property>
      <property name="elapsed-time" writable="1">
        <type name="uint" c:type="guint"/>
      </property>
      <property name="package" writable="1">
        <type name="PkPackage" c:type="PkPackage"/>
      </property>
      <property name="package-id" writable="1">
        <type name="utf8" c:type="gchararray"/>
      </property>
      <property name="percentage" writable="1">
        <type name="int" c:type="gint"/>
      </property>
      <property name="remaining-time" writable="1">
        <type name="uint" c:type="guint"/>
      </property>
      <property name="role" writable="1">
        <type name="uint" c:type="guint"/>
      </property>
      <property name="speed" writable="1">
        <type name="uint" c:type="guint"/>
      </property>
      <property name="status" writable="1">
        <type name="uint" c:type="guint"/>
      </property>
      <property name="subpercentage" writable="1">
        <type name="int" c:type="gint"/>
      </property>
      <property name="transaction-id" writable="1">
        <type name="utf8" c:type="gchararray"/>
      </property>
      <property name="uid" writable="1">
        <type name="uint" c:type="guint"/>
      </property>
      <field name="parent">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="priv">
        <type name="PkProgressPrivate" c:type="PkProgressPrivate*"/>
      </field>
    </class>
    <callback name="PkProgressCallback" c:type="PkProgressCallback">
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="progress" transfer-ownership="none">
          <type name="PkProgress" c:type="PkProgress*"/>
        </parameter>
        <parameter name="type" transfer-ownership="none">
          <type name="PkProgressType" c:type="PkProgressType"/>
        </parameter>
        <parameter name="user_data" transfer-ownership="none" closure="2">
          <type name="any" c:type="gpointer"/>
        </parameter>
      </parameters>
    </callback>
    <record name="PkProgressClass"
            c:type="PkProgressClass"
            glib:is-gtype-struct-for="PkProgress">
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="pk_reserved1">
        <callback name="pk_reserved1" c:type="_pk_reserved1">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="pk_reserved2">
        <callback name="pk_reserved2" c:type="_pk_reserved2">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="pk_reserved3">
        <callback name="pk_reserved3" c:type="_pk_reserved3">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="pk_reserved4">
        <callback name="pk_reserved4" c:type="_pk_reserved4">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="pk_reserved5">
        <callback name="pk_reserved5" c:type="_pk_reserved5">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
    </record>
    <record name="PkProgressPrivate"
            c:type="PkProgressPrivate"
            doc="Private #PkProgress data">
    </record>
    <enumeration name="PkProgressType" c:type="PkProgressType">
      <member name="package_id"
              value="0"
              c:identifier="PK_PROGRESS_TYPE_PACKAGE_ID"/>
      <member name="transaction_id"
              value="1"
              c:identifier="PK_PROGRESS_TYPE_TRANSACTION_ID"/>
      <member name="percentage"
              value="2"
              c:identifier="PK_PROGRESS_TYPE_PERCENTAGE"/>
      <member name="subpercentage"
              value="3"
              c:identifier="PK_PROGRESS_TYPE_SUBPERCENTAGE"/>
      <member name="allow_cancel"
              value="4"
              c:identifier="PK_PROGRESS_TYPE_ALLOW_CANCEL"/>
      <member name="status" value="5" c:identifier="PK_PROGRESS_TYPE_STATUS"/>
      <member name="role" value="6" c:identifier="PK_PROGRESS_TYPE_ROLE"/>
      <member name="caller_active"
              value="7"
              c:identifier="PK_PROGRESS_TYPE_CALLER_ACTIVE"/>
      <member name="elapsed_time"
              value="8"
              c:identifier="PK_PROGRESS_TYPE_ELAPSED_TIME"/>
      <member name="remaining_time"
              value="9"
              c:identifier="PK_PROGRESS_TYPE_REMAINING_TIME"/>
      <member name="speed" value="10" c:identifier="PK_PROGRESS_TYPE_SPEED"/>
      <member name="uid" value="11" c:identifier="PK_PROGRESS_TYPE_UID"/>
      <member name="package"
              value="12"
              c:identifier="PK_PROGRESS_TYPE_PACKAGE"/>
      <member name="invalid"
              value="13"
              c:identifier="PK_PROGRESS_TYPE_INVALID"/>
    </enumeration>
    <enumeration name="PkProvidesEnum"
                 doc="The signature type type"
                 c:type="PkProvidesEnum">
      <member name="unknown"
              value="0"
              c:identifier="PK_PROVIDES_ENUM_UNKNOWN"/>
      <member name="any" value="1" c:identifier="PK_PROVIDES_ENUM_ANY"/>
      <member name="modalias"
              value="2"
              c:identifier="PK_PROVIDES_ENUM_MODALIAS"/>
      <member name="codec" value="3" c:identifier="PK_PROVIDES_ENUM_CODEC"/>
      <member name="mimetype"
              value="4"
              c:identifier="PK_PROVIDES_ENUM_MIMETYPE"/>
      <member name="font" value="5" c:identifier="PK_PROVIDES_ENUM_FONT"/>
      <member name="hardware_driver"
              value="6"
              c:identifier="PK_PROVIDES_ENUM_HARDWARE_DRIVER"/>
      <member name="postscript_driver"
              value="7"
              c:identifier="PK_PROVIDES_ENUM_POSTSCRIPT_DRIVER"/>
      <member name="last" value="8" c:identifier="PK_PROVIDES_ENUM_LAST"/>
    </enumeration>
    <class name="PkRepoDetail"
           c:type="PkRepoDetail"
           parent="PkSource"
           glib:type-name="PkRepoDetail"
           glib:get-type="pk_repo_detail_get_type"
           glib:type-struct="PkRepoDetailClass">
      <constructor name="new"
                   c:identifier="pk_repo_detail_new"
                   version="0.5.4">
        <return-value transfer-ownership="full">
          <type name="PkRepoDetail" c:type="PkRepoDetail*"/>
        </return-value>
      </constructor>
      <property name="description" writable="1">
        <type name="utf8" c:type="gchararray"/>
      </property>
      <property name="enabled" writable="1">
        <type name="boolean" c:type="gboolean"/>
      </property>
      <property name="repo-id" writable="1">
        <type name="utf8" c:type="gchararray"/>
      </property>
      <field name="parent">
        <type name="PkSource" c:type="PkSource"/>
      </field>
      <field name="priv">
        <type name="PkRepoDetailPrivate" c:type="PkRepoDetailPrivate*"/>
      </field>
    </class>
    <record name="PkRepoDetailClass"
            c:type="PkRepoDetailClass"
            glib:is-gtype-struct-for="PkRepoDetail">
      <field name="parent_class">
        <type name="PkSourceClass" c:type="PkSourceClass"/>
      </field>
      <field name="pk_reserved1">
        <callback name="pk_reserved1" c:type="_pk_reserved1">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="pk_reserved2">
        <callback name="pk_reserved2" c:type="_pk_reserved2">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="pk_reserved3">
        <callback name="pk_reserved3" c:type="_pk_reserved3">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="pk_reserved4">
        <callback name="pk_reserved4" c:type="_pk_reserved4">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="pk_reserved5">
        <callback name="pk_reserved5" c:type="_pk_reserved5">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
    </record>
    <record name="PkRepoDetailPrivate"
            c:type="PkRepoDetailPrivate"
            doc="Private #PkRepoDetail data">
    </record>
    <class name="PkRepoSignatureRequired"
           c:type="PkRepoSignatureRequired"
           parent="PkSource"
           glib:type-name="PkRepoSignatureRequired"
           glib:get-type="pk_repo_signature_required_get_type"
           glib:type-struct="PkRepoSignatureRequiredClass">
      <constructor name="new"
                   c:identifier="pk_repo_signature_required_new"
                   version="0.5.4">
        <return-value transfer-ownership="full">
          <type name="PkRepoSignatureRequired"
                c:type="PkRepoSignatureRequired*"/>
        </return-value>
      </constructor>
      <property name="key-fingerprint" writable="1">
        <type name="utf8" c:type="gchararray"/>
      </property>
      <property name="key-id" writable="1">
        <type name="utf8" c:type="gchararray"/>
      </property>
      <property name="key-timestamp" writable="1">
        <type name="utf8" c:type="gchararray"/>
      </property>
      <property name="key-url" writable="1">
        <type name="utf8" c:type="gchararray"/>
      </property>
      <property name="key-userid" writable="1">
        <type name="utf8" c:type="gchararray"/>
      </property>
      <property name="package-id" writable="1">
        <type name="utf8" c:type="gchararray"/>
      </property>
      <property name="repository-name" writable="1">
        <type name="utf8" c:type="gchararray"/>
      </property>
      <property name="type" writable="1">
        <type name="uint" c:type="guint"/>
      </property>
      <field name="parent">
        <type name="PkSource" c:type="PkSource"/>
      </field>
      <field name="priv">
        <type name="PkRepoSignatureRequiredPrivate"
              c:type="PkRepoSignatureRequiredPrivate*"/>
      </field>
    </class>
    <record name="PkRepoSignatureRequiredClass"
            c:type="PkRepoSignatureRequiredClass"
            glib:is-gtype-struct-for="PkRepoSignatureRequired">
      <field name="parent_class">
        <type name="PkSourceClass" c:type="PkSourceClass"/>
      </field>
      <field name="pk_reserved1">
        <callback name="pk_reserved1" c:type="_pk_reserved1">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="pk_reserved2">
        <callback name="pk_reserved2" c:type="_pk_reserved2">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="pk_reserved3">
        <callback name="pk_reserved3" c:type="_pk_reserved3">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="pk_reserved4">
        <callback name="pk_reserved4" c:type="_pk_reserved4">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="pk_reserved5">
        <callback name="pk_reserved5" c:type="_pk_reserved5">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
    </record>
    <record name="PkRepoSignatureRequiredPrivate"
            c:type="PkRepoSignatureRequiredPrivate"
            doc="Private #PkRepoSignatureRequired data">
    </record>
    <class name="PkRequireRestart"
           c:type="PkRequireRestart"
           parent="PkSource"
           glib:type-name="PkRequireRestart"
           glib:get-type="pk_require_restart_get_type"
           glib:type-struct="PkRequireRestartClass">
      <constructor name="new"
                   c:identifier="pk_require_restart_new"
                   version="0.5.4">
        <return-value transfer-ownership="full">
          <type name="PkRequireRestart" c:type="PkRequireRestart*"/>
        </return-value>
      </constructor>
      <property name="package-id" writable="1">
        <type name="utf8" c:type="gchararray"/>
      </property>
      <property name="restart" writable="1">
        <type name="uint" c:type="guint"/>
      </property>
      <field name="parent">
        <type name="PkSource" c:type="PkSource"/>
      </field>
      <field name="priv">
        <type name="PkRequireRestartPrivate"
              c:type="PkRequireRestartPrivate*"/>
      </field>
    </class>
    <record name="PkRequireRestartClass"
            c:type="PkRequireRestartClass"
            glib:is-gtype-struct-for="PkRequireRestart">
      <field name="parent_class">
        <type name="PkSourceClass" c:type="PkSourceClass"/>
      </field>
      <field name="pk_reserved1">
        <callback name="pk_reserved1" c:type="_pk_reserved1">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="pk_reserved2">
        <callback name="pk_reserved2" c:type="_pk_reserved2">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="pk_reserved3">
        <callback name="pk_reserved3" c:type="_pk_reserved3">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="pk_reserved4">
        <callback name="pk_reserved4" c:type="_pk_reserved4">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="pk_reserved5">
        <callback name="pk_reserved5" c:type="_pk_reserved5">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
    </record>
    <record name="PkRequireRestartPrivate"
            c:type="PkRequireRestartPrivate"
            doc="Private #PkRequireRestart data">
    </record>
    <enumeration name="PkRestartEnum"
                 doc="What restart we need to after a transaction, ordered by severity"
                 c:type="PkRestartEnum">
      <member name="unknown" value="0" c:identifier="PK_RESTART_ENUM_UNKNOWN"/>
      <member name="none" value="1" c:identifier="PK_RESTART_ENUM_NONE"/>
      <member name="application"
              value="2"
              c:identifier="PK_RESTART_ENUM_APPLICATION"/>
      <member name="session" value="3" c:identifier="PK_RESTART_ENUM_SESSION"/>
      <member name="system" value="4" c:identifier="PK_RESTART_ENUM_SYSTEM"/>
      <member name="security_session"
              value="5"
              c:identifier="PK_RESTART_ENUM_SECURITY_SESSION"/>
      <member name="security_system"
              value="6"
              c:identifier="PK_RESTART_ENUM_SECURITY_SYSTEM"/>
      <member name="last" value="7" c:identifier="PK_RESTART_ENUM_LAST"/>
    </enumeration>
    <class name="PkResults"
           c:type="PkResults"
           parent="GObject.Object"
           glib:type-name="PkResults"
           glib:get-type="pk_results_get_type"
           glib:type-struct="PkResultsClass">
      <constructor name="new" c:identifier="pk_results_new" version="0.5.2">
        <return-value transfer-ownership="full">
          <type name="PkResults" c:type="PkResults*"/>
        </return-value>
      </constructor>
      <function name="test" c:identifier="pk_results_test">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="user_data" transfer-ownership="none">
            <type name="any" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <method name="set_exit_code"
              c:identifier="pk_results_set_exit_code"
              doc="Sets the results object to have the given exit code."
              version="0.5.2">
        <return-value transfer-ownership="none">
          <type name="boolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="exit_enum" transfer-ownership="none">
            <type name="PkExitEnum" c:type="PkExitEnum"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_error_code"
              c:identifier="pk_results_set_error_code"
              doc="Adds some error details to the results set."
              version="0.5.2">
        <return-value transfer-ownership="none">
          <type name="boolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="item" transfer-ownership="none">
            <type name="PkError" c:type="PkError*"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_package"
              c:identifier="pk_results_add_package"
              doc="Adds a package to the results set."
              version="0.5.3">
        <return-value transfer-ownership="none">
          <type name="boolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="item" transfer-ownership="none">
            <type name="PkPackage" c:type="PkPackage*"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_details"
              c:identifier="pk_results_add_details"
              doc="Adds some package details to the results set."
              version="0.5.2">
        <return-value transfer-ownership="none">
          <type name="boolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="item" transfer-ownership="none">
            <type name="PkDetails" c:type="PkDetails*"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_update_detail"
              c:identifier="pk_results_add_update_detail"
              doc="Adds some update details to the results set."
              version="0.5.2">
        <return-value transfer-ownership="none">
          <type name="boolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="item" transfer-ownership="none">
            <type name="PkUpdateDetail" c:type="PkUpdateDetail*"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_category"
              c:identifier="pk_results_add_category"
              doc="Adds a category item to the results set."
              version="0.5.2">
        <return-value transfer-ownership="none">
          <type name="boolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="item" transfer-ownership="none">
            <type name="PkCategory" c:type="PkCategory*"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_distro_upgrade"
              c:identifier="pk_results_add_distro_upgrade"
              doc="Adds a distribution upgrade item to the results set."
              version="0.5.2">
        <return-value transfer-ownership="none">
          <type name="boolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="item" transfer-ownership="none">
            <type name="PkDistroUpgrade" c:type="PkDistroUpgrade*"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_require_restart"
              c:identifier="pk_results_add_require_restart"
              doc="Adds a require restart item to the results set."
              version="0.5.2">
        <return-value transfer-ownership="none">
          <type name="boolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="item" transfer-ownership="none">
            <type name="PkRequireRestart" c:type="PkRequireRestart*"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_transaction"
              c:identifier="pk_results_add_transaction"
              doc="Adds a transaction item to the results set."
              version="0.5.2">
        <return-value transfer-ownership="none">
          <type name="boolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="item" transfer-ownership="none">
            <type name="PkTransactionPast" c:type="PkTransactionPast*"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_files"
              c:identifier="pk_results_add_files"
              doc="Adds some files details to the results set."
              version="0.5.2">
        <return-value transfer-ownership="none">
          <type name="boolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="item" transfer-ownership="none">
            <type name="PkFiles" c:type="PkFiles*"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_repo_signature_required"
              c:identifier="pk_results_add_repo_signature_required"
              doc="Adds some repository signature details to the results set."
              version="0.5.2">
        <return-value transfer-ownership="none">
          <type name="boolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="item" transfer-ownership="none">
            <type name="PkRepoSignatureRequired"
                  c:type="PkRepoSignatureRequired*"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_eula_required"
              c:identifier="pk_results_add_eula_required"
              doc="Adds some EULA details to the results set."
              version="0.5.2">
        <return-value transfer-ownership="none">
          <type name="boolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="item" transfer-ownership="none">
            <type name="PkEulaRequired" c:type="PkEulaRequired*"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_media_change_required"
              c:identifier="pk_results_add_media_change_required"
              doc="Adds some media change details to the results set."
              version="0.5.2">
        <return-value transfer-ownership="none">
          <type name="boolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="item" transfer-ownership="none">
            <type name="PkMediaChangeRequired"
                  c:type="PkMediaChangeRequired*"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_repo_detail"
              c:identifier="pk_results_add_repo_detail"
              doc="Adds some repository details to the results set."
              version="0.5.2">
        <return-value transfer-ownership="none">
          <type name="boolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="item" transfer-ownership="none">
            <type name="PkRepoDetail" c:type="PkRepoDetail*"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_message"
              c:identifier="pk_results_add_message"
              doc="Adds some message details to the results set."
              version="0.5.2">
        <return-value transfer-ownership="none">
          <type name="boolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="item" transfer-ownership="none">
            <type name="PkMessage" c:type="PkMessage*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_exit_code"
              c:identifier="pk_results_get_exit_code"
              doc="Gets the exit enum. You probably don&apos;t want to be using this function, and
instead using the much more useful pk_results_get_error_code() function."
              version="0.5.2">
        <return-value transfer-ownership="full">
          <type name="PkExitEnum" c:type="PkExitEnum"/>
        </return-value>
      </method>
      <method name="get_package_sack"
              c:identifier="pk_results_get_package_sack"
              doc="Gets a package sack from the transaction."
              version="0.5.2">
        <return-value transfer-ownership="full">
          <type name="PkPackageSack" c:type="PkPackageSack*"/>
        </return-value>
      </method>
      <method name="get_error_code"
              c:identifier="pk_results_get_error_code"
              doc="Gets the last error code from the transaction."
              version="0.5.2">
        <return-value transfer-ownership="full">
          <type name="PkError" c:type="PkError*"/>
        </return-value>
      </method>
      <method name="get_require_restart_worst"
              c:identifier="pk_results_get_require_restart_worst"
              doc="This method returns the &apos;worst&apos; restart of all the transactions.
It is needed as multiple sub-transactions may emit require-restart with
different values, and we always want to get the most invasive of all.
For instance, if a transaction emits RequireRestart(system) and then
RequireRestart(session) then pk_client_get_require_restart will return
system as a session restart is implied with a system restart."
              version="0.5.2">
        <return-value transfer-ownership="full">
          <type name="PkRestartEnum" c:type="PkRestartEnum"/>
        </return-value>
      </method>
      <method name="get_package_array"
              c:identifier="pk_results_get_package_array"
              doc="Gets the packages from the transaction."
              version="0.5.2">
        <return-value transfer-ownership="full">
          <type name="GLib.PtrArray" c:type="GPtrArray*"/>
        </return-value>
      </method>
      <method name="get_details_array"
              c:identifier="pk_results_get_details_array"
              doc="Gets the package details from the transaction."
              version="0.5.2">
        <return-value transfer-ownership="full">
          <type name="GLib.PtrArray" c:type="GPtrArray*"/>
        </return-value>
      </method>
      <method name="get_update_detail_array"
              c:identifier="pk_results_get_update_detail_array"
              doc="Gets the update details from the transaction."
              version="0.5.2">
        <return-value transfer-ownership="full">
          <type name="GLib.PtrArray" c:type="GPtrArray*"/>
        </return-value>
      </method>
      <method name="get_category_array"
              c:identifier="pk_results_get_category_array"
              doc="Gets the categories from the transaction."
              version="0.5.2">
        <return-value transfer-ownership="full">
          <type name="GLib.PtrArray" c:type="GPtrArray*"/>
        </return-value>
      </method>
      <method name="get_distro_upgrade_array"
              c:identifier="pk_results_get_distro_upgrade_array"
              doc="Gets the distribution upgrades from the transaction."
              version="0.5.2">
        <return-value transfer-ownership="full">
          <type name="GLib.PtrArray" c:type="GPtrArray*"/>
        </return-value>
      </method>
      <method name="get_require_restart_array"
              c:identifier="pk_results_get_require_restart_array"
              doc="Gets the require restarts from the transaction."
              version="0.5.2">
        <return-value transfer-ownership="full">
          <type name="GLib.PtrArray" c:type="GPtrArray*"/>
        </return-value>
      </method>
      <method name="get_transaction_array"
              c:identifier="pk_results_get_transaction_array"
              doc="Gets the transactions from the transaction."
              version="0.5.2">
        <return-value transfer-ownership="full">
          <type name="GLib.PtrArray" c:type="GPtrArray*"/>
        </return-value>
      </method>
      <method name="get_files_array"
              c:identifier="pk_results_get_files_array"
              doc="Gets the files from the transaction."
              version="0.5.2">
        <return-value transfer-ownership="full">
          <type name="GLib.PtrArray" c:type="GPtrArray*"/>
        </return-value>
      </method>
      <method name="get_repo_signature_required_array"
              c:identifier="pk_results_get_repo_signature_required_array"
              doc="Gets the repository signatures required from the transaction."
              version="0.5.2">
        <return-value transfer-ownership="full">
          <type name="GLib.PtrArray" c:type="GPtrArray*"/>
        </return-value>
      </method>
      <method name="get_eula_required_array"
              c:identifier="pk_results_get_eula_required_array"
              doc="Gets the eulas required from the transaction."
              version="0.5.2">
        <return-value transfer-ownership="full">
          <type name="GLib.PtrArray" c:type="GPtrArray*"/>
        </return-value>
      </method>
      <method name="get_media_change_required_array"
              c:identifier="pk_results_get_media_change_required_array"
              doc="Gets the media changes required from the transaction."
              version="0.5.2">
        <return-value transfer-ownership="full">
          <type name="GLib.PtrArray" c:type="GPtrArray*"/>
        </return-value>
      </method>
      <method name="get_repo_detail_array"
              c:identifier="pk_results_get_repo_detail_array"
              doc="Gets the repository details from the transaction."
              version="0.5.2">
        <return-value transfer-ownership="full">
          <type name="GLib.PtrArray" c:type="GPtrArray*"/>
        </return-value>
      </method>
      <method name="get_message_array"
              c:identifier="pk_results_get_message_array"
              doc="Gets the messages from the transaction."
              version="0.5.2">
        <return-value transfer-ownership="full">
          <type name="GLib.PtrArray" c:type="GPtrArray*"/>
        </return-value>
      </method>
      <property name="inputs" writable="1">
        <type name="uint" c:type="guint"/>
      </property>
      <property name="progress" writable="1">
        <type name="PkProgress" c:type="PkProgress"/>
      </property>
      <property name="role" writable="1">
        <type name="uint" c:type="guint"/>
      </property>
      <field name="parent">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="priv">
        <type name="PkResultsPrivate" c:type="PkResultsPrivate*"/>
      </field>
    </class>
    <record name="PkResultsClass"
            c:type="PkResultsClass"
            glib:is-gtype-struct-for="PkResults">
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="pk_reserved1">
        <callback name="pk_reserved1" c:type="_pk_reserved1">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="pk_reserved2">
        <callback name="pk_reserved2" c:type="_pk_reserved2">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="pk_reserved3">
        <callback name="pk_reserved3" c:type="_pk_reserved3">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="pk_reserved4">
        <callback name="pk_reserved4" c:type="_pk_reserved4">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="pk_reserved5">
        <callback name="pk_reserved5" c:type="_pk_reserved5">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
    </record>
    <record name="PkResultsPrivate"
            c:type="PkResultsPrivate"
            doc="Private #PkResults data">
    </record>
    <enumeration name="PkRoleEnum"
                 doc="What we were asked to do, this never changes for the lifetime of the
transaction.
Icons that have to represent the whole &quot;aim&quot; of the transaction will use
these constants"
                 c:type="PkRoleEnum">
      <member name="unknown" value="0" c:identifier="PK_ROLE_ENUM_UNKNOWN"/>
      <member name="cancel" value="1" c:identifier="PK_ROLE_ENUM_CANCEL"/>
      <member name="get_depends"
              value="2"
              c:identifier="PK_ROLE_ENUM_GET_DEPENDS"/>
      <member name="get_details"
              value="3"
              c:identifier="PK_ROLE_ENUM_GET_DETAILS"/>
      <member name="get_files"
              value="4"
              c:identifier="PK_ROLE_ENUM_GET_FILES"/>
      <member name="get_packages"
              value="5"
              c:identifier="PK_ROLE_ENUM_GET_PACKAGES"/>
      <member name="get_repo_list"
              value="6"
              c:identifier="PK_ROLE_ENUM_GET_REPO_LIST"/>
      <member name="get_requires"
              value="7"
              c:identifier="PK_ROLE_ENUM_GET_REQUIRES"/>
      <member name="get_update_detail"
              value="8"
              c:identifier="PK_ROLE_ENUM_GET_UPDATE_DETAIL"/>
      <member name="get_updates"
              value="9"
              c:identifier="PK_ROLE_ENUM_GET_UPDATES"/>
      <member name="install_files"
              value="10"
              c:identifier="PK_ROLE_ENUM_INSTALL_FILES"/>
      <member name="install_packages"
              value="11"
              c:identifier="PK_ROLE_ENUM_INSTALL_PACKAGES"/>
      <member name="install_signature"
              value="12"
              c:identifier="PK_ROLE_ENUM_INSTALL_SIGNATURE"/>
      <member name="refresh_cache"
              value="13"
              c:identifier="PK_ROLE_ENUM_REFRESH_CACHE"/>
      <member name="remove_packages"
              value="14"
              c:identifier="PK_ROLE_ENUM_REMOVE_PACKAGES"/>
      <member name="repo_enable"
              value="15"
              c:identifier="PK_ROLE_ENUM_REPO_ENABLE"/>
      <member name="repo_set_data"
              value="16"
              c:identifier="PK_ROLE_ENUM_REPO_SET_DATA"/>
      <member name="resolve" value="17" c:identifier="PK_ROLE_ENUM_RESOLVE"/>
      <member name="rollback" value="18" c:identifier="PK_ROLE_ENUM_ROLLBACK"/>
      <member name="search_details"
              value="19"
              c:identifier="PK_ROLE_ENUM_SEARCH_DETAILS"/>
      <member name="search_file"
              value="20"
              c:identifier="PK_ROLE_ENUM_SEARCH_FILE"/>
      <member name="search_group"
              value="21"
              c:identifier="PK_ROLE_ENUM_SEARCH_GROUP"/>
      <member name="search_name"
              value="22"
              c:identifier="PK_ROLE_ENUM_SEARCH_NAME"/>
      <member name="update_packages"
              value="23"
              c:identifier="PK_ROLE_ENUM_UPDATE_PACKAGES"/>
      <member name="update_system"
              value="24"
              c:identifier="PK_ROLE_ENUM_UPDATE_SYSTEM"/>
      <member name="what_provides"
              value="25"
              c:identifier="PK_ROLE_ENUM_WHAT_PROVIDES"/>
      <member name="accept_eula"
              value="26"
              c:identifier="PK_ROLE_ENUM_ACCEPT_EULA"/>
      <member name="download_packages"
              value="27"
              c:identifier="PK_ROLE_ENUM_DOWNLOAD_PACKAGES"/>
      <member name="get_distro_upgrades"
              value="28"
              c:identifier="PK_ROLE_ENUM_GET_DISTRO_UPGRADES"/>
      <member name="get_categories"
              value="29"
              c:identifier="PK_ROLE_ENUM_GET_CATEGORIES"/>
      <member name="get_old_transactions"
              value="30"
              c:identifier="PK_ROLE_ENUM_GET_OLD_TRANSACTIONS"/>
      <member name="simulate_install_files"
              value="31"
              c:identifier="PK_ROLE_ENUM_SIMULATE_INSTALL_FILES"/>
      <member name="simulate_install_packages"
              value="32"
              c:identifier="PK_ROLE_ENUM_SIMULATE_INSTALL_PACKAGES"/>
      <member name="simulate_remove_packages"
              value="33"
              c:identifier="PK_ROLE_ENUM_SIMULATE_REMOVE_PACKAGES"/>
      <member name="simulate_update_packages"
              value="34"
              c:identifier="PK_ROLE_ENUM_SIMULATE_UPDATE_PACKAGES"/>
      <member name="last" value="35" c:identifier="PK_ROLE_ENUM_LAST"/>
    </enumeration>
    <class name="PkServicePack"
           c:type="PkServicePack"
           parent="GObject.Object"
           glib:type-name="PkServicePack"
           glib:get-type="pk_service_pack_get_type"
           glib:type-struct="PkServicePackClass">
      <constructor name="new"
                   c:identifier="pk_service_pack_new"
                   version="0.5.2">
        <return-value transfer-ownership="full">
          <type name="PkServicePack" c:type="PkServicePack*"/>
        </return-value>
      </constructor>
      <function name="test" c:identifier="pk_service_pack_test">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="user_data" transfer-ownership="none">
            <type name="any" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <method name="check_valid"
              c:identifier="pk_service_pack_check_valid"
              doc="Checks to see if a service pack file is valid, and usable with this system."
              version="0.5.2"
              throws="1">
        <return-value transfer-ownership="none">
          <type name="boolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="filename" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_temp_directory"
              c:identifier="pk_service_pack_set_temp_directory"
              doc="Sets the directory to use when decompressing the service pack"
              version="0.5.2">
        <return-value transfer-ownership="none">
          <type name="boolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="directory" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="generic_finish"
              c:identifier="pk_service_pack_generic_finish"
              doc="Gets the result from the asynchronous function."
              version="0.5.2"
              throws="1">
        <return-value transfer-ownership="none">
          <type name="boolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="res" transfer-ownership="none">
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="create_for_package_ids_async"
              c:identifier="pk_service_pack_create_for_package_ids_async"
              doc="Create a service pack for the specified Package IDs"
              version="0.5.2">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="filename" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="package_ids" transfer-ownership="none">
            <array c:type="gchar**">
              <type name="utf8"/>
            </array>
          </parameter>
          <parameter name="package_ids_exclude" transfer-ownership="none">
            <array c:type="gchar**">
              <type name="utf8"/>
            </array>
          </parameter>
          <parameter name="cancellable" transfer-ownership="none">
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="progress_callback"
                     transfer-ownership="none"
                     scope="call"
                     closure="6">
            <type name="PkProgressCallback" c:type="PkProgressCallback"/>
          </parameter>
          <parameter name="progress_user_data" transfer-ownership="none">
            <type name="any" c:type="gpointer"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     scope="async"
                     closure="8">
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data" transfer-ownership="none">
            <type name="any" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="create_for_updates_async"
              c:identifier="pk_service_pack_create_for_updates_async"
              doc="Create a service pack for the specified Package IDs"
              version="0.5.2">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="filename" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="package_ids_exclude" transfer-ownership="none">
            <array c:type="gchar**">
              <type name="utf8"/>
            </array>
          </parameter>
          <parameter name="cancellable" transfer-ownership="none">
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="progress_callback"
                     transfer-ownership="none"
                     scope="call"
                     closure="5">
            <type name="PkProgressCallback" c:type="PkProgressCallback"/>
          </parameter>
          <parameter name="progress_user_data" transfer-ownership="none">
            <type name="any" c:type="gpointer"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     scope="async"
                     closure="7">
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data" transfer-ownership="none">
            <type name="any" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <field name="parent">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="priv">
        <type name="PkServicePackPrivate" c:type="PkServicePackPrivate*"/>
      </field>
    </class>
    <record name="PkServicePackClass"
            c:type="PkServicePackClass"
            glib:is-gtype-struct-for="PkServicePack">
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="pk_reserved1">
        <callback name="pk_reserved1" c:type="_pk_reserved1">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="pk_reserved2">
        <callback name="pk_reserved2" c:type="_pk_reserved2">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="pk_reserved3">
        <callback name="pk_reserved3" c:type="_pk_reserved3">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="pk_reserved4">
        <callback name="pk_reserved4" c:type="_pk_reserved4">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
    </record>
    <enumeration name="PkServicePackError"
                 glib:type-name="PkServicePackError"
                 glib:get-type="pk_service_pack_error_get_type"
                 c:type="PkServicePackError"
                 glib:error-quark="pk_service_pack_error_quark">
      <member name="FailedSetup"
              value="0"
              c:identifier="PK_SERVICE_PACK_ERROR_FAILED_SETUP"
              glib:nick="FailedSetup"/>
      <member name="FailedDownload"
              value="1"
              c:identifier="PK_SERVICE_PACK_ERROR_FAILED_DOWNLOAD"
              glib:nick="FailedDownload"/>
      <member name="FailedExtraction"
              value="2"
              c:identifier="PK_SERVICE_PACK_ERROR_FAILED_EXTRACTION"
              glib:nick="FailedExtraction"/>
      <member name="FailedCreate"
              value="3"
              c:identifier="PK_SERVICE_PACK_ERROR_FAILED_CREATE"
              glib:nick="FailedCreate"/>
      <member name="NothingToDo"
              value="4"
              c:identifier="PK_SERVICE_PACK_ERROR_NOTHING_TO_DO"
              glib:nick="NothingToDo"/>
      <member name="NotCompatible"
              value="5"
              c:identifier="PK_SERVICE_PACK_ERROR_NOT_COMPATIBLE"
              glib:nick="NotCompatible"/>
    </enumeration>
    <record name="PkServicePackPrivate"
            c:type="PkServicePackPrivate"
            doc="Private #PkServicePack data">
    </record>
    <enumeration name="PkSigTypeEnum"
                 doc="The signature type type"
                 c:type="PkSigTypeEnum">
      <member name="unknown" value="0" c:identifier="PK_SIGTYPE_ENUM_UNKNOWN"/>
      <member name="gpg" value="1" c:identifier="PK_SIGTYPE_ENUM_GPG"/>
      <member name="last" value="2" c:identifier="PK_SIGTYPE_ENUM_LAST"/>
    </enumeration>
    <class name="PkSource"
           c:type="PkSource"
           parent="GObject.Object"
           glib:type-name="PkSource"
           glib:get-type="pk_source_get_type"
           glib:type-struct="PkSourceClass">
      <constructor name="new" c:identifier="pk_source_new" version="0.6.0">
        <return-value transfer-ownership="full">
          <type name="PkSource" c:type="PkSource*"/>
        </return-value>
      </constructor>
      <property name="role" writable="1">
        <type name="uint" c:type="guint"/>
      </property>
      <property name="transaction-id" writable="1">
        <type name="utf8" c:type="gchararray"/>
      </property>
      <field name="parent">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="priv">
        <type name="PkSourcePrivate" c:type="PkSourcePrivate*"/>
      </field>
    </class>
    <record name="PkSourceClass"
            c:type="PkSourceClass"
            glib:is-gtype-struct-for="PkSource">
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="pk_reserved1">
        <callback name="pk_reserved1" c:type="_pk_reserved1">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="pk_reserved2">
        <callback name="pk_reserved2" c:type="_pk_reserved2">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="pk_reserved3">
        <callback name="pk_reserved3" c:type="_pk_reserved3">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="pk_reserved4">
        <callback name="pk_reserved4" c:type="_pk_reserved4">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="pk_reserved5">
        <callback name="pk_reserved5" c:type="_pk_reserved5">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
    </record>
    <record name="PkSourcePrivate"
            c:type="PkSourcePrivate"
            doc="Private #PkSource data">
    </record>
    <enumeration name="PkStatusEnum"
                 doc="What status we are now; this can change for each transaction giving a
status of what sort of thing is happening
Icons that change to represent the current status of the transaction will
use these constants
If you add to these, make sure you add filenames in gpk-watch.c also
A typical transaction will do:
- schedule task
WAIT
- run task
SETUP
- wait for lock
RUNNING
This means that backends should run pk_backend_set_status (backend, PK_STATUS_ENUM_RUNNING)
when they are ready to start running the transaction and after a lock has been got."
                 c:type="PkStatusEnum">
      <member name="unknown" value="0" c:identifier="PK_STATUS_ENUM_UNKNOWN"/>
      <member name="wait" value="1" c:identifier="PK_STATUS_ENUM_WAIT"/>
      <member name="setup" value="2" c:identifier="PK_STATUS_ENUM_SETUP"/>
      <member name="running" value="3" c:identifier="PK_STATUS_ENUM_RUNNING"/>
      <member name="query" value="4" c:identifier="PK_STATUS_ENUM_QUERY"/>
      <member name="info" value="5" c:identifier="PK_STATUS_ENUM_INFO"/>
      <member name="remove" value="6" c:identifier="PK_STATUS_ENUM_REMOVE"/>
      <member name="refresh_cache"
              value="7"
              c:identifier="PK_STATUS_ENUM_REFRESH_CACHE"/>
      <member name="download"
              value="8"
              c:identifier="PK_STATUS_ENUM_DOWNLOAD"/>
      <member name="install" value="9" c:identifier="PK_STATUS_ENUM_INSTALL"/>
      <member name="update" value="10" c:identifier="PK_STATUS_ENUM_UPDATE"/>
      <member name="cleanup" value="11" c:identifier="PK_STATUS_ENUM_CLEANUP"/>
      <member name="obsolete"
              value="12"
              c:identifier="PK_STATUS_ENUM_OBSOLETE"/>
      <member name="dep_resolve"
              value="13"
              c:identifier="PK_STATUS_ENUM_DEP_RESOLVE"/>
      <member name="sig_check"
              value="14"
              c:identifier="PK_STATUS_ENUM_SIG_CHECK"/>
      <member name="rollback"
              value="15"
              c:identifier="PK_STATUS_ENUM_ROLLBACK"/>
      <member name="test_commit"
              value="16"
              c:identifier="PK_STATUS_ENUM_TEST_COMMIT"/>
      <member name="commit" value="17" c:identifier="PK_STATUS_ENUM_COMMIT"/>
      <member name="request" value="18" c:identifier="PK_STATUS_ENUM_REQUEST"/>
      <member name="finished"
              value="19"
              c:identifier="PK_STATUS_ENUM_FINISHED"/>
      <member name="cancel" value="20" c:identifier="PK_STATUS_ENUM_CANCEL"/>
      <member name="download_repository"
              value="21"
              c:identifier="PK_STATUS_ENUM_DOWNLOAD_REPOSITORY"/>
      <member name="download_packagelist"
              value="22"
              c:identifier="PK_STATUS_ENUM_DOWNLOAD_PACKAGELIST"/>
      <member name="download_filelist"
              value="23"
              c:identifier="PK_STATUS_ENUM_DOWNLOAD_FILELIST"/>
      <member name="download_changelog"
              value="24"
              c:identifier="PK_STATUS_ENUM_DOWNLOAD_CHANGELOG"/>
      <member name="download_group"
              value="25"
              c:identifier="PK_STATUS_ENUM_DOWNLOAD_GROUP"/>
      <member name="download_updateinfo"
              value="26"
              c:identifier="PK_STATUS_ENUM_DOWNLOAD_UPDATEINFO"/>
      <member name="repackaging"
              value="27"
              c:identifier="PK_STATUS_ENUM_REPACKAGING"/>
      <member name="loading_cache"
              value="28"
              c:identifier="PK_STATUS_ENUM_LOADING_CACHE"/>
      <member name="scan_applications"
              value="29"
              c:identifier="PK_STATUS_ENUM_SCAN_APPLICATIONS"/>
      <member name="generate_package_list"
              value="30"
              c:identifier="PK_STATUS_ENUM_GENERATE_PACKAGE_LIST"/>
      <member name="waiting_for_lock"
              value="31"
              c:identifier="PK_STATUS_ENUM_WAITING_FOR_LOCK"/>
      <member name="waiting_for_auth"
              value="32"
              c:identifier="PK_STATUS_ENUM_WAITING_FOR_AUTH"/>
      <member name="scan_process_list"
              value="33"
              c:identifier="PK_STATUS_ENUM_SCAN_PROCESS_LIST"/>
      <member name="check_executable_files"
              value="34"
              c:identifier="PK_STATUS_ENUM_CHECK_EXECUTABLE_FILES"/>
      <member name="check_libraries"
              value="35"
              c:identifier="PK_STATUS_ENUM_CHECK_LIBRARIES"/>
      <member name="copy_files"
              value="36"
              c:identifier="PK_STATUS_ENUM_COPY_FILES"/>
      <member name="last" value="37" c:identifier="PK_STATUS_ENUM_LAST"/>
    </enumeration>
    <class name="PkTask"
           c:type="PkTask"
           parent="PkClient"
           glib:type-name="PkTask"
           glib:get-type="pk_task_get_type"
           glib:type-struct="PkTaskClass">
      <constructor name="new" c:identifier="pk_task_new" version="0.5.2">
        <return-value transfer-ownership="full">
          <type name="PkTask" c:type="PkTask*"/>
        </return-value>
      </constructor>
      <function name="test" c:identifier="pk_task_test">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="user_data" transfer-ownership="none">
            <type name="any" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <virtual-method name="untrusted_question">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="request" transfer-ownership="none">
            <type name="uint" c:type="guint"/>
          </parameter>
          <parameter name="results" transfer-ownership="none">
            <type name="PkResults" c:type="PkResults*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="key_question">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="request" transfer-ownership="none">
            <type name="uint" c:type="guint"/>
          </parameter>
          <parameter name="results" transfer-ownership="none">
            <type name="PkResults" c:type="PkResults*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="eula_question">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="request" transfer-ownership="none">
            <type name="uint" c:type="guint"/>
          </parameter>
          <parameter name="results" transfer-ownership="none">
            <type name="PkResults" c:type="PkResults*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="media_change_question">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="request" transfer-ownership="none">
            <type name="uint" c:type="guint"/>
          </parameter>
          <parameter name="results" transfer-ownership="none">
            <type name="PkResults" c:type="PkResults*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="simulate_question">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="request" transfer-ownership="none">
            <type name="uint" c:type="guint"/>
          </parameter>
          <parameter name="results" transfer-ownership="none">
            <type name="PkResults" c:type="PkResults*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="generic_finish"
              c:identifier="pk_task_generic_finish"
              doc="Gets the result from the asynchronous function."
              version="0.5.2"
              throws="1">
        <return-value transfer-ownership="full">
          <type name="PkResults" c:type="PkResults*"/>
        </return-value>
        <parameters>
          <parameter name="res" transfer-ownership="none">
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="install_packages_async"
              c:identifier="pk_task_install_packages_async"
              doc="Merges in details about packages using resolve."
              version="0.5.2">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="package_ids" transfer-ownership="none">
            <array c:type="gchar**">
              <type name="utf8"/>
            </array>
          </parameter>
          <parameter name="cancellable" transfer-ownership="none">
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="progress_callback"
                     transfer-ownership="none"
                     scope="call"
                     closure="4">
            <type name="PkProgressCallback" c:type="PkProgressCallback"/>
          </parameter>
          <parameter name="progress_user_data" transfer-ownership="none">
            <type name="any" c:type="gpointer"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     scope="async"
                     closure="6">
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data" transfer-ownership="none">
            <type name="any" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="update_packages_async"
              c:identifier="pk_task_update_packages_async"
              doc="Update specific packages to the newest available versions."
              version="0.5.2">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="package_ids" transfer-ownership="none">
            <array c:type="gchar**">
              <type name="utf8"/>
            </array>
          </parameter>
          <parameter name="cancellable" transfer-ownership="none">
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="progress_callback"
                     transfer-ownership="none"
                     scope="call"
                     closure="4">
            <type name="PkProgressCallback" c:type="PkProgressCallback"/>
          </parameter>
          <parameter name="progress_user_data" transfer-ownership="none">
            <type name="any" c:type="gpointer"/>
          </parameter>
          <parameter name="callback_ready"
                     transfer-ownership="none"
                     scope="async"
                     closure="6">
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data" transfer-ownership="none">
            <type name="any" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="remove_packages_async"
              c:identifier="pk_task_remove_packages_async"
              doc="Remove a package (optionally with dependancies) from the system.
If %allow_deps is set to %FALSE, and other packages would have to be removed,
then the transaction would fail."
              version="0.5.2">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="package_ids" transfer-ownership="none">
            <array c:type="gchar**">
              <type name="utf8"/>
            </array>
          </parameter>
          <parameter name="allow_deps" transfer-ownership="none">
            <type name="boolean" c:type="gboolean"/>
          </parameter>
          <parameter name="autoremove" transfer-ownership="none">
            <type name="boolean" c:type="gboolean"/>
          </parameter>
          <parameter name="cancellable" transfer-ownership="none">
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="progress_callback"
                     transfer-ownership="none"
                     scope="call"
                     closure="6">
            <type name="PkProgressCallback" c:type="PkProgressCallback"/>
          </parameter>
          <parameter name="progress_user_data" transfer-ownership="none">
            <type name="any" c:type="gpointer"/>
          </parameter>
          <parameter name="callback_ready"
                     transfer-ownership="none"
                     scope="async"
                     closure="8">
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data" transfer-ownership="none">
            <type name="any" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="install_files_async"
              c:identifier="pk_task_install_files_async"
              doc="Install a file locally, and get the deps from the repositories.
This is useful for double clicking on a .rpm or .deb file."
              version="0.5.2">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="files" transfer-ownership="none">
            <array c:type="gchar**">
              <type name="utf8"/>
            </array>
          </parameter>
          <parameter name="cancellable" transfer-ownership="none">
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="progress_callback"
                     transfer-ownership="none"
                     scope="call"
                     closure="4">
            <type name="PkProgressCallback" c:type="PkProgressCallback"/>
          </parameter>
          <parameter name="progress_user_data" transfer-ownership="none">
            <type name="any" c:type="gpointer"/>
          </parameter>
          <parameter name="callback_ready"
                     transfer-ownership="none"
                     scope="async"
                     closure="6">
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data" transfer-ownership="none">
            <type name="any" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="update_system_async"
              c:identifier="pk_task_update_system_async"
              doc="Update all the packages on the system with the highest versions found in all
repositories.
- pk_task_repo_disable()
- pk_task_update_system()
- pk_task_repo_enable()"
              version="0.5.2">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="cancellable" transfer-ownership="none">
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="progress_callback"
                     transfer-ownership="none"
                     scope="call"
                     closure="3">
            <type name="PkProgressCallback" c:type="PkProgressCallback"/>
          </parameter>
          <parameter name="progress_user_data" transfer-ownership="none">
            <type name="any" c:type="gpointer"/>
          </parameter>
          <parameter name="callback_ready"
                     transfer-ownership="none"
                     scope="async"
                     closure="5">
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data" transfer-ownership="none">
            <type name="any" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="user_accepted"
              c:identifier="pk_task_user_accepted"
              version="0.5.2">
        <return-value transfer-ownership="none">
          <type name="boolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="request" transfer-ownership="none">
            <type name="uint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="user_declined"
              c:identifier="pk_task_user_declined"
              version="0.5.2">
        <return-value transfer-ownership="none">
          <type name="boolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="request" transfer-ownership="none">
            <type name="uint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <property name="simulate" writable="1">
        <type name="boolean" c:type="gboolean"/>
      </property>
      <field name="parent">
        <type name="PkClient" c:type="PkClient"/>
      </field>
      <field name="priv">
        <type name="PkTaskPrivate" c:type="PkTaskPrivate*"/>
      </field>
    </class>
    <record name="PkTaskClass"
            c:type="PkTaskClass"
            glib:is-gtype-struct-for="PkTask">
      <field name="parent_class">
        <type name="PkClientClass" c:type="PkClientClass"/>
      </field>
      <field name="untrusted_question">
        <callback name="untrusted_question" c:type="untrusted_question">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="task" transfer-ownership="none">
              <type name="PkTask" c:type="PkTask*"/>
            </parameter>
            <parameter name="request" transfer-ownership="none">
              <type name="uint" c:type="guint"/>
            </parameter>
            <parameter name="results" transfer-ownership="none">
              <type name="PkResults" c:type="PkResults*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="key_question">
        <callback name="key_question" c:type="key_question">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="task" transfer-ownership="none">
              <type name="PkTask" c:type="PkTask*"/>
            </parameter>
            <parameter name="request" transfer-ownership="none">
              <type name="uint" c:type="guint"/>
            </parameter>
            <parameter name="results" transfer-ownership="none">
              <type name="PkResults" c:type="PkResults*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="eula_question">
        <callback name="eula_question" c:type="eula_question">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="task" transfer-ownership="none">
              <type name="PkTask" c:type="PkTask*"/>
            </parameter>
            <parameter name="request" transfer-ownership="none">
              <type name="uint" c:type="guint"/>
            </parameter>
            <parameter name="results" transfer-ownership="none">
              <type name="PkResults" c:type="PkResults*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="media_change_question">
        <callback name="media_change_question" c:type="media_change_question">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="task" transfer-ownership="none">
              <type name="PkTask" c:type="PkTask*"/>
            </parameter>
            <parameter name="request" transfer-ownership="none">
              <type name="uint" c:type="guint"/>
            </parameter>
            <parameter name="results" transfer-ownership="none">
              <type name="PkResults" c:type="PkResults*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="simulate_question">
        <callback name="simulate_question" c:type="simulate_question">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="task" transfer-ownership="none">
              <type name="PkTask" c:type="PkTask*"/>
            </parameter>
            <parameter name="request" transfer-ownership="none">
              <type name="uint" c:type="guint"/>
            </parameter>
            <parameter name="results" transfer-ownership="none">
              <type name="PkResults" c:type="PkResults*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="pk_reserved1">
        <callback name="pk_reserved1" c:type="_pk_reserved1">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="pk_reserved2">
        <callback name="pk_reserved2" c:type="_pk_reserved2">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="pk_reserved3">
        <callback name="pk_reserved3" c:type="_pk_reserved3">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="pk_reserved4">
        <callback name="pk_reserved4" c:type="_pk_reserved4">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="pk_reserved5">
        <callback name="pk_reserved5" c:type="_pk_reserved5">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
    </record>
    <record name="PkTaskPrivate"
            c:type="PkTaskPrivate"
            doc="Private #PkTask data">
    </record>
    <class name="PkTransactionList"
           c:type="PkTransactionList"
           parent="GObject.Object"
           glib:type-name="PkTransactionList"
           glib:get-type="pk_transaction_list_get_type"
           glib:type-struct="PkTransactionListClass">
      <constructor name="new"
                   c:identifier="pk_transaction_list_new"
                   version="0.5.3">
        <return-value transfer-ownership="full">
          <type name="PkTransactionList" c:type="PkTransactionList*"/>
        </return-value>
      </constructor>
      <function name="test" c:identifier="pk_transaction_list_test">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="user_data" transfer-ownership="none">
            <type name="any" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <method name="get_ids"
              c:identifier="pk_transaction_list_get_ids"
              doc="Gets the string lists of transaction IDs recognised as pending, running or finished by the daemon."
              version="0.5.3">
        <return-value transfer-ownership="full">
          <array c:type="gchar**">
            <type name="utf8"/>
          </array>
        </return-value>
      </method>
      <field name="parent">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="priv">
        <type name="PkTransactionListPrivate"
              c:type="PkTransactionListPrivate*"/>
      </field>
      <glib:signal name="added">
        <return-value transfer-ownership="full">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="utf8" c:type="gchararray"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="removed">
        <return-value transfer-ownership="full">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="utf8" c:type="gchararray"/>
          </parameter>
        </parameters>
      </glib:signal>
    </class>
    <record name="PkTransactionListClass"
            c:type="PkTransactionListClass"
            glib:is-gtype-struct-for="PkTransactionList">
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="added">
        <callback name="added" c:type="added">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="tlist" transfer-ownership="none">
              <type name="PkTransactionList" c:type="PkTransactionList*"/>
            </parameter>
            <parameter name="tid" transfer-ownership="none">
              <type name="utf8" c:type="gchar*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="removed">
        <callback name="removed" c:type="removed">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="tlist" transfer-ownership="none">
              <type name="PkTransactionList" c:type="PkTransactionList*"/>
            </parameter>
            <parameter name="tid" transfer-ownership="none">
              <type name="utf8" c:type="gchar*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <record name="PkTransactionListPrivate"
            c:type="PkTransactionListPrivate"
            doc="Private #PkTransactionList data">
    </record>
    <class name="PkTransactionPast"
           c:type="PkTransactionPast"
           parent="PkSource"
           glib:type-name="PkTransactionPast"
           glib:get-type="pk_transaction_past_get_type"
           glib:type-struct="PkTransactionPastClass">
      <constructor name="new"
                   c:identifier="pk_transaction_past_new"
                   version="0.5.4">
        <return-value transfer-ownership="full">
          <type name="PkTransactionPast" c:type="PkTransactionPast*"/>
        </return-value>
      </constructor>
      <property name="cmdline" writable="1">
        <type name="utf8" c:type="gchararray"/>
      </property>
      <property name="data" writable="1">
        <type name="utf8" c:type="gchararray"/>
      </property>
      <property name="duration" writable="1">
        <type name="uint" c:type="guint"/>
      </property>
      <property name="role" writable="1">
        <type name="uint" c:type="guint"/>
      </property>
      <property name="succeeded" writable="1">
        <type name="boolean" c:type="gboolean"/>
      </property>
      <property name="tid" writable="1">
        <type name="utf8" c:type="gchararray"/>
      </property>
      <property name="timespec" writable="1">
        <type name="utf8" c:type="gchararray"/>
      </property>
      <property name="uid" writable="1">
        <type name="uint" c:type="guint"/>
      </property>
      <field name="parent">
        <type name="PkSource" c:type="PkSource"/>
      </field>
      <field name="priv">
        <type name="PkTransactionPastPrivate"
              c:type="PkTransactionPastPrivate*"/>
      </field>
    </class>
    <record name="PkTransactionPastClass"
            c:type="PkTransactionPastClass"
            glib:is-gtype-struct-for="PkTransactionPast">
      <field name="parent_class">
        <type name="PkSourceClass" c:type="PkSourceClass"/>
      </field>
      <field name="pk_reserved1">
        <callback name="pk_reserved1" c:type="_pk_reserved1">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="pk_reserved2">
        <callback name="pk_reserved2" c:type="_pk_reserved2">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="pk_reserved3">
        <callback name="pk_reserved3" c:type="_pk_reserved3">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="pk_reserved4">
        <callback name="pk_reserved4" c:type="_pk_reserved4">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="pk_reserved5">
        <callback name="pk_reserved5" c:type="_pk_reserved5">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
    </record>
    <record name="PkTransactionPastPrivate"
            c:type="PkTransactionPastPrivate"
            doc="Private #PkTransactionPast data">
    </record>
    <class name="PkUpdateDetail"
           c:type="PkUpdateDetail"
           parent="PkSource"
           glib:type-name="PkUpdateDetail"
           glib:get-type="pk_update_detail_get_type"
           glib:type-struct="PkUpdateDetailClass">
      <constructor name="new"
                   c:identifier="pk_update_detail_new"
                   version="0.5.4">
        <return-value transfer-ownership="full">
          <type name="PkUpdateDetail" c:type="PkUpdateDetail*"/>
        </return-value>
      </constructor>
      <property name="bugzilla-url" writable="1">
        <type name="utf8" c:type="gchararray"/>
      </property>
      <property name="changelog" writable="1">
        <type name="utf8" c:type="gchararray"/>
      </property>
      <property name="cve-url" writable="1">
        <type name="utf8" c:type="gchararray"/>
      </property>
      <property name="issued" writable="1">
        <type name="utf8" c:type="gchararray"/>
      </property>
      <property name="obsoletes" writable="1">
        <type name="utf8" c:type="gchararray"/>
      </property>
      <property name="package-id" writable="1">
        <type name="utf8" c:type="gchararray"/>
      </property>
      <property name="restart" writable="1">
        <type name="uint" c:type="guint"/>
      </property>
      <property name="state" writable="1">
        <type name="uint" c:type="guint"/>
      </property>
      <property name="update-text" writable="1">
        <type name="utf8" c:type="gchararray"/>
      </property>
      <property name="updated" writable="1">
        <type name="utf8" c:type="gchararray"/>
      </property>
      <property name="updates" writable="1">
        <type name="utf8" c:type="gchararray"/>
      </property>
      <property name="vendor-url" writable="1">
        <type name="utf8" c:type="gchararray"/>
      </property>
      <field name="parent">
        <type name="PkSource" c:type="PkSource"/>
      </field>
      <field name="priv">
        <type name="PkUpdateDetailPrivate" c:type="PkUpdateDetailPrivate*"/>
      </field>
    </class>
    <record name="PkUpdateDetailClass"
            c:type="PkUpdateDetailClass"
            glib:is-gtype-struct-for="PkUpdateDetail">
      <field name="parent_class">
        <type name="PkSourceClass" c:type="PkSourceClass"/>
      </field>
      <field name="pk_reserved1">
        <callback name="pk_reserved1" c:type="_pk_reserved1">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="pk_reserved2">
        <callback name="pk_reserved2" c:type="_pk_reserved2">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="pk_reserved3">
        <callback name="pk_reserved3" c:type="_pk_reserved3">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="pk_reserved4">
        <callback name="pk_reserved4" c:type="_pk_reserved4">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="pk_reserved5">
        <callback name="pk_reserved5" c:type="_pk_reserved5">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
    </record>
    <record name="PkUpdateDetailPrivate"
            c:type="PkUpdateDetailPrivate"
            doc="Private #PkUpdateDetail data">
    </record>
    <enumeration name="PkUpdateStateEnum"
                 doc="What state the update is in"
                 c:type="PkUpdateStateEnum">
      <member name="unknown"
              value="0"
              c:identifier="PK_UPDATE_STATE_ENUM_UNKNOWN"/>
      <member name="stable"
              value="1"
              c:identifier="PK_UPDATE_STATE_ENUM_STABLE"/>
      <member name="unstable"
              value="2"
              c:identifier="PK_UPDATE_STATE_ENUM_UNSTABLE"/>
      <member name="testing"
              value="3"
              c:identifier="PK_UPDATE_STATE_ENUM_TESTING"/>
      <member name="last" value="4" c:identifier="PK_UPDATE_STATE_ENUM_LAST"/>
    </enumeration>
    <function name="egg_debug_backtrace" c:identifier="egg_debug_backtrace">
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
    </function>
    <function name="egg_debug_get_option_group"
              c:identifier="egg_debug_get_option_group"
              doc="Returns a #GOptionGroup for the commandline arguments recognized
by debugging. You should add this group to your #GOptionContext
with g_option_context_add_group(), if you are using
g_option_context_parse() to parse your commandline arguments.">
      <return-value transfer-ownership="full">
        <type name="GLib.OptionGroup" c:type="GOptionGroup*"/>
      </return-value>
    </function>
    <function name="egg_debug_init"
              c:identifier="egg_debug_init"
              doc="Parses command line arguments.">
      <return-value transfer-ownership="none">
        <type name="boolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="argc" direction="out" transfer-ownership="full">
          <type name="int" c:type="gint*"/>
        </parameter>
        <parameter name="argv" transfer-ownership="none">
          <type name="utf8" c:type="gchar***"/>
        </parameter>
      </parameters>
    </function>
    <function name="egg_debug_is_verbose" c:identifier="egg_debug_is_verbose">
      <return-value transfer-ownership="none">
        <type name="boolean" c:type="gboolean"/>
      </return-value>
    </function>
    <function name="egg_debug_real" c:identifier="egg_debug_real">
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="func" transfer-ownership="none">
          <type name="utf8" c:type="gchar*"/>
        </parameter>
        <parameter name="file" transfer-ownership="none">
          <type name="utf8" c:type="gchar*"/>
        </parameter>
        <parameter name="line" transfer-ownership="none">
          <type name="int" c:type="gint"/>
        </parameter>
        <parameter name="format" transfer-ownership="none">
          <type name="utf8" c:type="gchar*"/>
        </parameter>
        <parameter transfer-ownership="none">
          <varargs>
          </varargs>
        </parameter>
      </parameters>
    </function>
    <function name="egg_debug_set_log_filename"
              c:identifier="egg_debug_set_log_filename">
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="filename" transfer-ownership="none">
          <type name="utf8" c:type="gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="egg_error_real" c:identifier="egg_error_real">
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="func" transfer-ownership="none">
          <type name="utf8" c:type="gchar*"/>
        </parameter>
        <parameter name="file" transfer-ownership="none">
          <type name="utf8" c:type="gchar*"/>
        </parameter>
        <parameter name="line" transfer-ownership="none">
          <type name="int" c:type="gint"/>
        </parameter>
        <parameter name="format" transfer-ownership="none">
          <type name="utf8" c:type="gchar*"/>
        </parameter>
        <parameter transfer-ownership="none">
          <varargs>
          </varargs>
        </parameter>
      </parameters>
    </function>
    <function name="egg_string_test" c:identifier="egg_string_test">
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="user_data" transfer-ownership="none">
          <type name="any" c:type="gpointer"/>
        </parameter>
      </parameters>
    </function>
    <function name="egg_strlen"
              c:identifier="egg_strlen"
              doc="This function is a much safer way of doing strlen as it checks for NULL and
a stupidly long string.">
      <return-value transfer-ownership="none">
        <type name="uint" c:type="guint"/>
      </return-value>
      <parameters>
        <parameter name="text" transfer-ownership="none">
          <type name="utf8" c:type="gchar*"/>
        </parameter>
        <parameter name="len" transfer-ownership="none">
          <type name="uint" c:type="guint"/>
        </parameter>
      </parameters>
    </function>
    <function name="egg_strreplace"
              c:identifier="egg_strreplace"
              doc="Replaces chars in the text with a replacement.
The %find and %replace variables to not have to be of the same length">
      <return-value transfer-ownership="full">
        <type name="utf8" c:type="gchar*"/>
      </return-value>
      <parameters>
        <parameter name="text" transfer-ownership="none">
          <type name="utf8" c:type="gchar*"/>
        </parameter>
        <parameter name="find" transfer-ownership="none">
          <type name="utf8" c:type="gchar*"/>
        </parameter>
        <parameter name="replace" transfer-ownership="none">
          <type name="utf8" c:type="gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="egg_strtoint"
              c:identifier="egg_strtoint"
              doc="Converts a string into a signed integer value in a safe way.">
      <return-value transfer-ownership="none">
        <type name="boolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="text" transfer-ownership="none">
          <type name="utf8" c:type="gchar*"/>
        </parameter>
        <parameter name="value" direction="out" transfer-ownership="full">
          <type name="int" c:type="gint*"/>
        </parameter>
      </parameters>
    </function>
    <function name="egg_strtouint"
              c:identifier="egg_strtouint"
              doc="Converts a string into a unsigned integer value in a safe way.">
      <return-value transfer-ownership="none">
        <type name="boolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="text" transfer-ownership="none">
          <type name="utf8" c:type="gchar*"/>
        </parameter>
        <parameter name="value" direction="out" transfer-ownership="full">
          <type name="uint" c:type="guint*"/>
        </parameter>
      </parameters>
    </function>
    <function name="egg_strvequal"
              c:identifier="egg_strvequal"
              doc="This function will check to see if the GStrv arrays are string equal">
      <return-value transfer-ownership="none">
        <type name="boolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="id1" transfer-ownership="none">
          <array c:type="gchar**">
            <type name="utf8"/>
          </array>
        </parameter>
        <parameter name="id2" transfer-ownership="none">
          <array c:type="gchar**">
            <type name="utf8"/>
          </array>
        </parameter>
      </parameters>
    </function>
    <function name="egg_strzero"
              c:identifier="egg_strzero"
              doc="This function is a much safer way of doing &quot;if (strlen (text) == 0))&quot;
as it does not rely on text being NULL terminated. It&apos;s also much
quicker as it only checks the first byte rather than scanning the whole
string just to verify it&apos;s not zero length.">
      <return-value transfer-ownership="none">
        <type name="boolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="text" transfer-ownership="none">
          <type name="utf8" c:type="gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="egg_warning_real" c:identifier="egg_warning_real">
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="func" transfer-ownership="none">
          <type name="utf8" c:type="gchar*"/>
        </parameter>
        <parameter name="file" transfer-ownership="none">
          <type name="utf8" c:type="gchar*"/>
        </parameter>
        <parameter name="line" transfer-ownership="none">
          <type name="int" c:type="gint"/>
        </parameter>
        <parameter name="format" transfer-ownership="none">
          <type name="utf8" c:type="gchar*"/>
        </parameter>
        <parameter transfer-ownership="none">
          <varargs>
          </varargs>
        </parameter>
      </parameters>
    </function>
    <function name="pk_authorize_type_enum_from_string"
              c:identifier="pk_authorize_type_enum_from_string"
              doc="Converts a text enumerated type to its unsigned integer representation"
              version="0.5.0">
      <return-value transfer-ownership="full">
        <type name="PkAuthorizeEnum" c:type="PkAuthorizeEnum"/>
      </return-value>
      <parameters>
        <parameter name="auth_type" transfer-ownership="none">
          <type name="utf8" c:type="gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="pk_authorize_type_enum_to_string"
              c:identifier="pk_authorize_type_enum_to_string"
              doc="Converts a enumerated type to its text representation"
              version="0.5.0">
      <return-value transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </return-value>
      <parameters>
        <parameter name="auth_type" transfer-ownership="none">
          <type name="PkAuthorizeEnum" c:type="PkAuthorizeEnum"/>
        </parameter>
      </parameters>
    </function>
    <function name="pk_bitfield_contain_priority"
              c:identifier="pk_bitfield_contain_priority"
              doc="Finds elements in a list, but with priority going to the preceeding entry"
              version="0.5.2">
      <return-value transfer-ownership="none">
        <type name="int" c:type="gint"/>
      </return-value>
      <parameters>
        <parameter name="values" transfer-ownership="none">
          <type name="PkBitfield" c:type="PkBitfield"/>
        </parameter>
        <parameter name="value" transfer-ownership="none">
          <type name="int" c:type="gint"/>
        </parameter>
        <parameter transfer-ownership="none">
          <varargs>
          </varargs>
        </parameter>
      </parameters>
    </function>
    <function name="pk_bitfield_from_enums"
              c:identifier="pk_bitfield_from_enums"
              version="0.5.2">
      <return-value transfer-ownership="full">
        <type name="PkBitfield" c:type="PkBitfield"/>
      </return-value>
      <parameters>
        <parameter name="value" transfer-ownership="none">
          <type name="int" c:type="gint"/>
        </parameter>
        <parameter transfer-ownership="none">
          <varargs>
          </varargs>
        </parameter>
      </parameters>
    </function>
    <function name="pk_bitfield_test" c:identifier="pk_bitfield_test">
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="user_data" transfer-ownership="none">
          <type name="any" c:type="gpointer"/>
        </parameter>
      </parameters>
    </function>
    <function name="pk_common_test" c:identifier="pk_common_test">
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="user_data" transfer-ownership="none">
          <type name="any" c:type="gpointer"/>
        </parameter>
      </parameters>
    </function>
    <function name="pk_enum_find_string"
              c:identifier="pk_enum_find_string"
              doc="Search for a enum value in a table of constants.">
      <return-value transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </return-value>
      <parameters>
        <parameter name="table" transfer-ownership="none">
          <type name="PkEnumMatch" c:type="PkEnumMatch*"/>
        </parameter>
        <parameter name="value" transfer-ownership="none">
          <type name="uint" c:type="guint"/>
        </parameter>
      </parameters>
    </function>
    <function name="pk_enum_find_value"
              c:identifier="pk_enum_find_value"
              doc="Search for a string value in a table of constants.">
      <return-value transfer-ownership="none">
        <type name="uint" c:type="guint"/>
      </return-value>
      <parameters>
        <parameter name="table" transfer-ownership="none">
          <type name="PkEnumMatch" c:type="PkEnumMatch*"/>
        </parameter>
        <parameter name="string" transfer-ownership="none">
          <type name="utf8" c:type="gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="pk_enum_test" c:identifier="pk_enum_test">
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="user_data" transfer-ownership="none">
          <type name="any" c:type="gpointer"/>
        </parameter>
      </parameters>
    </function>
    <function name="pk_exit_enum_from_string"
              c:identifier="pk_exit_enum_from_string"
              doc="Converts a text enumerated type to its unsigned integer representation"
              version="0.5.0">
      <return-value transfer-ownership="full">
        <type name="PkExitEnum" c:type="PkExitEnum"/>
      </return-value>
      <parameters>
        <parameter name="exit" transfer-ownership="none">
          <type name="utf8" c:type="gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="pk_exit_enum_to_string"
              c:identifier="pk_exit_enum_to_string"
              doc="Converts a enumerated type to its text representation"
              version="0.5.0">
      <return-value transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </return-value>
      <parameters>
        <parameter name="exit" transfer-ownership="none">
          <type name="PkExitEnum" c:type="PkExitEnum"/>
        </parameter>
      </parameters>
    </function>
    <function name="pk_filter_bitfield_from_string"
              c:identifier="pk_filter_bitfield_from_string"
              doc="Converts text representation to its enumerated type bitfield, or 0 for invalid"
              version="0.5.2">
      <return-value transfer-ownership="full">
        <type name="PkBitfield" c:type="PkBitfield"/>
      </return-value>
      <parameters>
        <parameter name="filters" transfer-ownership="none">
          <type name="utf8" c:type="gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="pk_filter_bitfield_to_string"
              c:identifier="pk_filter_bitfield_to_string"
              doc="Converts a enumerated type bitfield to its text representation"
              version="0.5.2">
      <return-value transfer-ownership="full">
        <type name="utf8" c:type="gchar*"/>
      </return-value>
      <parameters>
        <parameter name="filters" transfer-ownership="none">
          <type name="PkBitfield" c:type="PkBitfield"/>
        </parameter>
      </parameters>
    </function>
    <function name="pk_filter_enum_from_string"
              c:identifier="pk_filter_enum_from_string"
              doc="Converts a text enumerated type to its unsigned integer representation"
              version="0.5.0">
      <return-value transfer-ownership="full">
        <type name="PkFilterEnum" c:type="PkFilterEnum"/>
      </return-value>
      <parameters>
        <parameter name="filter" transfer-ownership="none">
          <type name="utf8" c:type="gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="pk_filter_enum_to_string"
              c:identifier="pk_filter_enum_to_string"
              doc="Converts a enumerated type to its text representation"
              version="0.5.0">
      <return-value transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </return-value>
      <parameters>
        <parameter name="filter" transfer-ownership="none">
          <type name="PkFilterEnum" c:type="PkFilterEnum"/>
        </parameter>
      </parameters>
    </function>
    <function name="pk_group_bitfield_from_string"
              c:identifier="pk_group_bitfield_from_string"
              doc="Converts text representation to its enumerated type bitfield"
              version="0.5.2">
      <return-value transfer-ownership="full">
        <type name="PkBitfield" c:type="PkBitfield"/>
      </return-value>
      <parameters>
        <parameter name="groups" transfer-ownership="none">
          <type name="utf8" c:type="gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="pk_group_bitfield_to_string"
              c:identifier="pk_group_bitfield_to_string">
      <return-value transfer-ownership="full">
        <type name="utf8" c:type="gchar*"/>
      </return-value>
      <parameters>
        <parameter name="groups" transfer-ownership="none">
          <type name="PkBitfield" c:type="PkBitfield"/>
        </parameter>
      </parameters>
    </function>
    <function name="pk_group_enum_from_string"
              c:identifier="pk_group_enum_from_string"
              doc="Converts a text enumerated type to its unsigned integer representation"
              version="0.5.0">
      <return-value transfer-ownership="full">
        <type name="PkGroupEnum" c:type="PkGroupEnum"/>
      </return-value>
      <parameters>
        <parameter name="group" transfer-ownership="none">
          <type name="utf8" c:type="gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="pk_group_enum_to_string"
              c:identifier="pk_group_enum_to_string"
              doc="Converts a enumerated type to its text representation"
              version="0.5.0">
      <return-value transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </return-value>
      <parameters>
        <parameter name="group" transfer-ownership="none">
          <type name="PkGroupEnum" c:type="PkGroupEnum"/>
        </parameter>
      </parameters>
    </function>
    <function name="pk_info_enum_from_string"
              c:identifier="pk_info_enum_from_string"
              doc="Converts a text enumerated type to its unsigned integer representation"
              version="0.5.0">
      <return-value transfer-ownership="full">
        <type name="PkInfoEnum" c:type="PkInfoEnum"/>
      </return-value>
      <parameters>
        <parameter name="info" transfer-ownership="none">
          <type name="utf8" c:type="gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="pk_info_enum_to_string"
              c:identifier="pk_info_enum_to_string"
              doc="Converts a enumerated type to its text representation"
              version="0.5.0">
      <return-value transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </return-value>
      <parameters>
        <parameter name="info" transfer-ownership="none">
          <type name="PkInfoEnum" c:type="PkInfoEnum"/>
        </parameter>
      </parameters>
    </function>
    <function name="pk_iso8601_from_date"
              c:identifier="pk_iso8601_from_date"
              version="0.5.2">
      <return-value transfer-ownership="full">
        <type name="utf8" c:type="gchar*"/>
      </return-value>
      <parameters>
        <parameter name="date" transfer-ownership="none">
          <type name="GLib.Date" c:type="GDate*"/>
        </parameter>
      </parameters>
    </function>
    <function name="pk_iso8601_present"
              c:identifier="pk_iso8601_present"
              version="0.5.2">
      <return-value transfer-ownership="full">
        <type name="utf8" c:type="gchar*"/>
      </return-value>
    </function>
    <function name="pk_iso8601_to_date"
              c:identifier="pk_iso8601_to_date"
              version="0.5.2">
      <return-value transfer-ownership="full">
        <type name="GLib.Date" c:type="GDate*"/>
      </return-value>
      <parameters>
        <parameter name="iso_date" transfer-ownership="none">
          <type name="utf8" c:type="gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="pk_license_enum_from_string"
              c:identifier="pk_license_enum_from_string"
              doc="Converts a text enumerated type to its unsigned integer representation"
              version="0.5.0">
      <return-value transfer-ownership="full">
        <type name="PkLicenseEnum" c:type="PkLicenseEnum"/>
      </return-value>
      <parameters>
        <parameter name="license" transfer-ownership="none">
          <type name="utf8" c:type="gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="pk_license_enum_to_string"
              c:identifier="pk_license_enum_to_string"
              doc="Converts a enumerated type to its text representation"
              version="0.5.0">
      <return-value transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </return-value>
      <parameters>
        <parameter name="license" transfer-ownership="none">
          <type name="PkLicenseEnum" c:type="PkLicenseEnum"/>
        </parameter>
      </parameters>
    </function>
    <function name="pk_media_type_enum_from_string"
              c:identifier="pk_media_type_enum_from_string"
              doc="Converts a text enumerated type to its unsigned integer representation"
              version="0.5.0">
      <return-value transfer-ownership="full">
        <type name="PkMediaTypeEnum" c:type="PkMediaTypeEnum"/>
      </return-value>
      <parameters>
        <parameter name="media_type" transfer-ownership="none">
          <type name="utf8" c:type="gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="pk_media_type_enum_to_string"
              c:identifier="pk_media_type_enum_to_string"
              doc="Converts a enumerated type to its text representation"
              version="0.5.0">
      <return-value transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </return-value>
      <parameters>
        <parameter name="media_type" transfer-ownership="none">
          <type name="PkMediaTypeEnum" c:type="PkMediaTypeEnum"/>
        </parameter>
      </parameters>
    </function>
    <function name="pk_network_enum_from_string"
              c:identifier="pk_network_enum_from_string"
              doc="Converts a text enumerated type to its unsigned integer representation"
              version="0.5.0">
      <return-value transfer-ownership="full">
        <type name="PkNetworkEnum" c:type="PkNetworkEnum"/>
      </return-value>
      <parameters>
        <parameter name="network" transfer-ownership="none">
          <type name="utf8" c:type="gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="pk_network_enum_to_string"
              c:identifier="pk_network_enum_to_string"
              doc="Converts a enumerated type to its text representation"
              version="0.5.0">
      <return-value transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </return-value>
      <parameters>
        <parameter name="network" transfer-ownership="none">
          <type name="PkNetworkEnum" c:type="PkNetworkEnum"/>
        </parameter>
      </parameters>
    </function>
    <function name="pk_provides_enum_from_string"
              c:identifier="pk_provides_enum_from_string"
              doc="Converts a text enumerated type to its unsigned integer representation"
              version="0.5.0">
      <return-value transfer-ownership="full">
        <type name="PkProvidesEnum" c:type="PkProvidesEnum"/>
      </return-value>
      <parameters>
        <parameter name="provides" transfer-ownership="none">
          <type name="utf8" c:type="gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="pk_provides_enum_to_string"
              c:identifier="pk_provides_enum_to_string"
              doc="Converts a enumerated type to its text representation"
              version="0.5.0">
      <return-value transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </return-value>
      <parameters>
        <parameter name="provides" transfer-ownership="none">
          <type name="PkProvidesEnum" c:type="PkProvidesEnum"/>
        </parameter>
      </parameters>
    </function>
    <function name="pk_ptr_array_to_strv"
              c:identifier="pk_ptr_array_to_strv"
              doc="Form a composite string array of strings.
The data in the GPtrArray is copied."
              version="0.5.2">
      <return-value transfer-ownership="full">
        <array c:type="gchar**">
          <type name="utf8"/>
        </array>
      </return-value>
      <parameters>
        <parameter name="array" transfer-ownership="none">
          <type name="GLib.PtrArray" c:type="GPtrArray*"/>
        </parameter>
      </parameters>
    </function>
    <function name="pk_restart_enum_from_string"
              c:identifier="pk_restart_enum_from_string"
              doc="Converts a text enumerated type to its unsigned integer representation"
              version="0.5.0">
      <return-value transfer-ownership="full">
        <type name="PkRestartEnum" c:type="PkRestartEnum"/>
      </return-value>
      <parameters>
        <parameter name="restart" transfer-ownership="none">
          <type name="utf8" c:type="gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="pk_restart_enum_to_string"
              c:identifier="pk_restart_enum_to_string"
              doc="Converts a enumerated type to its text representation"
              version="0.5.0">
      <return-value transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </return-value>
      <parameters>
        <parameter name="restart" transfer-ownership="none">
          <type name="PkRestartEnum" c:type="PkRestartEnum"/>
        </parameter>
      </parameters>
    </function>
    <function name="pk_role_bitfield_from_string"
              c:identifier="pk_role_bitfield_from_string"
              doc="Converts text representation to its enumerated type bitfield"
              version="0.5.2">
      <return-value transfer-ownership="full">
        <type name="PkBitfield" c:type="PkBitfield"/>
      </return-value>
      <parameters>
        <parameter name="roles" transfer-ownership="none">
          <type name="utf8" c:type="gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="pk_role_bitfield_to_string"
              c:identifier="pk_role_bitfield_to_string"
              doc="Converts a enumerated type bitfield to its text representation"
              version="0.5.2">
      <return-value transfer-ownership="full">
        <type name="utf8" c:type="gchar*"/>
      </return-value>
      <parameters>
        <parameter name="roles" transfer-ownership="none">
          <type name="PkBitfield" c:type="PkBitfield"/>
        </parameter>
      </parameters>
    </function>
    <function name="pk_role_enum_from_string"
              c:identifier="pk_role_enum_from_string"
              doc="Converts a text enumerated type to its unsigned integer representation"
              version="0.5.0">
      <return-value transfer-ownership="full">
        <type name="PkRoleEnum" c:type="PkRoleEnum"/>
      </return-value>
      <parameters>
        <parameter name="role" transfer-ownership="none">
          <type name="utf8" c:type="gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="pk_role_enum_to_string"
              c:identifier="pk_role_enum_to_string"
              doc="Converts a enumerated type to its text representation"
              version="0.5.0">
      <return-value transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </return-value>
      <parameters>
        <parameter name="role" transfer-ownership="none">
          <type name="PkRoleEnum" c:type="PkRoleEnum"/>
        </parameter>
      </parameters>
    </function>
    <function name="pk_sig_type_enum_from_string"
              c:identifier="pk_sig_type_enum_from_string"
              doc="Converts a text enumerated type to its unsigned integer representation">
      <return-value transfer-ownership="full">
        <type name="PkSigTypeEnum" c:type="PkSigTypeEnum"/>
      </return-value>
      <parameters>
        <parameter name="sig_type" transfer-ownership="none">
          <type name="utf8" c:type="gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="pk_sig_type_enum_to_string"
              c:identifier="pk_sig_type_enum_to_string"
              doc="Converts a enumerated type to its text representation"
              version="0.5.0">
      <return-value transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </return-value>
      <parameters>
        <parameter name="sig_type" transfer-ownership="none">
          <type name="PkSigTypeEnum" c:type="PkSigTypeEnum"/>
        </parameter>
      </parameters>
    </function>
    <function name="pk_status_enum_from_string"
              c:identifier="pk_status_enum_from_string"
              doc="Converts a text enumerated type to its unsigned integer representation"
              version="0.5.0">
      <return-value transfer-ownership="full">
        <type name="PkStatusEnum" c:type="PkStatusEnum"/>
      </return-value>
      <parameters>
        <parameter name="status" transfer-ownership="none">
          <type name="utf8" c:type="gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="pk_status_enum_to_string"
              c:identifier="pk_status_enum_to_string"
              doc="Converts a enumerated type to its text representation"
              version="0.5.0">
      <return-value transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </return-value>
      <parameters>
        <parameter name="status" transfer-ownership="none">
          <type name="PkStatusEnum" c:type="PkStatusEnum"/>
        </parameter>
      </parameters>
    </function>
    <function name="pk_update_state_enum_from_string"
              c:identifier="pk_update_state_enum_from_string"
              doc="Converts a text enumerated type to its unsigned integer representation"
              version="0.5.0">
      <return-value transfer-ownership="full">
        <type name="PkUpdateStateEnum" c:type="PkUpdateStateEnum"/>
      </return-value>
      <parameters>
        <parameter name="update_state" transfer-ownership="none">
          <type name="utf8" c:type="gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="pk_update_state_enum_to_string"
              c:identifier="pk_update_state_enum_to_string"
              doc="Converts a enumerated type to its text representation"
              version="0.5.0">
      <return-value transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </return-value>
      <parameters>
        <parameter name="update_state" transfer-ownership="none">
          <type name="PkUpdateStateEnum" c:type="PkUpdateStateEnum"/>
        </parameter>
      </parameters>
    </function>
  </namespace>
</repository>
